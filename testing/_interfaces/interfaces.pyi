# manually maintained, created with parser.py and get_all.py
import pymxs


class Action:
    def Init(Container: pymxs.runtime.IObject, ParticleSystem: pymxs.runtime.Object, ParticleSystemNode: pymxs.runtime.Node, Actions: pymxs.runtime.ObjectArray, ActionNodes: pymxs.runtime.NodeArray) -> pymxs.runtime.Boolean:
        """
        actions is In and Out parameter
        actionNodes is In and Out parameter
        """
        ...
    def Release(Container: pymxs.runtime.IObject) -> pymxs.runtime.Boolean: ...
    def ActivityInterval() -> pymxs.runtime.Interval: ...
    def IsFertile() -> pymxs.runtime.Boolean: ...
    def IsNonExecutable() -> pymxs.runtime.Boolean: ...
    def SupportRand() -> pymxs.runtime.Boolean: ...
    def IsMaterialHolder() -> pymxs.runtime.Boolean: ...
    def SupportScriptWiring() -> pymxs.runtime.Boolean: ...
    ...
class Operator:
    def Proceed(Container: pymxs.runtime.IObject, TimeStart: pymxs.runtime.Time, TimeEnd: pymxs.runtime.Time, ParticleSystem: pymxs.runtime.Object, ParticleSystemNode: pymxs.runtime.Node, ActionNode: pymxs.runtime.Node, Integrator: pymxs.runtime.Interface) -> pymxs.runtime.Boolean:
        """
        TimeEnd is In and Out parameter
        """
        ...
    ...
class PViewItem:
    def NumPViewParamBlocks() -> pymxs.runtime.Integer: ...
    def GetPViewParamBlock(Index: pymxs.runtime.Index) -> pymxs.runtime.MaxObject: ...
    def HasComments(ActionNode: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetComments(ActionNode: pymxs.runtime.Node) -> pymxs.runtime.String: ...
    def SetComments(ActionNode: pymxs.runtime.Node, Comments: pymxs.runtime.String) -> None: ...
    ...
class Interface:
    Control: pymxs.runtime.Node  
    ...
class Spring:
    def GetMass() -> pymxs.runtime.Float: ...
    def SetMass(Mass: pymxs.runtime.Float) -> None: ...
    def GetDrag() -> pymxs.runtime.Float: ...
    def SetDrag(Drag: pymxs.runtime.Float) -> None: ...
    def GetTension(SpringIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetTension(SpringIndex: pymxs.runtime.Index, Tension: pymxs.runtime.Float) -> None: ...
    def GetDampening(SpringIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetDampening(SpringIndex: pymxs.runtime.Index, Dampening: pymxs.runtime.Float) -> None: ...
    def AddSpring(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetSpringCount() -> pymxs.runtime.Integer: ...
    def RemoveSpringByIndex(SpringIndex: pymxs.runtime.Index) -> None: ...
    def RemoveSpring(Node: pymxs.runtime.Node) -> None: ...
    ...
class IMtlRender_Compability_MtlBase:
    ...
class ISBSO:
    def GetOutputName() -> pymxs.runtime.String: ...
    def GetParentGraphName() -> pymxs.runtime.String: ...
    ...
class Reactions:
    EDITSTATEMODE: pymxs.runtime.Boolean  
    CREATEMODE: pymxs.runtime.Boolean  
    USECURVE: pymxs.runtime.Boolean  
    def ReactTo(Object: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def Create(Name: pymxs.runtime.String = "scriptCreated") -> pymxs.runtime.Boolean: ...
    def Delete(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetCount() -> pymxs.runtime.Integer: ...
    def Select(Index: pymxs.runtime.Index) -> None: ...
    def GetSelected() -> pymxs.runtime.Index: ...
    def SetStateToCurrent(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetFloatState(Index: pymxs.runtime.Index, State: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SetVectorState(Index: pymxs.runtime.Index, State: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def SetRotationState(Index: pymxs.runtime.Index, State: pymxs.runtime.Quat) -> pymxs.runtime.Boolean: ...
    def SetValueToCurrent(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetValueAsFloat(Index: pymxs.runtime.Index, Value: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SetValueAsVector(Index: pymxs.runtime.Index, Value: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def SetValueAsQuat(Index: pymxs.runtime.Index, Value: pymxs.runtime.Quat) -> pymxs.runtime.Boolean: ...
    def SetInfluence(Index: pymxs.runtime.Index, Influence: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SetStrength(Index: pymxs.runtime.Index, Strength: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SetFalloff(Index: pymxs.runtime.Index, Influence: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SetName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> None: ...
    def GetName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetInfluence(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def GetStrength(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def GetFalloff(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def GetType() -> pymxs.runtime.Enum:
        """
        getType pymxs.runtime.Enums: {#floatReaction|#positionalReaction|#rotationalReaction|#scaleReaction
        """
        ...
    def GetState(Index: pymxs.runtime.Index) -> pymxs.runtime.Value: ...
    def GetValue(Index: pymxs.runtime.Index) -> pymxs.runtime.Value: ...
    ...
class ImrShaderTranslation_ClassInfo:
    ...
class PFEngine:
    def Init() -> pymxs.runtime.Boolean: ...
    ...
class RealWorldMapSizeInterface:
    REALWORLDMAPSIZE: pymxs.runtime.Boolean  
    ...
class ThePainterInterface:
    USESPLINECONSTRAINT: pymxs.runtime.Boolean  
    UPDATEONMOUSEUP: pymxs.runtime.Boolean  
    TREEDEPTH: pymxs.runtime.Integer  # Range: 2 to 10
    MINSTR: pymxs.runtime.Float  # Range: 0.0 to 1e+06
    MAXSTR: pymxs.runtime.Float  # Range: 0.0 to 1e+06
    MINSIZE: pymxs.runtime.Float  # Range: 0.0 to 1e+06
    MAXSIZE: pymxs.runtime.Float  # Range: 0.0 to 1e+06
    ADDITIVEMODE: pymxs.runtime.Boolean  
    DRAWRING: pymxs.runtime.Boolean  
    DRAWNORMAL: pymxs.runtime.Boolean  
    DRAWTRACE: pymxs.runtime.Boolean  
    PRESSUREENABLE: pymxs.runtime.Boolean  
    PRESSUREAFFECTS: pymxs.runtime.Integer  # Range: 1 to 4
    PREDEFINEDSTRENABLE: pymxs.runtime.Boolean  
    PREDEFINEDSIZEENABLE: pymxs.runtime.Boolean  
    MIRRORENABLE: pymxs.runtime.Boolean  
    MIRRORAXIS: pymxs.runtime.Integer  # Range: 1 to 3
    MIRROROFFSET: pymxs.runtime.Float  # Range: -1e+06 to 1e+06
    MIRRORGIZMOSIZE: pymxs.runtime.Float  # Range: 0.0 to 1e+06
    POINTGATHERENABLE: pymxs.runtime.Boolean  
    BUILDNORMALS: pymxs.runtime.Boolean  
    NORMALSCALE: pymxs.runtime.Float  
    MARKER: pymxs.runtime.Float  
    MARKERENABLE: pymxs.runtime.Boolean  
    OFFMESHHITTYPE: pymxs.runtime.Integer  
    OFFMESHHITZDEPTH: pymxs.runtime.Float  
    OFFMESHHITPOS: pymxs.runtime.Point3  
    DRAGSTRLIMITMIN: pymxs.runtime.Float  
    DRAGSTRLIMITMAX: pymxs.runtime.Float  
    def InitializeNodes(Flags: pymxs.runtime.Integer, NodeList: pymxs.runtime.NodeArray) -> None: ...
    def NumberNodes() -> pymxs.runtime.Integer: ...
    def GetNode(Index: pymxs.runtime.Integer) -> pymxs.runtime.Node: ...
    def UpdateMeshes(UpdatePointGather: pymxs.runtime.Boolean) -> None: ...
    def StartPaintSession() -> None: ...
    def EndPaintSession() -> None: ...
    def PaintOptions() -> None: ...
    def MacroCallback(MacroName: pymxs.runtime.String, Category: pymxs.runtime.String) -> None: ...
    def InPaintMode() -> pymxs.runtime.Boolean: ...
    def GetIsHit(TabIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetHitPointData(LocalHit: pymxs.runtime.Point3, LocalNormal: pymxs.runtime.Point3, WorldHit: pymxs.runtime.Point3, WorldNormal: pymxs.runtime.Point3, Radius: pymxs.runtime.Float, Str: pymxs.runtime.Float, TabIndex: pymxs.runtime.Integer) -> None:
        """
        localHit is In and Out parameter
        localNormal is In and Out parameter
        worldHit is In and Out parameter
        worldNormal is In and Out parameter
        radius is In and Out parameter
        str is In and Out parameter
        """
        ...
    def GetHitFaceData(Bary: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, Node: pymxs.runtime.Node, TabIndex: pymxs.runtime.Integer) -> None:
        """
        bary is In and Out parameter
        faceIndex is In and Out parameter
        """
        ...
    def GetHitPressureData(Shift: pymxs.runtime.Boolean, Ctrl: pymxs.runtime.Boolean, Alt: pymxs.runtime.Boolean, Pressure: pymxs.runtime.Float, TabIndex: pymxs.runtime.Integer) -> None:
        """
        shift is In and Out parameter
        ctrl is In and Out parameter
        alt is In and Out parameter
        pressure is In and Out parameter
        """
        ...
    def GetMirrorHitPointData(LocalMirrorHit: pymxs.runtime.Point3, LocalMirrorNormal: pymxs.runtime.Point3, WorldMirrorHit: pymxs.runtime.Point3, WorldMirrorNormal: pymxs.runtime.Point3, TabIndex: pymxs.runtime.Integer) -> None:
        """
        localMirrorHit is In and Out parameter
        localMirrorNormal is In and Out parameter
        worldMirrorHit is In and Out parameter
        worldMirrorNormal is In and Out parameter
        """
        ...
    def GetHitMousePos(TabIndex: pymxs.runtime.Integer, RemoveUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Point2: ...
    def GetHitTime(TabIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetHitDist(TabIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def GetHitVec(TabIndex: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def GetHitCount() -> pymxs.runtime.Integer: ...
    def LoadCustomPointGather(Node: pymxs.runtime.Node, PointList: pymxs.runtime.Point3Array) -> None: ...
    def GetPointGatherHits(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def GetPointGatherPoint(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def GetPointGatherStr(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def GetPointGatherWeight(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def GetPointGatherNormal(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def ClearStroke() -> None: ...
    def AddToStroke(Pos: pymxs.runtime.Point2, UpdatePointGather: pymxs.runtime.Boolean, UpdateViewPort: pymxs.runtime.Boolean, ApplyUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def GetRandomHitOnPoint(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetRandomHitAlongStroke(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetTestHit(Point: pymxs.runtime.Point2, ApplyUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    def GetCustomHitPointData(LocalHit: pymxs.runtime.Point3, LocalNormal: pymxs.runtime.Point3, WorldHit: pymxs.runtime.Point3, WorldNormal: pymxs.runtime.Point3, Str: pymxs.runtime.Float) -> None:
        """
        localHit is In and Out parameter
        localNormal is In and Out parameter
        worldHit is In and Out parameter
        worldNormal is In and Out parameter
        str is In and Out parameter
        """
        ...
    def GetCustomHitFaceData(Bary: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> None:
        """
        bary is In and Out parameter
        faceIndex is In and Out parameter
        """
        ...
    def IsPointInside(TestPoint: pymxs.runtime.Point2, PointList: pymxs.runtime.Point2Array) -> pymxs.runtime.Boolean: ...
    def GetMirrorCenter() -> pymxs.runtime.Point3: ...
    def ScriptFunctions(StartStroke: pymxs.runtime.Value, PaintStroke: pymxs.runtime.Value, EndStroke: pymxs.runtime.Value, CancelStroke: pymxs.runtime.Value, SystemEnd: pymxs.runtime.Value) -> None: ...
    def UndoStart() -> None: ...
    def UndoAccept() -> None: ...
    def UndoCancel() -> None: ...
    def GetHitNode(SampleIndex: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def SetSplineConstraintNode(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def IsSplineConstraintNodeValid() -> pymxs.runtime.Boolean: ...
    ...
class IScriptCtrl:
    THROWONERROR: pymxs.runtime.Boolean  
    def SetExpression(Expression: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetExpression() -> pymxs.runtime.String: ...
    def GetDescription() -> pymxs.runtime.String: ...
    def SetDescription(Description: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def NumVariables() -> pymxs.runtime.Integer: ...
    def AddConstant(Name: pymxs.runtime.String, Constant: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def AddTarget(Name: pymxs.runtime.String, Target: pymxs.runtime.Value, Offset: pymxs.runtime.Time, Owner: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def AddObject(Name: pymxs.runtime.String, Object: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def AddNode(Name: pymxs.runtime.String, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetConstant(Which: pymxs.runtime.Value, Constant: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SetTarget(Which: pymxs.runtime.Value, Target: pymxs.runtime.Value, Owner: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SetObject(Which: pymxs.runtime.Value, Object: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SetNode(Which: pymxs.runtime.Value, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def DeleteVariable(Which: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def RenameVariable(Which: pymxs.runtime.Value, Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetOffset(Which: pymxs.runtime.Value) -> pymxs.runtime.Time: ...
    def SetOffset(Which: pymxs.runtime.Value, Offset: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def VariableExists(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetConstant(Which: pymxs.runtime.Value) -> pymxs.runtime.Value: ...
    def GetTarget(Which: pymxs.runtime.Value, AsObject: pymxs.runtime.Boolean = False) -> pymxs.runtime.Value: ...
    def GetObject(Which: pymxs.runtime.Value) -> pymxs.runtime.MaxObject: ...
    def GetNode(Which: pymxs.runtime.Value) -> pymxs.runtime.Node: ...
    def GetValue(Which: pymxs.runtime.Value, AsObject: pymxs.runtime.Boolean = False) -> pymxs.runtime.Value: ...
    def GetVarValue(Which: pymxs.runtime.Value) -> pymxs.runtime.Value: ...
    def GetType(Which: pymxs.runtime.Value) -> pymxs.runtime.Enum:
        """
        GetType pymxs.runtime.Enums: {#unknown|#target|#constant|#object|#node
        """
        ...
    def GetName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetIndex(Name: pymxs.runtime.String) -> pymxs.runtime.Index: ...
    def Update() -> None: ...
    def PrintDetails() -> pymxs.runtime.String: ...
    ...
class BakeElementProperties:
    BACKGROUNDCOLOR: pymxs.runtime.Color  
    def NParams() -> pymxs.runtime.Integer: ...
    def ParamName(ParamIndex: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def ParamType(ParamIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetParamValue(ParamIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def SetParamValue(ParamIndex: pymxs.runtime.Integer, NewValue: pymxs.runtime.Integer) -> None: ...
    def GetParamFPValue(ParamIndex: pymxs.runtime.Integer) -> pymxs.runtime.Value: ...
    def SetParamFPValue(ParamIndex: pymxs.runtime.Integer, NewValue: pymxs.runtime.Value) -> None: ...
    def GetParamFPValueMin(ParamIndex: pymxs.runtime.Integer) -> pymxs.runtime.Value: ...
    def GetParamFPValueMax(ParamIndex: pymxs.runtime.Integer) -> pymxs.runtime.Value: ...
    def FindParam(ParamName: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    ...
class ActionList:
    def NumActions() -> pymxs.runtime.Integer: ...
    def GetAction(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def AppendAction(Action: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def InsertAction(Action: pymxs.runtime.Node, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def RemoveAction(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def HasAction(Action: pymxs.runtime.Node, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        Index is In and Out parameter
        """
        ...
    def IsAction(Action: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def IsOperator(Action: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def IsTest(Action: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def IsActivated() -> pymxs.runtime.Boolean: ...
    def Activate(Active: pymxs.runtime.Boolean) -> None: ...
    def IsActionActive(Index: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def ActivateAction(Index: pymxs.runtime.Index, Active: pymxs.runtime.Integer) -> None: ...
    def GetPViewLocation(X: pymxs.runtime.Integer, Y: pymxs.runtime.Integer) -> None:
        """
        x is In and Out parameter
        y is In and Out parameter
        """
        ...
    def SetPViewLocation(X: pymxs.runtime.Integer, Y: pymxs.runtime.Integer) -> None: ...
    def GetPViewZOrder() -> pymxs.runtime.Integer: ...
    def SetPViewZOrder(Z: pymxs.runtime.Integer) -> None: ...
    def GetListWidth() -> pymxs.runtime.Integer: ...
    def SetListWidth(Width: pymxs.runtime.Integer) -> None: ...
    def GetPViewRightBoundary() -> pymxs.runtime.Integer: ...
    def IsCollapsed() -> pymxs.runtime.Boolean: ...
    def Collapse() -> None: ...
    def Expand() -> None: ...
    def HasUpStream() -> pymxs.runtime.Boolean: ...
    ...
class MaterialHolder:
    def IsMaterialHolder() -> pymxs.runtime.Boolean: ...
    def InheritsMaterial() -> pymxs.runtime.Boolean: ...
    def GetMaterial() -> pymxs.runtime.Material: ...
    def SetMaterial(Material: pymxs.runtime.Material) -> pymxs.runtime.Boolean: ...
    def GetMaterialPriority() -> pymxs.runtime.Integer: ...
    def GetStreamDepth() -> pymxs.runtime.Integer: ...
    def UpdateMaterial(DoReport: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def UpdateMaterials(DoReport: pymxs.runtime.Boolean) -> pymxs.runtime.Integer: ...
    def UpdateMaterialsDownstream(DoReport: pymxs.runtime.Boolean) -> pymxs.runtime.Integer: ...
    ...
class WireController:
    @property
    def NUMWIRES() -> pymxs.runtime.Integer: ...
    @property
    def ISMASTER() -> pymxs.runtime.Boolean: ...
    @property
    def ISSLAVE() -> pymxs.runtime.Boolean: ...
    @property
    def ISTWOWAY() -> pymxs.runtime.Boolean: ...
    SLAVEANIMATION: pymxs.runtime.Control  
    def GetWireParent(Index: pymxs.runtime.Index) -> pymxs.runtime.MaxObject: ...
    def GetWireSubnum(Index: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetCoController(Index: pymxs.runtime.Index) -> pymxs.runtime.Control: ...
    def GetExprText(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def SetExprText(Index: pymxs.runtime.Index, Text: pymxs.runtime.String) -> None: ...
    ...
class Arrow:
    def SetTest(Action: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetActionList(ActionList: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetTest() -> pymxs.runtime.Node: ...
    def GetActionList() -> pymxs.runtime.Node: ...
    def Activate() -> pymxs.runtime.Boolean: ...
    def Deactivate() -> pymxs.runtime.Boolean: ...
    def IsActive() -> pymxs.runtime.Boolean: ...
    ...
class PBRImporter:
    def Open() -> pymxs.runtime.Boolean: ...
    def Close() -> pymxs.runtime.Boolean: ...
    def Import(Paths: pymxs.runtime.StringArray) -> pymxs.runtime.Boolean: ...
    def GetMaterials() -> pymxs.runtime.MaterialArray: ...
    ...
class List:
    @property
    def COUNT() -> pymxs.runtime.Integer: ...
    ACTIVE: pymxs.runtime.Index  
    def GetCount() -> pymxs.runtime.Integer: ...
    def SetActive(ListIndex: pymxs.runtime.Index) -> None: ...
    def GetActive() -> pymxs.runtime.Integer: ...
    def Delete(ListIndex: pymxs.runtime.Index) -> None: ...
    def Cut(ListIndex: pymxs.runtime.Index) -> None: ...
    def Paste(ListIndex: pymxs.runtime.Index) -> None: ...
    def GetName(ListIndex: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def SetName(ListIndex: pymxs.runtime.Index, Name: pymxs.runtime.String) -> None: ...
    def GetSubCtrl(Index: pymxs.runtime.Index) -> pymxs.runtime.Control: ...
    def GetSubCtrlWeight(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    ...
class SimpleManip:
    @property
    def MOUSESTATE() -> pymxs.runtime.Enum: ...
    def ClearGizmos() -> None: ...
    def AddGizmoMesh(Mesh: pymxs.runtime.Mesh, Flags: pymxs.runtime.Integer, UnselColor: pymxs.runtime.Point3, SelColor: pymxs.runtime.Point3, ApplyUIScaling: pymxs.runtime.Boolean = True, GizmoSize: pymxs.runtime.Integer = 20) -> None: ...
    def AddGizmoShape(Gizmo: pymxs.runtime.Interface, Flags: pymxs.runtime.Integer, UnselColor: pymxs.runtime.Point3, SelColor: pymxs.runtime.Point3, ApplyUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def AddGizmoMarker(Marker: pymxs.runtime.Enum, Position: pymxs.runtime.Point3, Flags: pymxs.runtime.Integer, UnselColor: pymxs.runtime.Point3, SelColor: pymxs.runtime.Point3, ApplyUIScaling: pymxs.runtime.Boolean = True) -> None:
        """
        marker pymxs.runtime.Enums: {#point|#hollowBox|#plusSign|#asterisk|#xMarker|#bigBox|#circle|#triangle|#diamond|#smallHollowBox|#smallCircle|#smallTriangle|#smallDiamond|#box2|#box3|#box4|#box5|#box6|#box7|#dot|#smallDot|#dot2|#dot3|#dot4|#dot5|#dot6|#dot7}
        """
        ...
    def AddGizmoText(Text: pymxs.runtime.String, Position: pymxs.runtime.Point3, Flags: pymxs.runtime.Integer, UnselColor: pymxs.runtime.Point3, SelColor: pymxs.runtime.Point3, ApplyUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def GetLocalViewRay(M: pymxs.runtime.Point2, ApplyUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Ray: ...
    def UpdateGizmos(T: pymxs.runtime.Time, ToolTip: pymxs.runtime.String) -> None:
        """
        toolTip is In and Out parameter
        """
        ...
    ...
class Layer:
    @property
    def COUNT() -> pymxs.runtime.Integer: ...
    ACTIVE: pymxs.runtime.Index  
    def GetCount() -> pymxs.runtime.Integer: ...
    def SetLayerActive(ListIndex: pymxs.runtime.Index) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def GetLayerActive() -> pymxs.runtime.Index: ...
    def CopyLayer(ListIndex: pymxs.runtime.Index) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def PasteLayer(ListIndex: pymxs.runtime.Index) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def DeleteLayer(ListIndex: pymxs.runtime.Index) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def GetLayerName(ListIndex: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        listIndex Validated by Validator function
        """
        ...
    def SetLayerName(ListIndex: pymxs.runtime.Index, Name: pymxs.runtime.String) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def GetSubCtrl(Index: pymxs.runtime.Index) -> pymxs.runtime.Control:
        """
        Index Validated by Validator function
        """
        ...
    def GetLayerWeight(Index: pymxs.runtime.Index, AtTime: pymxs.runtime.Time) -> pymxs.runtime.Float:
        """
        Index Validated by Validator function
        """
        ...
    def SetLayerWeight(ListIndex: pymxs.runtime.Index, AtTime: pymxs.runtime.Time, Weight: pymxs.runtime.Float) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def GetLayerMute(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        Index Validated by Validator function
        """
        ...
    def SetLayerMute(ListIndex: pymxs.runtime.Index, Mute: pymxs.runtime.Boolean) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def CollapseLayer(ListIndex: pymxs.runtime.Index) -> None:
        """
        listIndex Validated by Validator function
        """
        ...
    def DisableLayer() -> None: ...
    ...
class Unwrap7:
    def GetFilterMap() -> pymxs.runtime.Boolean: ...
    def SetFilterMap(Filter: pymxs.runtime.Boolean) -> None: ...
    ...
class Unwrap6:
    MIRRORGEOMSELECTION: pymxs.runtime.Boolean  
    MIRRORSELECTIONAXIS: pymxs.runtime.Enum  # axisX, axisY, axisZ - rt.Name("")
    MIRRORSELECTIONTHRESHOLD: pymxs.runtime.Float  
    SELECTIONPREVIEW: pymxs.runtime.Boolean  
    PAINTMOVEBRUSH: pymxs.runtime.Boolean  
    RELAXMOVEBRUSH: pymxs.runtime.Boolean  
    PAINTFULLSTRENGTH: pymxs.runtime.Float  
    PAINTFALLOFF: pymxs.runtime.Float  
    PAINTFALLOFFTYPE: pymxs.runtime.Enum  # linear, smooth, slow, fast - rt.Name("")
    TYPEINLINKUV: pymxs.runtime.Boolean  
    @property
    def EDITORHWND() -> pymxs.runtime.HWND: ...
    @property
    def EDITORVIEWHWND() -> pymxs.runtime.HWND: ...
    SHOWTILEGRIDLINES: pymxs.runtime.Boolean  
    DISPLAYPIXELUNITS: pymxs.runtime.Boolean  
    def GetVertexPositionByNode(Time: pymxs.runtime.Time, Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3: ...
    def NumberVerticesByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetSelectedPolygonsByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SelectPolygonsByNode(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def IsPolygonSelectedByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def NumberPolygonsByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def MarkAsDeadByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> None: ...
    def NumberPointsInFaceByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetVertexIndexFromFaceByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetHandleIndexFromFaceByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetVertexGeomIndexFromFaceByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetHandleGeomIndexFromFaceByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetInteriorGeomIndexFromFaceByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SetFaceVertexByNode(Pos: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Sel: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def SetFaceHandleByNode(Pos: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Sel: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def SetFaceInteriorByNode(Pos: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Sel: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def SetFaceVertexIndexByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, VertexIndex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> None: ...
    def SetFaceHandleIndexByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, VertexIndex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> None: ...
    def SetFaceInteriorIndexByNode(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, VertexIndex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> None: ...
    def GetAreaByNode(FaceSelection: pymxs.runtime.BitArray, AreaUVW: pymxs.runtime.Float, AreaGeom: pymxs.runtime.Float, Node: pymxs.runtime.Node) -> None:
        """
        areaUVW is Out parameter
        areaGeom is Out parameter
        """
        ...
    def GetBoundsByNode(FaceSelection: pymxs.runtime.BitArray, X: pymxs.runtime.Float, Y: pymxs.runtime.Float, Width: pymxs.runtime.Float, Height: pymxs.runtime.Float, Node: pymxs.runtime.Node) -> None:
        """
        x is Out parameter
        y is Out parameter
        width is Out parameter
        height is Out parameter
        """
        ...
    def GetPeltSelectedSeamsByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SetPeltSelectedSeamsByNode(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def SelectPolygonsUpdateByNode(Selection: pymxs.runtime.BitArray, Update: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def SketchByNode(IndexList: pymxs.runtime.IntegerArray, PositionList: pymxs.runtime.Point3Array, Node: pymxs.runtime.Node) -> None: ...
    def GetNormalByNode(FaceIndex: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3: ...
    def SetVertexPositionByNode(Time: pymxs.runtime.Time, Index: pymxs.runtime.Integer, Pos: pymxs.runtime.Point3, Node: pymxs.runtime.Node) -> None: ...
    def SetVertexPosition(Time: pymxs.runtime.Time, Index: pymxs.runtime.Integer, Pos: pymxs.runtime.Point3, Hold: pymxs.runtime.Boolean, Update: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def GetVertexWeightByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Float: ...
    def SetVertexWeightByNode(Index: pymxs.runtime.Integer, Weight: pymxs.runtime.Float, Node: pymxs.runtime.Node) -> None: ...
    def IsWeightModifiedByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def ModifyWeightByNode(Index: pymxs.runtime.Integer, Modify: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def GetSelectedVerticesByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SelectVerticesByNode(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def IsVertexSelectedByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetSelectedFacesByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SelectFacesByNode(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def IsFaceSelectedByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetSelectedEdgesByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SelectEdgesByNode(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def IsEdgeSelectedByNode(Index: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetSelectedGeomVertsByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SetSelectedGeomVertsByNode(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def GetSelectedGeomEdgesByNode(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SetSelectedGeomEdgesByNode(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def GetSG() -> pymxs.runtime.Integer: ...
    def SetSG(SgID: pymxs.runtime.Integer) -> None: ...
    def GetSelectMatID() -> pymxs.runtime.Integer: ...
    def SetSelectMatID(MatID: pymxs.runtime.Integer) -> None: ...
    def SplineMap() -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, Sel: pymxs.runtime.Boolean) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index, Sel: pymxs.runtime.Boolean) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SplineMap() -> pymxs.runtime.Integer: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index) -> pymxs.runtime.Quat: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index, Pos: pymxs.runtime.Point3) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index, ScaleX: pymxs.runtime.Float) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index, ScaleY: pymxs.runtime.Float) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index, Twist: pymxs.runtime.Float) -> None: ...
    def SplineMap(FitAll: pymxs.runtime.Boolean, ExtraScale: pymxs.runtime.Float) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index, Vec: pymxs.runtime.Point3) -> None: ...
    def SplineMap(Vec: pymxs.runtime.Point3) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, CrossSectionIndex: pymxs.runtime.Index) -> None: ...
    def SplineMap(U: pymxs.runtime.Float) -> None: ...
    def SplineMap(Twist: pymxs.runtime.Float) -> None: ...
    def SplineMap(Scale: pymxs.runtime.Point2) -> None: ...
    def SplineMap(SplineIndex: pymxs.runtime.Index, U: pymxs.runtime.Float) -> None: ...
    def SplineMap(Samples: pymxs.runtime.Integer) -> None: ...
    def GetTweakMode() -> pymxs.runtime.Boolean: ...
    def SetTweakMode(On: pymxs.runtime.Boolean) -> None: ...
    def UvLoop(Mode: pymxs.runtime.Integer) -> None: ...
    def UvRing(Mode: pymxs.runtime.Integer) -> None: ...
    def Align(Horizontal: pymxs.runtime.Boolean) -> None: ...
    def Space(Horizontal: pymxs.runtime.Boolean) -> None: ...
    def RegularMapStart(Node: pymxs.runtime.Node, ShowUI: pymxs.runtime.Boolean) -> None: ...
    def RegularMapReset() -> None: ...
    def RegularMapAdvanceUV(UPos: pymxs.runtime.Boolean, VPos: pymxs.runtime.Boolean, UNeg: pymxs.runtime.Boolean, VNeg: pymxs.runtime.Boolean, SingleStep: pymxs.runtime.Boolean) -> None: ...
    def RegularMapAdvanceSelected(SingleStep: pymxs.runtime.Boolean) -> None: ...
    def RegularMapEnd() -> None: ...
    def RegularMapGetAutoWeld() -> pymxs.runtime.Boolean: ...
    def RegularMapSetAutoWeld(Enable: pymxs.runtime.Boolean) -> None: ...
    def RegularMapGetLimit() -> pymxs.runtime.Integer: ...
    def RegularMapSetLimit(Limit: pymxs.runtime.Integer) -> None: ...
    def RegularMapGetAutoWeldThreshold() -> pymxs.runtime.Float: ...
    def RegularMapSetAutoWeldThreshold(Threshold: pymxs.runtime.Float) -> None: ...
    def RegularMapGetIconSize() -> pymxs.runtime.Float: ...
    def RegularMapSetIconSize(Size: pymxs.runtime.Float) -> None: ...
    def RegularMapGetAutoFit() -> pymxs.runtime.Integer: ...
    def RegularMapSetAutoFit(Autofit: pymxs.runtime.Integer) -> None: ...
    def RegularMapGetSingleStep() -> pymxs.runtime.Boolean: ...
    def RegularMapSetSingleStep(Enable: pymxs.runtime.Boolean) -> None: ...
    def RegularMapGetNormalize() -> pymxs.runtime.Boolean: ...
    def RegularMapSetNormalize(Enable: pymxs.runtime.Boolean) -> None: ...
    def RegularMapResetFaces() -> None: ...
    def RegularMapStartNewCluster(Node: pymxs.runtime.Node, Index: pymxs.runtime.Index) -> None: ...
    def RegularMapExpand(ExpandBy: pymxs.runtime.Enum) -> None:
        """
        expandBy pymxs.runtime.Enums: {#smgrp|#planar|#edgeSel|#faceSel|#outerBorder|#innerBorder|#ring|#peltseams|#loop}
        """
        ...
    def IsPinned(Index: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def Pin(Index: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def Unpin(Index: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def PinSelected(Node: pymxs.runtime.Node) -> None: ...
    def UnpinSelected(Node: pymxs.runtime.Node) -> None: ...
    def LSCMInteractive(UseExistingMapping: pymxs.runtime.Boolean) -> None: ...
    def LSCMSolve() -> None: ...
    def LSCMReset() -> None: ...
    def RescaleCluster(Facesel: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def GetPackRescaleCluster() -> pymxs.runtime.Boolean: ...
    def SetPackRescaleCluster(Rescale: pymxs.runtime.Boolean) -> None: ...
    def ShowToolBar(Visible: pymxs.runtime.Boolean) -> None: ...
    def WeldAllShared() -> None: ...
    def WeldSelectedShared() -> None: ...
    def RelaxOneClick() -> None: ...
    def GroupCreate(Name: pymxs.runtime.String) -> None: ...
    def GroupDelete(Name: pymxs.runtime.String) -> None: ...
    def GroupRename(Name: pymxs.runtime.String, NewName: pymxs.runtime.String) -> None: ...
    def GroupSelect(Name: pymxs.runtime.String) -> None: ...
    def GroupCreateBySelection() -> None: ...
    def GroupDeleteBySelection() -> None: ...
    def GroupSelectBySelection() -> None: ...
    def GroupGetTexelDensity() -> pymxs.runtime.Float: ...
    def GroupSetTexelDensity(Value: pymxs.runtime.Float) -> pymxs.runtime.Float: ...
    def AddToolBar(Owner: pymxs.runtime.Integer, Name: pymxs.runtime.String, Pos: pymxs.runtime.Integer, X: pymxs.runtime.Integer, Y: pymxs.runtime.Integer, Width: pymxs.runtime.Integer, Popup: pymxs.runtime.Boolean) -> None: ...
    def Straighten() -> None: ...
    def FlattenBySmoothingGroup(Rescale: pymxs.runtime.Boolean, Rotate: pymxs.runtime.Boolean, Padding: pymxs.runtime.Float) -> None: ...
    def FlattenByMaterialID(Rescale: pymxs.runtime.Boolean, Rotate: pymxs.runtime.Boolean, Padding: pymxs.runtime.Float) -> None: ...
    def AlignByPivotHorizontal() -> None: ...
    def AlignByPivotVertical() -> None: ...
    def Paintview() -> None: ...
    def CloseEditor() -> None: ...
    def CloseOptions() -> None: ...
    def RelaxThreaded(ThreadOp: pymxs.runtime.Enum) -> None:
        """
        threadOp pymxs.runtime.Enums: {#start|#restart|#stop}
        """
        ...
    ...
class Unwrap:
    def PlanarMap() -> None: ...
    def Save() -> None: ...
    def Load() -> None: ...
    def Reset() -> None: ...
    def Edit() -> None: ...
    def SetMapChannel(MapChannel: pymxs.runtime.Integer) -> None: ...
    def GetMapChannel() -> pymxs.runtime.Integer: ...
    def SetProjectionType(MapChannel: pymxs.runtime.Integer) -> None: ...
    def GetProjectionType() -> pymxs.runtime.Integer: ...
    def SetVC(VertexColor: pymxs.runtime.Boolean) -> None: ...
    def GetVC() -> pymxs.runtime.Boolean: ...
    def Move() -> None: ...
    def Moveh() -> None: ...
    def Movev() -> None: ...
    def Rotate() -> None: ...
    def Scale() -> None: ...
    def Scaleh() -> None: ...
    def Scalev() -> None: ...
    def MirrorH() -> None: ...
    def MirrorV() -> None: ...
    def ExpandSelection() -> None: ...
    def ContractSelection() -> None: ...
    def SetFalloffType(FalloffType: pymxs.runtime.Integer) -> None: ...
    def GetFalloffType() -> pymxs.runtime.Integer: ...
    def SetFalloffSpace(FalloffSpace: pymxs.runtime.Integer) -> None: ...
    def GetFalloffSpace() -> pymxs.runtime.Integer: ...
    def SetFalloffDist(FalloffDist: pymxs.runtime.Float) -> None: ...
    def GetFalloffDist() -> pymxs.runtime.Float: ...
    def BreakSelected() -> None: ...
    def Weld() -> None: ...
    def WeldSelected() -> None: ...
    def UpdateMap() -> None: ...
    def DisplayMap(DisplayMap: pymxs.runtime.Boolean) -> None: ...
    def IsMapDisplayed() -> pymxs.runtime.Boolean: ...
    def SetUVSpace(UVSpace: pymxs.runtime.Integer) -> None: ...
    def GetUVSpace() -> pymxs.runtime.Integer: ...
    def Options() -> None: ...
    def Lock() -> None: ...
    def Hide() -> None: ...
    def Unhide() -> None: ...
    def Freeze() -> None: ...
    def Unfreeze() -> None: ...
    def Filterselected() -> None: ...
    def Pan() -> None: ...
    def Zoom() -> None: ...
    def ZoomRegion() -> None: ...
    def Fit() -> None: ...
    def Fitselected() -> None: ...
    def SnapToggle() -> None: ...
    def GetCurrentMap() -> pymxs.runtime.Integer: ...
    def SetCurrentMap(Map: pymxs.runtime.Integer) -> None: ...
    def NumberMaps() -> pymxs.runtime.Integer: ...
    def GetLineColor() -> pymxs.runtime.Point3: ...
    def SetLineColor(Color: pymxs.runtime.Point3) -> None: ...
    def GetSelectionColor() -> pymxs.runtime.Point3: ...
    def SetSelectionColor(Color: pymxs.runtime.Point3) -> None: ...
    def GetRenderWidth() -> pymxs.runtime.Integer: ...
    def SetRenderWidth(Width: pymxs.runtime.Integer) -> None: ...
    def GetRenderHeight() -> pymxs.runtime.Integer: ...
    def SetRenderHeight(Height: pymxs.runtime.Integer) -> None: ...
    def GetUseBitmapRes() -> pymxs.runtime.Boolean: ...
    def SetUseBitmapRes(UseRes: pymxs.runtime.Boolean) -> None: ...
    def GetWeldThreshold() -> pymxs.runtime.Float: ...
    def SetWeldThreshold(Height: pymxs.runtime.Float) -> None: ...
    def GetConstantUpdate() -> pymxs.runtime.Boolean: ...
    def SetConstantUpdate(Update: pymxs.runtime.Boolean) -> None: ...
    def GetShowSelectedVertices() -> pymxs.runtime.Boolean: ...
    def SetShowSelectedVertices(Show: pymxs.runtime.Boolean) -> None: ...
    def GetMidPixelSnap() -> pymxs.runtime.Boolean: ...
    def SetMidPixelSnap(Snap: pymxs.runtime.Boolean) -> None: ...
    def GetMatID() -> pymxs.runtime.Integer: ...
    def SetMatID(Matid: pymxs.runtime.Integer) -> None: ...
    def NumberMatIDs() -> pymxs.runtime.Integer: ...
    def GetSelectedVertices() -> pymxs.runtime.BitArray: ...
    def SelectVertices(Selection: pymxs.runtime.BitArray) -> None: ...
    def IsVertexSelected(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def MoveSelectedVertices(Offset: pymxs.runtime.Point3) -> None: ...
    def RotateSelectedVerticesCenter(Angle: pymxs.runtime.Float) -> None: ...
    def RotateSelectedVertices(Angle: pymxs.runtime.Float, Axis: pymxs.runtime.Point3) -> None: ...
    def ScaleSelectedVerticesCenter(Scale: pymxs.runtime.Float, Dir: pymxs.runtime.Integer) -> None: ...
    def ScaleSelectedVertices(Scale: pymxs.runtime.Float, Dir: pymxs.runtime.Integer, Axis: pymxs.runtime.Point3) -> None: ...
    def GetVertexPosition(Time: pymxs.runtime.Time, Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def NumberVertices() -> pymxs.runtime.Integer: ...
    def MoveX(P: pymxs.runtime.Float) -> None: ...
    def MoveY(P: pymxs.runtime.Float) -> None: ...
    def MoveZ(P: pymxs.runtime.Float) -> None: ...
    def GetSelectedPolygons() -> pymxs.runtime.BitArray: ...
    def SelectPolygons(Selection: pymxs.runtime.BitArray) -> None: ...
    def IsPolygonSelected(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def NumberPolygons() -> pymxs.runtime.Integer: ...
    def DetachEdgeVertices() -> None: ...
    def FlipHorizontal() -> None: ...
    def FlipVertical() -> None: ...
    def GetLockAspect() -> pymxs.runtime.Boolean: ...
    def SetLockAspect(Aspect: pymxs.runtime.Boolean) -> None: ...
    def GetMapScale() -> pymxs.runtime.Float: ...
    def SetMapScale(Scale: pymxs.runtime.Float) -> None: ...
    def GetSelectionFromFace() -> None: ...
    def ForceUpdate(Update: pymxs.runtime.Boolean) -> None: ...
    def ZoomToGizmo(All: pymxs.runtime.Boolean) -> None: ...
    def SetVertexPosition(Time: pymxs.runtime.Time, Index: pymxs.runtime.Integer, Pos: pymxs.runtime.Point3) -> None: ...
    def MarkAsDead(Index: pymxs.runtime.Integer) -> None: ...
    def NumberPointsInFace(Index: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetVertexIndexFromFace(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetHandleIndexFromFace(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetInteriorIndexFromFace(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetVertexGeomIndexFromFace(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetHandleGeomIndexFromFace(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetInteriorGeomIndexFromFace(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def SetFaceVertex(Pos: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Sel: pymxs.runtime.Boolean) -> None: ...
    def SetFaceHandle(Pos: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Sel: pymxs.runtime.Boolean) -> None: ...
    def SetFaceInterior(Pos: pymxs.runtime.Point3, FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, Sel: pymxs.runtime.Boolean) -> None: ...
    def SetFaceVertexIndex(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, VertexIndex: pymxs.runtime.Integer) -> None: ...
    def SetFaceHandleIndex(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, VertexIndex: pymxs.runtime.Integer) -> None: ...
    def SetFaceInteriorIndex(FaceIndex: pymxs.runtime.Integer, IthVertex: pymxs.runtime.Integer, VertexIndex: pymxs.runtime.Integer) -> None: ...
    def UpdateView() -> None: ...
    def GetFaceSelectionFromStack() -> None: ...
    ...
class Unwrap2:
    def SelectPolygonsUpdate(Selection: pymxs.runtime.BitArray, Update: pymxs.runtime.Boolean) -> None: ...
    def SelectFacesByNormal(Normal: pymxs.runtime.Point3, Threshold: pymxs.runtime.Float, Update: pymxs.runtime.Boolean) -> None: ...
    def SelectClusterByNormal(Threshold: pymxs.runtime.Float, FaceIndexSeed: pymxs.runtime.Integer, Relative: pymxs.runtime.Boolean, Update: pymxs.runtime.Boolean) -> None: ...
    def FlattenMap(AngleThreshold: pymxs.runtime.Float, NormalList: pymxs.runtime.Point3Array, Spacing: pymxs.runtime.Float, Normalize: pymxs.runtime.Boolean, LayOutType: pymxs.runtime.Integer, RotateClusters: pymxs.runtime.Boolean, FillHoles: pymxs.runtime.Boolean) -> None: ...
    def NormalMap(NormalList: pymxs.runtime.Point3Array, Spacing: pymxs.runtime.Float, Normalize: pymxs.runtime.Boolean, LayOutType: pymxs.runtime.Integer, RotateClusters: pymxs.runtime.Boolean, AlignWidth: pymxs.runtime.Boolean) -> None: ...
    def NormalMapNoParams() -> None: ...
    def NormalMapDialog() -> None: ...
    def UnfoldMap(UnfoldMethod: pymxs.runtime.Integer, Normalized: pymxs.runtime.Boolean) -> None: ...
    def UnfoldMapNoParams() -> None: ...
    def UnfoldMapDialog() -> None: ...
    def GetNormal(FaceIndex: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def SetSeedFace() -> None: ...
    def ToggleVertexConnection() -> None: ...
    def Copy() -> None: ...
    def Paste(Rotate: pymxs.runtime.Boolean) -> None: ...
    def PasteInstance() -> None: ...
    def SetDebugLevel(Level: pymxs.runtime.Integer) -> None: ...
    def StitchVerts(Align: pymxs.runtime.Boolean, Bias: pymxs.runtime.Float) -> None: ...
    def StitchVertsNoParams() -> None: ...
    def StitchVertsDialog() -> None: ...
    def SelectElement() -> None: ...
    def FlattenMapDialog() -> None: ...
    def FlattenMapNoParams() -> None: ...
    def GetTileMap() -> pymxs.runtime.Boolean: ...
    def SetTileMap(Tile: pymxs.runtime.Boolean) -> None: ...
    def GetTileMapLimit() -> pymxs.runtime.Integer: ...
    def SetTileMapLimit(Limit: pymxs.runtime.Integer) -> None: ...
    def GetTileMapBrightness() -> pymxs.runtime.Float: ...
    def SetTileMapBrightness(Contrast: pymxs.runtime.Float) -> None: ...
    def GetShowMap() -> pymxs.runtime.Boolean: ...
    def SetShowMap(ShowMap: pymxs.runtime.Boolean) -> None: ...
    def GetLimitSoftSel() -> pymxs.runtime.Boolean: ...
    def SetLimitSoftSel(Limit: pymxs.runtime.Boolean) -> None: ...
    def GetLimitSoftSelRange() -> pymxs.runtime.Integer: ...
    def SetLimitSoftSelRange(Range: pymxs.runtime.Integer) -> None: ...
    def GetVertexWeight(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetVertexWeight(Index: pymxs.runtime.Integer, Weight: pymxs.runtime.Float) -> None: ...
    def IsWeightModified(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def ModifyWeight(Index: pymxs.runtime.Integer, Modify: pymxs.runtime.Boolean) -> None: ...
    def GetGeomSelectElementMode() -> pymxs.runtime.Boolean: ...
    def SetGeomSelectElementMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def GetGeomPlanarThresholdMode() -> pymxs.runtime.Boolean: ...
    def SetGeomPlanarThresholdMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def GetGeomPlanarThreshold() -> pymxs.runtime.Float: ...
    def SetGeomPlanarThreshold(Angle: pymxs.runtime.Float) -> None: ...
    def GetWindowX(ApplyUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Integer: ...
    def GetWindowY(ApplyUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Integer: ...
    def GetWindowW(ApplyUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Integer: ...
    def GetWindowH(ApplyUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Integer: ...
    def GetIgnoreBackFaceCull() -> pymxs.runtime.Boolean: ...
    def SetIgnoreBackFaceCull(IgnoreBackFaceCull: pymxs.runtime.Boolean) -> None: ...
    def GetOldSelMethod() -> pymxs.runtime.Boolean: ...
    def SetOldSelMethod(OldSelMethod: pymxs.runtime.Boolean) -> None: ...
    def SetSelectionMatID(MatID: pymxs.runtime.Integer) -> None: ...
    def SelectByMatID(MatID: pymxs.runtime.Integer) -> None: ...
    def SelectBySG(Sg: pymxs.runtime.Integer) -> None: ...
    def GetTVElementMode() -> pymxs.runtime.Boolean: ...
    def SetTVElementMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def ExpandGeomFaceSelection() -> None: ...
    def ContractGeomFaceSelection() -> None: ...
    def GetAlwaysEdit() -> pymxs.runtime.Boolean: ...
    def SetAlwaysEdit(Always: pymxs.runtime.Boolean) -> None: ...
    def GetShowVertexConnections() -> pymxs.runtime.Boolean: ...
    def SetShowVertexConnections(Show: pymxs.runtime.Boolean) -> None: ...
    def GetFilterSelected() -> pymxs.runtime.Boolean: ...
    def SetFilterSelected(Filter: pymxs.runtime.Boolean) -> None: ...
    def GetPixelSnap() -> pymxs.runtime.Boolean: ...
    def SetPixelSnap(PixelSnap: pymxs.runtime.Boolean) -> None: ...
    def GetLock() -> pymxs.runtime.Boolean: ...
    def SetLock(Lock: pymxs.runtime.Boolean) -> None: ...
    def Pack(Method: pymxs.runtime.Integer, Spacing: pymxs.runtime.Float, Normalize: pymxs.runtime.Boolean, Rotate: pymxs.runtime.Boolean, Fillholes: pymxs.runtime.Boolean) -> None: ...
    def PackNoParams() -> None: ...
    def PackDialog() -> None: ...
    def GetTVSubObjectMode() -> pymxs.runtime.Integer: ...
    def SetTVSubObjectMode(Mode: pymxs.runtime.Integer) -> None: ...
    def GetSelectedFaces() -> pymxs.runtime.BitArray: ...
    def SelectFaces(Selection: pymxs.runtime.BitArray) -> None: ...
    def IsFaceSelected(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetFillMode() -> pymxs.runtime.Integer: ...
    def SetFillMode(Mode: pymxs.runtime.Integer) -> None: ...
    def MoveSelected(Offset: pymxs.runtime.Point3) -> None: ...
    def RotateSelectedCenter(Angle: pymxs.runtime.Float) -> None: ...
    def RotateSelected(Angle: pymxs.runtime.Float, Axis: pymxs.runtime.Point3) -> None: ...
    def ScaleSelectedCenter(Scale: pymxs.runtime.Float, Dir: pymxs.runtime.Integer) -> None: ...
    def ScaleSelected(Scale: pymxs.runtime.Float, Dir: pymxs.runtime.Integer, Axis: pymxs.runtime.Point3) -> None: ...
    def GetSelectedEdges() -> pymxs.runtime.BitArray: ...
    def SelectEdges(Selection: pymxs.runtime.BitArray) -> None: ...
    def IsEdgeSelected(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetDisplayOpenEdges() -> pymxs.runtime.Boolean: ...
    def SetDisplayOpenEdges(DisplayOpenEdges: pymxs.runtime.Boolean) -> None: ...
    def GetOpenEdgeColor() -> pymxs.runtime.Point3: ...
    def SetOpenEdgeColor(Color: pymxs.runtime.Point3) -> None: ...
    def GetUVEdgeMode() -> pymxs.runtime.Boolean: ...
    def SetUVEdgeMode(UvEdgeMode: pymxs.runtime.Boolean) -> None: ...
    def GetOpenEdgeMode() -> pymxs.runtime.Boolean: ...
    def SetOpenEdgeMode(UvOpenMode: pymxs.runtime.Boolean) -> None: ...
    def UvEdgeSelect() -> None: ...
    def OpenEdgeSelect() -> None: ...
    def VertToEdgeSelect(PartialSelect: pymxs.runtime.Boolean = False) -> None: ...
    def VertToFaceSelect(PartialSelect: pymxs.runtime.Boolean = False) -> None: ...
    def EdgeToVertSelect() -> None: ...
    def EdgeToFaceSelect(PartialSelect: pymxs.runtime.Boolean = False) -> None: ...
    def FaceToVertSelect() -> None: ...
    def FaceToEdgeSelect() -> None: ...
    def GetDisplayHiddenEdges() -> pymxs.runtime.Boolean: ...
    def SetDisplayHiddenEdges(DisplayHiddenEdges: pymxs.runtime.Boolean) -> None: ...
    def GetHandleColor() -> pymxs.runtime.Point3: ...
    def SetHandleColor(Color: pymxs.runtime.Point3) -> None: ...
    def GetFreeFormMode() -> pymxs.runtime.Boolean: ...
    def SetFreeFormMode(FreeFormMode: pymxs.runtime.Boolean) -> None: ...
    def GetFreeFormColor() -> pymxs.runtime.Point3: ...
    def SetFreeFormColor(Color: pymxs.runtime.Point3) -> None: ...
    def ScaleSelectedXY(ScaleX: pymxs.runtime.Float, ScaleY: pymxs.runtime.Float, Axis: pymxs.runtime.Point3) -> None: ...
    def SnapPivot(Pos: pymxs.runtime.Integer) -> None: ...
    def GetPivotOffset() -> pymxs.runtime.Point3: ...
    def SetPivotOffset(Offset: pymxs.runtime.Point3) -> None: ...
    def GetSelCenter() -> pymxs.runtime.Point3: ...
    def Sketch(IndexList: pymxs.runtime.IntegerArray, PositionList: pymxs.runtime.Point3Array) -> None: ...
    def SketchNoParams() -> None: ...
    def SketchDialog() -> None: ...
    def SketchReverse() -> None: ...
    def GetHitSize(RemoveUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Integer: ...
    def SetHitSize(Size: pymxs.runtime.Integer, ApplyUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def GetResetPivotOnSelection() -> pymxs.runtime.Boolean: ...
    def SetResetPivotOnSelection(Reset: pymxs.runtime.Boolean) -> None: ...
    def GetPolygonMode() -> pymxs.runtime.Boolean: ...
    def SetPolygonMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def PolygonSelect() -> None: ...
    def GetAllowSelectionInsideGizmo() -> pymxs.runtime.Boolean: ...
    def SetAllowSelectionInsideGizmo(Select: pymxs.runtime.Boolean) -> None: ...
    def SaveCurrentSettingsAsDefault() -> None: ...
    def LoadDefault() -> None: ...
    def GetShowShared() -> pymxs.runtime.Boolean: ...
    def SetShowShared(Select: pymxs.runtime.Boolean) -> None: ...
    def GetSharedColor() -> pymxs.runtime.Point3: ...
    def SetSharedColor(Color: pymxs.runtime.Point3) -> None: ...
    def GetBackgroundColor() -> pymxs.runtime.Point3: ...
    def SetBackgroundColor(Color: pymxs.runtime.Point3) -> None: ...
    def UpdateMenuBar() -> None: ...
    def GetBrightnessAffectsCenterTile() -> pymxs.runtime.Boolean: ...
    def SetBrightnessAffectsCenterTile(Bright: pymxs.runtime.Boolean) -> None: ...
    def GetBlendTileToBackground() -> pymxs.runtime.Boolean: ...
    def SetBlendTileToBackground(Blend: pymxs.runtime.Boolean) -> None: ...
    def GetPaintSelectMode() -> pymxs.runtime.Boolean: ...
    def SetPaintSelectMode(Paint: pymxs.runtime.Boolean) -> None: ...
    def GetPaintSelectSize(RemoveUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Integer: ...
    def SetPaintSelectSize(Size: pymxs.runtime.Integer, ApplyUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def PaintSelectIncSize() -> None: ...
    def PaintSelectDecSize() -> None: ...
    def GetTickSize(RemoveUIScaling: pymxs.runtime.Boolean = True) -> pymxs.runtime.Integer: ...
    def SetTickSize(Size: pymxs.runtime.Integer, ApplyUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def GetGridSize() -> pymxs.runtime.Float: ...
    def SetGridSize(Size: pymxs.runtime.Float) -> None: ...
    def GetSnapToggle() -> pymxs.runtime.Boolean: ...
    def SetSnapToggle(SnapToggle: pymxs.runtime.Boolean) -> None: ...
    def GetGridVisible() -> pymxs.runtime.Boolean: ...
    def SetGridVisible(Visible: pymxs.runtime.Boolean) -> None: ...
    def GetGridColor() -> pymxs.runtime.Point3: ...
    def SetGridColor(Color: pymxs.runtime.Point3) -> None: ...
    def GetSnapStrength() -> pymxs.runtime.Float: ...
    def SetSnapStrength(SnapStrength: pymxs.runtime.Float) -> None: ...
    def GetAutoBackground() -> pymxs.runtime.Boolean: ...
    def SetAutoBackground(Enable: pymxs.runtime.Boolean) -> None: ...
    def GetFlattenAngle() -> pymxs.runtime.Float: ...
    def SetFlattenAngle(Angle: pymxs.runtime.Float) -> None: ...
    def GetFlattenSpacing() -> pymxs.runtime.Float: ...
    def SetFlattenSpacing(Spacing: pymxs.runtime.Float) -> None: ...
    def GetFlattenNormalize() -> pymxs.runtime.Boolean: ...
    def SetFlattenNormalize(Normalize: pymxs.runtime.Boolean) -> None: ...
    def GetFlattenRotate() -> pymxs.runtime.Boolean: ...
    def SetFlattenRotate(Rotate: pymxs.runtime.Boolean) -> None: ...
    def GetFlattenFillHoles() -> pymxs.runtime.Boolean: ...
    def SetFlattenFillHoles(FillHoles: pymxs.runtime.Boolean) -> None: ...
    def GetPreventFlattening() -> pymxs.runtime.Boolean: ...
    def SetPreventFlattening(PreventFlattening: pymxs.runtime.Boolean) -> None: ...
    def GetEnableSoftSelection() -> pymxs.runtime.Boolean: ...
    def SetEnableSoftSelection(Enable: pymxs.runtime.Boolean) -> None: ...
    def GetApplyToWholeObject() -> pymxs.runtime.Boolean: ...
    def SetApplyToWholeObject(Whole: pymxs.runtime.Boolean) -> None: ...
    def SetVertexPosition(Time: pymxs.runtime.Time, Index: pymxs.runtime.Integer, Pos: pymxs.runtime.Point3, Hold: pymxs.runtime.Boolean, Update: pymxs.runtime.Boolean) -> None: ...
    def Relax(Iterations: pymxs.runtime.Integer, Strength: pymxs.runtime.Float, LockEdges: pymxs.runtime.Boolean, MatchArea: pymxs.runtime.Boolean) -> None: ...
    def FitRelax(Iterations: pymxs.runtime.Integer, Strength: pymxs.runtime.Float) -> None: ...
    ...
class Unwrap3:
    def GetAutoBackground() -> pymxs.runtime.Boolean: ...
    def SetAutoBackground(AutoBackground: pymxs.runtime.Boolean) -> None: ...
    def GetRelaxAmount() -> pymxs.runtime.Float: ...
    def SetRelaxAmount(Amount: pymxs.runtime.Float) -> None: ...
    def GetRelaxIteration() -> pymxs.runtime.Integer: ...
    def SetRelaxIteration(Amount: pymxs.runtime.Integer) -> None: ...
    def GetRelaxBoundary() -> pymxs.runtime.Boolean: ...
    def SetRelaxBoundary(Boundary: pymxs.runtime.Boolean) -> None: ...
    def GetRelaxSaddle() -> pymxs.runtime.Boolean: ...
    def SetRelaxSaddle(Saddle: pymxs.runtime.Boolean) -> None: ...
    def Relax() -> None: ...
    ...
class Unwrap4:
    def GetThickOpenEdges() -> pymxs.runtime.Boolean: ...
    def SetThickOpenEdges(Thick: pymxs.runtime.Boolean) -> None: ...
    def GetViewportOpenEdges() -> pymxs.runtime.Boolean: ...
    def SetViewportOpenEdges(Show: pymxs.runtime.Boolean) -> None: ...
    def SelectInvertedFaces() -> None: ...
    def GetRelativeTypeIn() -> pymxs.runtime.Boolean: ...
    def SetRelativeTypeIn(Relative: pymxs.runtime.Boolean) -> None: ...
    def AddMap(Map: pymxs.runtime.Texturemap) -> None: ...
    def FlattenMapByMatID(AngleThreshold: pymxs.runtime.Float, Spacing: pymxs.runtime.Float, Normalize: pymxs.runtime.Boolean, LayOutType: pymxs.runtime.Integer, RotateClusters: pymxs.runtime.Boolean, FillHoles: pymxs.runtime.Boolean) -> None: ...
    def GetArea(FaceSelection: pymxs.runtime.BitArray, X: pymxs.runtime.Float, Y: pymxs.runtime.Float, Width: pymxs.runtime.Float, Height: pymxs.runtime.Float, AreaUVW: pymxs.runtime.Float, AreaGeom: pymxs.runtime.Float) -> None:
        """
        x is Out parameter
        y is Out parameter
        width is Out parameter
        height is Out parameter
        areaUVW is Out parameter
        areaGeom is Out parameter
        """
        ...
    def GetRotationsRespectAspect() -> pymxs.runtime.Boolean: ...
    def SetRotationsRespectAspect(Respect: pymxs.runtime.Boolean) -> None: ...
    def SetMax(Like: pymxs.runtime.Boolean) -> None: ...
    ...
class Unwrap5:
    def GetPeltMapMode() -> pymxs.runtime.Boolean: ...
    def SetPeltMapMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def GetPeltEditSeamsMode() -> pymxs.runtime.Boolean: ...
    def SetPeltEditSeamsMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def GetPeltSelectedSeams() -> pymxs.runtime.BitArray: ...
    def SetPeltSelectedSeams(Selection: pymxs.runtime.BitArray) -> None: ...
    def GetPeltPointToPointSeamsMode() -> pymxs.runtime.Boolean: ...
    def SetPeltPointToPointSeamsMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def PeltExpandSelectionToSeams() -> None: ...
    def PeltDialog() -> None: ...
    def PeltDialogResetStretcher() -> None: ...
    def PeltDialogSelectStretcher() -> None: ...
    def PeltDialogSelectPelt() -> None: ...
    def PeltDialogSnapToSeams() -> None: ...
    def PeltDialogMirrorStretcher() -> None: ...
    def GetPeltDialogStraightenMode() -> pymxs.runtime.Boolean: ...
    def SetPeltDialogStraightenMode(Mode: pymxs.runtime.Boolean) -> None: ...
    def PeltDialogStraighten(Vert: pymxs.runtime.Index) -> None: ...
    def PeltDialogRun() -> None: ...
    def PeltDialogRelaxLight() -> None: ...
    def PeltDialogRelaxHeavy() -> None: ...
    def GetPeltDialogFrames() -> pymxs.runtime.Integer: ...
    def SetPeltDialogFrames(Frames: pymxs.runtime.Integer) -> None: ...
    def GetPeltDialogSamples() -> pymxs.runtime.Integer: ...
    def SetPeltDialogSamples(Samples: pymxs.runtime.Integer) -> None: ...
    def GetPeltDialogStretcherStrength() -> pymxs.runtime.Float: ...
    def SetPeltDialogStretcherStrength(Strength: pymxs.runtime.Float) -> None: ...
    def GetPeltDialogStiffness() -> pymxs.runtime.Float: ...
    def SetPeltDialogStiffness(Stiffness: pymxs.runtime.Float) -> None: ...
    def GetPeltDialogDampening() -> pymxs.runtime.Float: ...
    def SetPeltDialogDampening(Dampening: pymxs.runtime.Float) -> None: ...
    def GetPeltDialogDecay() -> pymxs.runtime.Float: ...
    def SetPeltDialogDecay(Decay: pymxs.runtime.Float) -> None: ...
    def GetPeltDialogMirrorAxis() -> pymxs.runtime.Float: ...
    def SetPeltDialogMirrorAxis(Axis: pymxs.runtime.Float) -> None: ...
    def MappingAlign(Axis: pymxs.runtime.Integer) -> None: ...
    def MappingMode(Mode: pymxs.runtime.Integer) -> None: ...
    def SetGizmoTM(Tm: pymxs.runtime.Matrix3) -> None: ...
    def GetGizmoTM() -> pymxs.runtime.Matrix3: ...
    def MappingFit() -> None: ...
    def MappingCenter() -> None: ...
    def MappingAlignToView() -> None: ...
    def ExpandGeomEdgeSelection() -> None: ...
    def ContractGeomEdgeSelection() -> None: ...
    def GeomEdgeLoopSelection() -> None: ...
    def GeomEdgeRingSelection() -> None: ...
    def ExpandGeomVertexSelection() -> None: ...
    def ContractGeomVertexSelection() -> None: ...
    def GetSelectedGeomVerts() -> pymxs.runtime.BitArray: ...
    def SetSelectedGeomVerts(Selection: pymxs.runtime.BitArray) -> None: ...
    def GetSelectedGeomEdges() -> pymxs.runtime.BitArray: ...
    def SetSelectedGeomEdges(Selection: pymxs.runtime.BitArray) -> None: ...
    def GetPeltAlwaysShowSeams() -> pymxs.runtime.Boolean: ...
    def SetPeltAlwaysShowSeams(Show: pymxs.runtime.Boolean) -> None: ...
    def PeltSeamToEdgeSel(Replace: pymxs.runtime.Boolean) -> None: ...
    def PeltEdgeSelToSeam(Replace: pymxs.runtime.Boolean) -> None: ...
    def GetNormalizeMap() -> pymxs.runtime.Boolean: ...
    def SetNormalizeMap(Normalize: pymxs.runtime.Boolean) -> None: ...
    def GetShowEdgeDistortion() -> pymxs.runtime.Boolean: ...
    def SetShowEdgeDistortion(Show: pymxs.runtime.Boolean) -> None: ...
    def GetPeltLockOpenEdges() -> pymxs.runtime.Boolean: ...
    def SetPeltLockOpenEdges(Lock: pymxs.runtime.Boolean) -> None: ...
    def SelectOverlappedFaces() -> None: ...
    def MappingReset() -> None: ...
    def GetEdgeDistortionScale() -> pymxs.runtime.Float: ...
    def SetEdgeDistortionScale(Scale: pymxs.runtime.Float) -> None: ...
    def RelaxBySpring(Frames: pymxs.runtime.Integer, Stretch: pymxs.runtime.Float, UseOnlyVEdges: pymxs.runtime.Boolean) -> None: ...
    def RelaxBySpringDialog() -> None: ...
    def GetRelaxBySpringStretch() -> pymxs.runtime.Float: ...
    def SetRelaxBySpringStretch(Stretch: pymxs.runtime.Float) -> None: ...
    def GetRelaxBySpringIteration() -> pymxs.runtime.Integer: ...
    def SetRelaxBySpringIteration(Iteration: pymxs.runtime.Integer) -> None: ...
    def GetRelaxBySpringUseOnlyVEdges() -> pymxs.runtime.Boolean: ...
    def SetRelaxBySpringUseOnlyVEdges(UseOnlyVEdges: pymxs.runtime.Boolean) -> None: ...
    def RelaxByFaceAngle(Iterations: pymxs.runtime.Integer, Stretch: pymxs.runtime.Float, Strength: pymxs.runtime.Float, LockBoundaries: pymxs.runtime.Boolean) -> None: ...
    def RelaxByEdgeAngle(Iterations: pymxs.runtime.Integer, Stretch: pymxs.runtime.Float, Strength: pymxs.runtime.Float, LockBoundaries: pymxs.runtime.Boolean) -> None: ...
    def SetWindowXOffset(Offset: pymxs.runtime.Integer, RemoveUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def SetWindowYOffset(Offset: pymxs.runtime.Integer, RemoveUIScaling: pymxs.runtime.Boolean = True) -> None: ...
    def FitSelectedElement() -> None: ...
    def GetShowSubObjectCounter() -> pymxs.runtime.Boolean: ...
    def SetShowSubObjectCounter(Show: pymxs.runtime.Boolean) -> None: ...
    def RenderUVDialog() -> None: ...
    def RenderUV(FileName: pymxs.runtime.Filename, UTile: pymxs.runtime.Integer = 1, VTile: pymxs.runtime.Integer = 1) -> None: ...
    def IsMesh() -> pymxs.runtime.Boolean: ...
    def QuickPlanarMap() -> None: ...
    def GetQuickMapGizmoPreview() -> pymxs.runtime.Boolean: ...
    def SetQuickMapGizmoPreview(Preview: pymxs.runtime.Boolean) -> None: ...
    def GetShowMapSeams() -> pymxs.runtime.Boolean: ...
    def SetShowMapSeams(Show: pymxs.runtime.Boolean) -> None: ...
    def GetShowMultiTile() -> pymxs.runtime.Boolean: ...
    def SetShowMultiTile(ShowMultiTile: pymxs.runtime.Boolean) -> None: ...
    ...
class ImportSettings:
    CONVERTTOMESH: pymxs.runtime.Boolean  
    UPAXIS: pymxs.runtime.Enum  # x, y, z - rt.Name("")
    HIERARCHYMODE: pymxs.runtime.Enum  # UsingGrouping, UsingLayer, Flattened - rt.Name("")
    MeshRESOLUTION: pymxs.runtime.Integer  
    KEEPDUMMYNODES: pymxs.runtime.Boolean  
    IMPORTTEXTURES: pymxs.runtime.Boolean  
    IMPORTCAMERAS: pymxs.runtime.Boolean  
    IMPORTHIDDENOBJECTS: pymxs.runtime.Boolean  
    DOUBLESIDEDMATERIALS: pymxs.runtime.Boolean  
    PRESERVELAYERS: pymxs.runtime.Boolean  
    ...
class Modifiers:
    def GetHelperCount() -> pymxs.runtime.Integer: ...
    def GetKnotCount() -> pymxs.runtime.Integer: ...
    def LinkToRoot() -> pymxs.runtime.Boolean: ...
    def LinkInHierarchy() -> pymxs.runtime.Boolean: ...
    def NoLinking() -> pymxs.runtime.Boolean: ...
    def CreateHelper(KnotCount: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    ...
class NaturalLightClass:
    def IsSun() -> pymxs.runtime.Boolean: ...
    def IsSky() -> pymxs.runtime.Boolean: ...
    ...
class LightProperties:
    EXCLUDELIST: pymxs.runtime.Value  
    INCLUDELIST: pymxs.runtime.Value  
    SHADOWGENERATOR: pymxs.runtime.Value  
    SHADOWGENERATORBYNAME: pymxs.runtime.Value  
    RAYTRACEDSHADOWS: pymxs.runtime.Value  
    Color: pymxs.runtime.Color  
    ENABLED: pymxs.runtime.Boolean  
    ...
class Iobjimp:
    def GetIniName() -> pymxs.runtime.String: ...
    def GetPresetIniName() -> pymxs.runtime.String: ...
    ...
class TurboSmooth:
    def ForceUpdate() -> None: ...
    ...
class AlembicImport:
    COORDINATESYSTEM: pymxs.runtime.Enum  # Max, Maya, ZUp, YUp - rt.Name("")
    IMPORTTOROOT: pymxs.runtime.Boolean  
    FITTIMERANGE: pymxs.runtime.Boolean  
    SETSTARTTIME: pymxs.runtime.Boolean  
    UVS: pymxs.runtime.Boolean  
    NORMALS: pymxs.runtime.Boolean  
    VERTEXCOLORS: pymxs.runtime.Boolean  
    EXTRACHANNELS: pymxs.runtime.Boolean  
    VELOCITY: pymxs.runtime.Boolean  
    MaterialIDS: pymxs.runtime.Boolean  
    VISIBILITY: pymxs.runtime.Boolean  
    CUSTOMATTRIBUTES: pymxs.runtime.Boolean  
    SHAPESUFFIX: pymxs.runtime.Boolean  
    ObjectATTRIBUTES: pymxs.runtime.Boolean  
    def SetDefaults() -> None:
        """
        setDefaults - no automatic redraw after invoked
        """
        ...
    def Inspect(AlembicFile: pymxs.runtime.String) -> pymxs.runtime.String:
        """
        Inspect - no automatic redraw after invoked
        """
        ...
    def GetNumChildren(PathToNode: pymxs.runtime.String) -> pymxs.runtime.Integer:
        """
        GetNumChildren - no automatic redraw after invoked
        """
        ...
    def GetParent(PathToNode: pymxs.runtime.String) -> pymxs.runtime.String:
        """
        GetParent - no automatic redraw after invoked
        """
        ...
    def GetChild(PathToNode: pymxs.runtime.String, Index: pymxs.runtime.Integer) -> pymxs.runtime.String:
        """
        GetChild - no automatic redraw after invoked
        """
        ...
    def GetABCNodeName(PathToNode: pymxs.runtime.String) -> pymxs.runtime.String:
        """
        GetABCNodeName - no automatic redraw after invoked
        """
        ...
    def GetABCNodeProperties(PathToPropNode: pymxs.runtime.String) -> pymxs.runtime.String:
        """
        GetABCNodeProperties - no automatic redraw after invoked
        """
        ...
    def GetNumProperties(PathToPropNode: pymxs.runtime.String, PathToProperty: pymxs.runtime.String) -> pymxs.runtime.Integer:
        """
        GetNumProperties - no automatic redraw after invoked
        """
        ...
    def GetChildPropertyFromIndex(PathToPropNode: pymxs.runtime.String, PathToProperty: pymxs.runtime.String, Index: pymxs.runtime.Integer) -> pymxs.runtime.String:
        """
        GetChildPropertyFromIndex - no automatic redraw after invoked
        """
        ...
    def GetChildPropertyFromName(PathToPropNode: pymxs.runtime.String, PathToProperty: pymxs.runtime.String, Name: pymxs.runtime.String) -> pymxs.runtime.String:
        """
        GetChildPropertyFromName - no automatic redraw after invoked
        """
        ...
    def GetPropertyType(PathToPropNode: pymxs.runtime.String, PathToProperty: pymxs.runtime.String) -> pymxs.runtime.Enum:
        """
        GetPropertyType pymxs.runtime.Enums: {#Compound|#Scalar|#Array
        GetPropertyType - no automatic redraw after invoked
        """
        ...
    def GetPropertyDataType(PathToPropNode: pymxs.runtime.String, PathToProperty: pymxs.runtime.String) -> pymxs.runtime.Enum:
        """
        GetPropertyDataType pymxs.runtime.Enums: {#Bool|#Int8|#UInt8|#Int16|#UInt16|#Int32|#UInt32|#Int64|#UInt64|#Float16|#Float32|#Float64|#String|#WString|#Unknown
        GetPropertyDataType - no automatic redraw after invoked
        """
        ...
    def GetPropertyExtent(PathToPropNode: pymxs.runtime.String, PathToProperty: pymxs.runtime.String) -> pymxs.runtime.Integer:
        """
        GetPropertyExtent - no automatic redraw after invoked
        """
        ...
    def CA(Node: pymxs.runtime.Node, AlembicFile: pymxs.runtime.String) -> None:
        """
        CA_SetNode - no automatic redraw after invoked
        """
        ...
    def CA(Location: pymxs.runtime.Enum, AlembicObjectPath: pymxs.runtime.String, PropertyPath: pymxs.runtime.String) -> None:
        """
        CA_AddProperty - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA() -> None:
        """
        CA_Build - no automatic redraw after invoked
        """
        ...
    def OA(Node: pymxs.runtime.Node, Name: pymxs.runtime.String, Val: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        OA_SetBool - no automatic redraw after invoked
        """
        ...
    def OA(Node: pymxs.runtime.Node, Name: pymxs.runtime.String, Val: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        OA_SetInt - no automatic redraw after invoked
        """
        ...
    def OA(Node: pymxs.runtime.Node, Name: pymxs.runtime.String, Val: pymxs.runtime.Integer64) -> pymxs.runtime.Boolean:
        """
        OA_SetULong - no automatic redraw after invoked
        """
        ...
    def OA(Node: pymxs.runtime.Node, Name: pymxs.runtime.String, Val: pymxs.runtime.Float) -> pymxs.runtime.Boolean:
        """
        OA_SetFloat - no automatic redraw after invoked
        """
        ...
    def OA(Node: pymxs.runtime.Node, Name: pymxs.runtime.String, Val: pymxs.runtime.Point3) -> pymxs.runtime.Boolean:
        """
        OA_SetPoint3 - no automatic redraw after invoked
        """
        ...
    def OA(Node: pymxs.runtime.Node, Name: pymxs.runtime.String, Val: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        OA_SetString - no automatic redraw after invoked
        """
        ...
    def InspectorDialog(AlembicFile: pymxs.runtime.String) -> pymxs.runtime.String:
        """
        InspectorDialog - no automatic redraw after invoked
        """
        ...
    ...
class RayMeshGridIntersectOps:
    def Free() -> None: ...
    def Initialize(GridSize: pymxs.runtime.Integer) -> None: ...
    def BuildGrid() -> None: ...
    def AddNode(AddNode: pymxs.runtime.Node) -> None: ...
    def IntersectBox(Min: pymxs.runtime.Point3, Max: pymxs.runtime.Point3) -> pymxs.runtime.Integer: ...
    def IntersectSphere(Center: pymxs.runtime.Point3, Radius: pymxs.runtime.Float) -> pymxs.runtime.Integer: ...
    def IntersectRay(P: pymxs.runtime.Point3, Dir: pymxs.runtime.Point3, DoudbleSided: pymxs.runtime.Boolean) -> pymxs.runtime.Integer: ...
    def IntersectSegment(P: pymxs.runtime.Point3, DoudbleSided: pymxs.runtime.Boolean) -> pymxs.runtime.Integer: ...
    def GetHitFace(Index: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetHitDist(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def IntersectSegmentDebug(P: pymxs.runtime.Point3, DoudbleSided: pymxs.runtime.Boolean, GridID: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetClosestHit() -> pymxs.runtime.Integer: ...
    def GetFarthestHit() -> pymxs.runtime.Integer: ...
    def ClosestFace(P: pymxs.runtime.Point3) -> pymxs.runtime.Integer: ...
    def GetPerpDist(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def ClearStats() -> None: ...
    def PrintStats() -> None: ...
    ...
class RayMeshGridIntersectOpsV2:
    def ClosestFaceThreshold(P: pymxs.runtime.Point3, Threhold: pymxs.runtime.Float) -> pymxs.runtime.Integer: ...
    ...
class RayMeshGridIntersectOpsV3:
    def GetHitBary(Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def GetHitNormal(Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def GetHitPoint(Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    ...
class DisplayCulling:
    def GetInstance() -> pymxs.runtime.MaxObject: ...
    ...
class ILookatControl:
    USETARGETASUPNODE: pymxs.runtime.Boolean  
    AXIS: pymxs.runtime.Integer  # Range: 0 to 2
    FLIP: pymxs.runtime.Boolean  
    ...
class SubdivideModInterface:
    def UpdateSubdivision() -> None: ...
    def UpdateSubdivisionWithInfo(NObjectsSucceeded: pymxs.runtime.Integer, NObjectsTot: pymxs.runtime.Integer, ComputeTime: pymxs.runtime.Integer) -> None:
        """
        nObjectsSucceeded is In and Out parameter
        nObjectsTot is In and Out parameter
        computeTime is In and Out parameter
        """
        ...
    ...
class MMCleanInterface:
    def FindAll(MtlsFound: pymxs.runtime.MaterialArray) -> None:
        """
        mtlsFound is Out parameter
        """
        ...
    def Fix(Mtls: pymxs.runtime.MaterialArray, Prompt: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    def FixAll(Prompt: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    ...
class MMCleanActions:
    def CleanMaterailsAll() -> pymxs.runtime.Boolean: ...
    ...
class ViewportViewSettingImpl:
    SHOWEDGEDFACESENABLED: pymxs.runtime.Boolean  
    USETEXTUREENABLED: pymxs.runtime.Boolean  
    TRANSPARENCYENABLED: pymxs.runtime.Boolean  
    SELECTEDEDGEDFACESENABLED: pymxs.runtime.Boolean  
    SHOWSELECTIONBRACKETSENABLED: pymxs.runtime.Boolean  
    SHADESELECTEDFACESENABLED: pymxs.runtime.Boolean  
    DISABLEVIEWPORT: pymxs.runtime.Boolean  
    VIEWPORTCLIPPINGENABLED: pymxs.runtime.Boolean  
    USEENVIRONMENTBACKGROUNDCOLORENABLED: pymxs.runtime.Boolean  
    USEVIEWPORTBACKGROUNDENABLED: pymxs.runtime.Boolean  
    VISUALSTYLEMODE: pymxs.runtime.Enum  # Realistic, Shaded, Facets, ConsistentColors, HiddenLine, Wireframe, BoundingBox, Clay, ModelAssist, Ink, ColorInk, Acrylic, Tech, Graphite, ColorPencil, Pastel - rt.Name("")
    SHOWHIGHLIGHTENABLED: pymxs.runtime.Boolean  
    LIGHTOPTION: pymxs.runtime.Enum  # DefaultLight, SceneLight - rt.Name("")
    DEFAULTLIGHTMODE: pymxs.runtime.Enum  # OneLight, TwoLights - rt.Name("")
    SHADESELECTEDOBJECTSENABLED: pymxs.runtime.Boolean  
    AUTODISPLAYSELECTEDLIGHTENABLED: pymxs.runtime.Boolean  
    SHADOWSENABLED: pymxs.runtime.Boolean  
    AMBIENTOCCLUSIONENABLED: pymxs.runtime.Boolean  
    HDAOENABLED: pymxs.runtime.Boolean  
    OVERRIDEMATERIALOPTION: pymxs.runtime.Enum  # None, FastShader, RenderingSetting, UVChecker - rt.Name("")
    SHOWMATERIALOPTION: pymxs.runtime.Enum  # Default, Shaded, Realistic - rt.Name("")
    AMBIENTOCCLUSIONRADIUS: pymxs.runtime.Float  
    AMBIENTOCCLUSIONINTENSITY: pymxs.runtime.Float  
    SHADOWINTENSITY: pymxs.runtime.Float  
    DYNAMICREFLECTIONENABLED: pymxs.runtime.Boolean  
    LIGHTINGANDSHADOWQUALITYMODE: pymxs.runtime.Enum  # HardShadows, SoftEdgedShadows, 0_125X, 0_25X, 0_5X, 1X, 2X, 4X, 8X, 16X - rt.Name("")
    REFLECTIONENABLED: pymxs.runtime.Boolean  
    DEFAULTLIGHTSFOLLOWCAMERA: pymxs.runtime.Boolean  
    USESIMPLIFIEDSKYLIGHT: pymxs.runtime.Boolean  
    PROGRESSIVEFADINGFACTOR: pymxs.runtime.Integer  
    DOFENABLED: pymxs.runtime.Boolean  
    BOKEHSHAPE: pymxs.runtime.Filename  
    USESOLIDCOLOR: pymxs.runtime.Boolean  
    PROGRESSIVERENDERINGENABLED: pymxs.runtime.Boolean  
    WORLDDEBUGGERENABLED: pymxs.runtime.Boolean  
    ADAPTIVEDEGRADENEVERDEGRADEGEOMETRY: pymxs.runtime.Boolean  
    DEFEREDREDRAWTIMEOUT: pymxs.runtime.Integer  
    SHADEDRENDERMODE: pymxs.runtime.Integer  
    VIEWPORTPRESET: pymxs.runtime.Enum  # Quality, Standard, Performance, DXMode, Customize - rt.Name("")
    BLOOMENABLED: pymxs.runtime.Boolean  
    BLOOMTINTCOLOR: pymxs.runtime.Point3  
    BLOOMTINTCONTRIBUTION: pymxs.runtime.Float  
    BLOOMTHRESHOLD: pymxs.runtime.Float  
    BLOOMTHRESHOLDSMOOTHING: pymxs.runtime.Float  
    BLOOMSTRENGTH: pymxs.runtime.Float  
    BLOOMRADIUS: pymxs.runtime.Integer  
    BLOOMQUALITY: pymxs.runtime.Enum  # Gaussian_3x3, Gaussian_5x5, Gaussian_7x7, Gaussian_9x9 - rt.Name("")
    BLOOMDIRTMAPENABLED: pymxs.runtime.Boolean  
    BLOOMDIRTMAPIMAGE: pymxs.runtime.Filename  
    BLOOMDIRTCONTRIBUTION: pymxs.runtime.Float  
    BLOOMAPPLYONBACKGROUND: pymxs.runtime.Boolean  
    BLOOMSHOWBLOOMPASS: pymxs.runtime.Boolean  
    BLOOMSHOWFILTERPASS: pymxs.runtime.Boolean  
    BLOOMSHOWRADIUSPASSNUMBER: pymxs.runtime.Integer  
    def SetNPRBool(Name: pymxs.runtime.String, Value: pymxs.runtime.Boolean) -> None: ...
    def SetNPRInt(Name: pymxs.runtime.String, Value: pymxs.runtime.Integer) -> None: ...
    def SetNPRFloat(Name: pymxs.runtime.String, Value: pymxs.runtime.Float) -> None: ...
    def SetNPRFloat(Name: pymxs.runtime.String, Value: pymxs.runtime.Point4) -> None: ...
    def SetNPRString(Name: pymxs.runtime.String, Value: pymxs.runtime.String) -> None: ...
    def ShowNPRParameters() -> None: ...
    def GetNPRParameterInfo() -> pymxs.runtime.String: ...
    def GetNPRParameterCount() -> pymxs.runtime.Integer: ...
    def GetNPRParameterName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetNPRParameterType(Index: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        GetNPRParameterType pymxs.runtime.Enums: {#Unknown|#Bool|#Int|#Float|#Float4|#String
        """
        ...
    def GetNPRBool(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetNPRInt(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetNPRFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def GetNPRFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Point4: ...
    def GetNPRString(Name: pymxs.runtime.String) -> pymxs.runtime.String: ...
    def GetNPRMinInt(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetNPRMinFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def GetNPRMinFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Point4: ...
    def GetNPRMaxInt(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetNPRMaxFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def GetNPRMaxFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Point4: ...
    ...
class LayerRootFPInterface:
    @property
    def NUMLAYERS() -> pymxs.runtime.Integer: ...
    SELECTEDLAYER: pymxs.runtime.Index  
    SOLOLAYER: pymxs.runtime.Index  
    TRACKDISPLAYMETHOD: pymxs.runtime.Integer  
    def AppendLayer(Name: pymxs.runtime.String, Method: pymxs.runtime.Name) -> pymxs.runtime.Integer:
        """
        method Validated by Validator function
        """
        ...
    def InsertLayer(Name: pymxs.runtime.String, LayerID: pymxs.runtime.Index, Method: pymxs.runtime.Name) -> pymxs.runtime.Boolean:
        """
        method Validated by Validator function
        """
        ...
    def RemoveLayer(LayerID: pymxs.runtime.Index) -> None: ...
    def MoveLayerUp(LayerID: pymxs.runtime.Index) -> None: ...
    def MoveLayerDown(LayerID: pymxs.runtime.Index) -> None: ...
    def GetLayerColor(Index: pymxs.runtime.Index) -> pymxs.runtime.Color: ...
    def SetLayerColor(Index: pymxs.runtime.Index, NewColor: pymxs.runtime.Color) -> pymxs.runtime.Boolean: ...
    def SaveClip(Filename: pymxs.runtime.String, Starttime: pymxs.runtime.Time, Endtime: pymxs.runtime.Time, Startlayer: pymxs.runtime.Index, Endlayer: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SavePose(Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def LoadClip(Filename: pymxs.runtime.String, Starttime: pymxs.runtime.Time, Scaledata: pymxs.runtime.Boolean = True, Transformdata: pymxs.runtime.Boolean = True, Mirrordata: pymxs.runtime.Boolean = False, MirrorworldX: pymxs.runtime.Boolean = False, MirrorworldY: pymxs.runtime.Boolean = False) -> pymxs.runtime.Node: ...
    def LoadPose(Filename: pymxs.runtime.String, Starttime: pymxs.runtime.Time, Scaledata: pymxs.runtime.Boolean = True, Transformdata: pymxs.runtime.Boolean = True, Mirrordata: pymxs.runtime.Boolean = False, MirrorworldX: pymxs.runtime.Boolean = False, MirrorworldY: pymxs.runtime.Boolean = False) -> pymxs.runtime.Node: ...
    def CreatePasteLayerTransformNode() -> pymxs.runtime.Node: ...
    def GetFileTagValue(Filename: pymxs.runtime.String, Tag: pymxs.runtime.String) -> pymxs.runtime.String: ...
    def LoadHTR(Filename: pymxs.runtime.String, Camfile: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def LoadBVH(Filename: pymxs.runtime.String, Camfile: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def LoadFBX(Filename: pymxs.runtime.String, Camfile: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def LoadBIP(Filename: pymxs.runtime.String, Camfile: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def CollapsePoseToCurLayer() -> None: ...
    def CollapseTimeRangeToLayer(StartTime: pymxs.runtime.Time, Endtime: pymxs.runtime.Time, Frequency: pymxs.runtime.Time, Regularplot: pymxs.runtime.Boolean = False, NumPasses: pymxs.runtime.Integer = 2, PosDeltaThreshold: pymxs.runtime.Float = 1.0, RotDeltaThreshold: pymxs.runtime.Float = 5.0) -> pymxs.runtime.Boolean: ...
    def CopyLayer(LayerID: pymxs.runtime.Index) -> None: ...
    def PasteLayer(Instance: pymxs.runtime.Boolean = False, CopyLayerInfo: pymxs.runtime.Boolean = True) -> None: ...
    ...
class CATParentFPInterface:
    CATMODE: pymxs.runtime.Integer  # Validator function
    CATNAME: pymxs.runtime.String  
    CATUNITS: pymxs.runtime.Float  # Validator function
    COLOURMODE: pymxs.runtime.Integer  
    LENGTHAXIS: pymxs.runtime.String  # Validator function
    @property
    def Node() -> pymxs.runtime.Node: ...
    @property
    def ROOTHUB() -> pymxs.runtime.Control: ...
    @property
    def CATVERSION() -> pymxs.runtime.Integer: ...
    @property
    def CATRIGSPACE() -> pymxs.runtime.Matrix3: ...
    @property
    def CATRIGNODES() -> pymxs.runtime.NodeArray: ...
    @property
    def CATRIGLAYERCTRLS() -> pymxs.runtime.ControlArray: ...
    @property
    def ROOTTRANSFORMNODE() -> pymxs.runtime.Node: ...
    def AddHub() -> None: ...
    def LoadRig(Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def SaveRig(Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetBoneByAddress(Address: pymxs.runtime.String) -> pymxs.runtime.Node: ...
    def UpdateUserProps() -> None: ...
    def AddRootNode() -> None: ...
    ...
class ExtraRigNodesInterface:
    EXTRARIGNODES: pymxs.runtime.NodeArray  
    def AddExtraRigNodes(Nodes: pymxs.runtime.NodeArray) -> None: ...
    def RemoveExtraRigNodes(Nodes: pymxs.runtime.NodeArray) -> None: ...
    ...
class InventorImport:
    REPLACESCENE: pymxs.runtime.Boolean  
    IMPORTMATERIALS: pymxs.runtime.Boolean  
    ASSIGNMATERIALIDS: pymxs.runtime.Boolean  
    LAYERBYMATERIAL: pymxs.runtime.Boolean  
    APPENDOBJECTNAME: pymxs.runtime.Boolean  
    IMPORTBODY: pymxs.runtime.Boolean  
    REFERENCEDUPLICATEDPARTS: pymxs.runtime.Boolean  
    VERTICALAXIS: pymxs.runtime.Enum  # x, y, z - rt.Name("")
    MeshRESOLUTION: pymxs.runtime.Integer  
    ...
class ProjectionModOps:
    def GrowSelection() -> None: ...
    def ShrinkSelection() -> None: ...
    def SelectByMtlID(Id: pymxs.runtime.Integer) -> None: ...
    def SelectBySG(Sg: pymxs.runtime.Integer) -> None: ...
    def NumObjects() -> pymxs.runtime.Integer: ...
    def GetObjectNode(ObjIndex: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def GetObjectName(ObjIndex: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetObjectSelLevel(ObjIndex: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        getObjectSelLevel pymxs.runtime.Enums: {#object|#vertex|#face|#element
        """
        ...
    def GetObjectSelFaces(Node: pymxs.runtime.Node, ObjIndex: pymxs.runtime.Index, Faces: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean:
        """
        faces is Out parameter
        """
        ...
    def GetObjectMtlIds(Node: pymxs.runtime.Node, ObjIndex: pymxs.runtime.Index, MtlIDs: pymxs.runtime.IntegerArray) -> pymxs.runtime.Integer:
        """
        mtlIDs is Out parameter
        """
        ...
    def DeleteObjectNode(ObjIndex: pymxs.runtime.Index) -> None: ...
    def NumGeomSels() -> pymxs.runtime.Integer: ...
    def GetGeomSelName(SelIndex: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetGeomSelLevel(SelIndex: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        getGeomSelLevel pymxs.runtime.Enums: {#object|#vertex|#face|#element
        """
        ...
    def NumGeomSelNodes(SelIndex: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetGeomSelNode(SelIndex: pymxs.runtime.Index, NodeIndex: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def GetGeomSelFaces(Node: pymxs.runtime.Node, SelIndex: pymxs.runtime.Index, Faces: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean:
        """
        faces is Out parameter
        """
        ...
    def GetGeomSelMtlIds(Node: pymxs.runtime.Node, SelIndex: pymxs.runtime.Index, MtlIDs: pymxs.runtime.IntegerArray) -> pymxs.runtime.Integer:
        """
        mtlIDs is Out parameter
        """
        ...
    def GetGeomSelMapProportion(SelIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetGeomSelMapProportion(SelIndex: pymxs.runtime.Index, Proportion: pymxs.runtime.Float) -> None: ...
    def DeleteGeomSel(SelIndex: pymxs.runtime.Index) -> None: ...
    def DeleteGeomSelNode(SelIndex: pymxs.runtime.Index, NodeIndex: pymxs.runtime.Index) -> None: ...
    def GetGeomSelFaceArea(Node: pymxs.runtime.Node, SelIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def CheckDuplicateMatIDs(Node: pymxs.runtime.Node, DupFaces: pymxs.runtime.BitArray) -> pymxs.runtime.Integer:
        """
        dupFaces is Out parameter
        """
        ...
    def CheckDuplicateSels(Node: pymxs.runtime.Node, DupFaces: pymxs.runtime.BitArray) -> pymxs.runtime.Integer:
        """
        dupFaces is Out parameter
        """
        ...
    def AutowrapCage() -> None: ...
    def ImportCage(ImportNode: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def ExportCage(ExportNodeName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def ResetCage() -> None: ...
    def PushCage(Amount: pymxs.runtime.Float) -> None: ...
    def IsValidObject(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def AddObjectNode(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def DeleteAll() -> None: ...
    def SetGeomSelNodesVisibility(Visible: pymxs.runtime.Boolean) -> None: ...
    def GetGeomSelNodesVisibility() -> pymxs.runtime.Boolean: ...
    def NumProjectionTypes() -> pymxs.runtime.Integer: ...
    def GetProjectionType(PtIndex: pymxs.runtime.Index) -> pymxs.runtime.MaxObject: ...
    def RemoveProjectionType(PtIndex: pymxs.runtime.Index) -> None: ...
    def ProjectProjectionType(PtIndex: pymxs.runtime.Index) -> None: ...
    def ProjectAll() -> None: ...
    def NumRegisteredProjectionTypes() -> pymxs.runtime.Integer: ...
    def AddRegisteredProjectionType(RptIndex: pymxs.runtime.Index) -> None: ...
    def GetRegisteredProjectionTypeClassID(RptIndex: pymxs.runtime.Index, ClassID: pymxs.runtime.IntegerArray) -> None:
        """
        ClassID is Out parameter
        """
        ...
    def ShowAlignment() -> None: ...
    def ClearAlignment() -> None: ...
    ...
class ICATControlFPInterface:
    @property
    def CATPARENT() -> pymxs.runtime.Node: ...
    NAME: pymxs.runtime.String  
    def PasteLayer(Source: pymxs.runtime.Control, Fromindex: pymxs.runtime.Integer, Toindex: pymxs.runtime.Integer, Instance: pymxs.runtime.Boolean) -> None: ...
    def PasteRig(Source: pymxs.runtime.MaxObject, Mirrordata: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def SaveClip(Filename: pymxs.runtime.String, StartTime: pymxs.runtime.Time, EndTime: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def LoadClip(Filename: pymxs.runtime.String, Time: pymxs.runtime.Time, Mirrordata: pymxs.runtime.Boolean) -> pymxs.runtime.Node: ...
    def SavePose(Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def LoadPose(Filename: pymxs.runtime.String, Time: pymxs.runtime.Time, Mirrordata: pymxs.runtime.Boolean) -> pymxs.runtime.Node: ...
    def CollapsePoseToCurLayer() -> None: ...
    def CollapseTimeRangeToCurrLayer(StartTime: pymxs.runtime.Time, EndTime: pymxs.runtime.Time, Frequency: pymxs.runtime.Time) -> None: ...
    def ResetTransforms() -> None: ...
    ...
class CATNodeControlFPInterface:
    @property
    def NUMARBBONES() -> pymxs.runtime.Integer: ...
    @property
    def Node() -> pymxs.runtime.Node: ...
    @property
    def ADDRESS() -> pymxs.runtime.String: ...
    SETUPTM: pymxs.runtime.Matrix3  
    @property
    def BONEDIMENSIONS() -> pymxs.runtime.Point3: ...
    SETUPSTRETCHY: pymxs.runtime.Boolean  
    ANIMATIONSTRETCHY: pymxs.runtime.Boolean  
    EFFECTHIERARCHY: pymxs.runtime.Boolean  
    USESETUPCONTROLLER: pymxs.runtime.Boolean  
    @property
    def NUMLAYERFLOATS() -> pymxs.runtime.Integer: ...
    SETUPMODEINHERITANCE: pymxs.runtime.BitArray  
    ANIMATIONMODEINHERITANCE: pymxs.runtime.BitArray  
    RELATIVETOSETUP: pymxs.runtime.Boolean  
    SETUPMODELOCKS: pymxs.runtime.BitArray  # Validator function
    ANIMATIONLOCKS: pymxs.runtime.BitArray  # Validator function
    MIRRORBONE: pymxs.runtime.Node  
    def AddArbBone(AsNewGroup: pymxs.runtime.Boolean = False) -> pymxs.runtime.Interface: ...
    def GetArbBone(Index: pymxs.runtime.Index) -> pymxs.runtime.Interface: ...
    def CreateLayerMatrix(AsNewGroup: pymxs.runtime.Boolean = False) -> pymxs.runtime.Control: ...
    def CreateLayerFloat() -> pymxs.runtime.Control: ...
    ...
class ISketchUpImp:
    def GetSkipHidden() -> pymxs.runtime.Boolean: ...
    def SetSkipHidden(BSkipHidden: pymxs.runtime.Boolean) -> None: ...
    def GetSplitByLayer() -> pymxs.runtime.Boolean: ...
    def SetSplitByLayer(BSplitByLayer: pymxs.runtime.Boolean) -> None: ...
    def GetImportCameras() -> pymxs.runtime.Boolean: ...
    def SetImportCameras(BCameras: pymxs.runtime.Boolean) -> None: ...
    def GetImportDaylightSystem() -> pymxs.runtime.Boolean: ...
    def SetImportDaylightSystem(BDaylightSystem: pymxs.runtime.Boolean) -> None: ...
    def GetTextureFolder() -> pymxs.runtime.String: ...
    def SetTextureFolder(TextureFolder: pymxs.runtime.String) -> None: ...
    def GetDoubleSided() -> pymxs.runtime.Boolean: ...
    def SetDoubleSided(BDoubleSided: pymxs.runtime.Boolean) -> None: ...
    ...
class ISubstanceTexMap:
    def GetCurrentPackageName() -> pymxs.runtime.String: ...
    def GetCurrentGraphName() -> pymxs.runtime.String: ...
    def GetOutputsNamesFromCurrentGraph() -> pymxs.runtime.StringArray: ...
    def GetPresetIdentifiers() -> pymxs.runtime.StringArray: ...
    def SelectGraph() -> None: ...
    def SetPackageAndGraphNames(PackageName: pymxs.runtime.String, GraphName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def SetInputInt(NewValue: pymxs.runtime.Integer, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputBool(NewValue: pymxs.runtime.Boolean, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputVec(NewValue: pymxs.runtime.Point2, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputVec(NewValue: pymxs.runtime.Point3, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputVec(NewValue: pymxs.runtime.Point4, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputColor(NewValue: pymxs.runtime.Color, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputFloat(NewValue: pymxs.runtime.Float, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputString(NewValue: pymxs.runtime.String, InputIdentifier: pymxs.runtime.String) -> None: ...
    def SetInputComboSelection(NewValue: pymxs.runtime.Integer, InputIdentifier: pymxs.runtime.String) -> None: ...
    def GetInputInt(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetInputBool(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetInputVec(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Point2: ...
    def GetInputVec(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Point3: ...
    def GetInputVec(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Point4: ...
    def GetInputFloat(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def GetInputColor(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Color: ...
    def GetInputString(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.String: ...
    def GetInputComboSelection(InputIdentifier: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetMaterialDependentCount() -> pymxs.runtime.Integer: ...
    def ApplyValuesToSelectedPreset() -> None: ...
    def RemoveAllPresets() -> None: ...
    def CreatePreset(PresetName: pymxs.runtime.String) -> None: ...
    def RemoveOnePreset(PresetNameToRemove: pymxs.runtime.String) -> None: ...
    def ImportPreset(PresetFilePath: pymxs.runtime.String) -> None: ...
    def ExportPreset(PresetFilePath: pymxs.runtime.String) -> None: ...
    def ExportPresetList(PresetFilePath: pymxs.runtime.String, PresetList: pymxs.runtime.StringArray) -> None: ...
    def BakeOutputsOfSelectedGraph(ImageOutputFilePath: pymxs.runtime.String, ImageTypeExtention: pymxs.runtime.String) -> None: ...
    ...
class IMultipleOutputChannels:
    @property
    def NUMIMULTIPLEOUTPUTCHANNELS() -> pymxs.runtime.Integer: ...
    def GetIMultipleOutputChannelLocalizedName(Index: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        getIMultipleOutputChannelLocalizedName - no automatic redraw after invoked
        """
        ...
    def GetIMultipleOutputChannelName(Index: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        getIMultipleOutputChannelName - no automatic redraw after invoked
        """
        ...
    ...
class IMultipleOutputChannelsWithValues:
    @property
    def NUMIMULTIPLEOUTPUTCHANNELS() -> pymxs.runtime.Integer: ...
    def GetIMultipleOutputChannelLocalizedName(Index: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        getIMultipleOutputChannelLocalizedName - no automatic redraw after invoked
        """
        ...
    def GetIMultipleOutputChannelName(Index: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        getIMultipleOutputChannelName - no automatic redraw after invoked
        """
        ...
    def GetIMultipleOutputChannelType(Index: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        getIMultipleOutputChannelType pymxs.runtime.Enums: {#float|#integer|#rgb|#point3|#string|#filename|#material|#texturemap|#bitmap|#node|#maxObject|#matrix3|#paramblock2|#point4|#frgba
        getIMultipleOutputChannelType - no automatic redraw after invoked
        """
        ...
    def GetIMultipleOutputChannelValue(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time = 0) -> pymxs.runtime.Value:
        """
        getIMultipleOutputChannelValue - no automatic redraw after invoked
        """
        ...
    ...
class ShineExport:
    def DoExport() -> pymxs.runtime.Boolean: ...
    def DoPickFile() -> pymxs.runtime.Boolean: ...
    ...
class ILayerControlFPInterface:
    @property
    def LAYERROOT() -> pymxs.runtime.Control: ...
    @property
    def WEIGHTS() -> pymxs.runtime.Control: ...
    USESETUPCONTROLLER: pymxs.runtime.Boolean  
    @property
    def SETUPCONTROLLER() -> pymxs.runtime.Control: ...
    ADDITIVETOSETUPVALUE: pymxs.runtime.Boolean  
    @property
    def SELECTEDLAYERCTRL() -> pymxs.runtime.Control: ...
    @property
    def NUMLAYERS() -> pymxs.runtime.Integer: ...
    @property
    def LAYERCONTROLLERS() -> pymxs.runtime.ControlArray: ...
    def BakeCurrentLayerSettings() -> None: ...
    ...
class ILayerMatrix3FPInterface:
    SETUPVAL: pymxs.runtime.Matrix3  
    ...
class Test:
    def ProceedStep(Container: pymxs.runtime.IObject, ParticleSystem: pymxs.runtime.Object, ParticleSystemNode: pymxs.runtime.Node, ActionNode: pymxs.runtime.Node, Integrator: pymxs.runtime.Interface) -> None: ...
    def ProceedStep(TimeStartTick: pymxs.runtime.Time, TimeStartFraction: pymxs.runtime.Float, TimeEndTick: pymxs.runtime.Time, TimeEndFraction: pymxs.runtime.Float, TestResult: pymxs.runtime.BitArray, TestTime: pymxs.runtime.FloatArray) -> pymxs.runtime.Boolean:
        """
        TimeEndTick is In and Out parameter
        TimeEndFraction is In and Out parameter
        testResult is In and Out parameter
        testTime is In and Out parameter
        """
        ...
    def GetNextActionList(TestNode: pymxs.runtime.Node, LinkActive: pymxs.runtime.Boolean) -> pymxs.runtime.Node:
        """
        linkActive is In and Out parameter
        """
        ...
    def SetNextActionList(ActionList: pymxs.runtime.Node, TestNode: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetLinkActive(LinkActive: pymxs.runtime.Boolean, TestNode: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def ClearNextActionList(TestNode: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    ...
class IGizmoTransformFPInterface:
    TARGETNODE: pymxs.runtime.Node  
    ...
class Integrator:
    def ProceedSync(Container: pymxs.runtime.IObject, TimeTick: pymxs.runtime.Time, TickFraction: pymxs.runtime.Float, SelectedOnly: pymxs.runtime.Boolean, Selected: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean: ...
    def ProceedASync(Container: pymxs.runtime.IObject, TimeTick: pymxs.runtime.TimeArray, TickFraction: pymxs.runtime.FloatArray, SelectedOnly: pymxs.runtime.Boolean, Selected: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean: ...
    ...
class Perspective_Match:
    def ShowVanishingLines() -> None: ...
    def HideVanishingLines() -> None: ...
    def IsMatching() -> pymxs.runtime.Boolean: ...
    def SetVanishingLineMode(VanishingLineMode: pymxs.runtime.Enum) -> None:
        """
        VanishingLineMode pymxs.runtime.Enums: {#XYZ|#XY|#XZ|#YZ}
        """
        ...
    def GetVanishingLineMode() -> pymxs.runtime.Enum:
        """
        GetVanishingLineMode pymxs.runtime.Enums: {#XYZ|#XY|#XZ|#YZ
        """
        ...
    def SetLineStart(LineID: pymxs.runtime.Enum, ViewportPercentageScreenPos: pymxs.runtime.Point2) -> None:
        """
        lineID pymxs.runtime.Enums: {#xLine1|#xLine2|#yLine1|#yLine2|#zLine1|#zLine2}
        """
        ...
    def GetLineStart(LineID: pymxs.runtime.Enum) -> pymxs.runtime.Point2:
        """
        lineID pymxs.runtime.Enums: {#xLine1|#xLine2|#yLine1|#yLine2|#zLine1|#zLine2}
        """
        ...
    def SetLineEnd(LineID: pymxs.runtime.Enum, ViewportPercentageScreenPos: pymxs.runtime.Point2) -> None:
        """
        lineID pymxs.runtime.Enums: {#xLine1|#xLine2|#yLine1|#yLine2|#zLine1|#zLine2}
        """
        ...
    def GetLineEnd(LineID: pymxs.runtime.Enum) -> pymxs.runtime.Point2:
        """
        lineID pymxs.runtime.Enums: {#xLine1|#xLine2|#yLine1|#yLine2|#zLine1|#zLine2}
        """
        ...
    def SetAnchorObject(INode: pymxs.runtime.Node) -> None: ...
    def GetAnchorObject() -> pymxs.runtime.Node: ...
    def SetHorizontalAdjustment(HorizontalAdjustment: pymxs.runtime.Float) -> None: ...
    def SetVerticalAdjustment(VerticalAdjustment: pymxs.runtime.Float) -> None: ...
    def SetDistanceAdjustment(DistanceAdjustment: pymxs.runtime.Float) -> None: ...
    def Rotate() -> None: ...
    ...
class DataViewItem:
    def HasComments() -> pymxs.runtime.Boolean: ...
    def GetComments() -> pymxs.runtime.String: ...
    def SetComments(Comments: pymxs.runtime.String) -> None: ...
    def GetName() -> pymxs.runtime.String: ...
    def SetName(Name: pymxs.runtime.String) -> None: ...
    ...
class HubFPInterface:
    PINHUB: pymxs.runtime.Boolean  
    def AddArm(AddCollarbone: pymxs.runtime.Boolean = True, AddPalm: pymxs.runtime.Boolean = True) -> None: ...
    def AddLeg(AddCollarbone: pymxs.runtime.Boolean = False, AddAnkle: pymxs.runtime.Boolean = True) -> None: ...
    def AddSpine(NumBones: pymxs.runtime.Integer = 5) -> None: ...
    def AddTail(NumBones: pymxs.runtime.Integer = 5) -> None: ...
    ...
class BakeToTexture:
    OUTPUTPATH: pymxs.runtime.String  
    AUTOCLOSEPROGRESSDIALOG: pymxs.runtime.Boolean  
    SHOWFRAMEBUFFER: pymxs.runtime.Boolean  
    ALWAYSOVERWRITEEXISTINGFILES: pymxs.runtime.Boolean  
    ALWAYSSKIPEXISTINGFILES: pymxs.runtime.Boolean  
    def GetMapsCount(Object: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetObjects() -> pymxs.runtime.NodeArray: ...
    def GetAllMaps() -> pymxs.runtime.InterfaceArray: ...
    def GetMaps(Object: pymxs.runtime.Node) -> pymxs.runtime.InterfaceArray: ...
    def BakeableMapsAreValid() -> pymxs.runtime.Boolean: ...
    def Bake(OnMapBakedCallback: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def AddMap(Object: pymxs.runtime.Node, MapTypeEnum: pymxs.runtime.Enum) -> pymxs.runtime.Interface:
        """
        mapTypeEnum pymxs.runtime.Enums: {#AlphaMap|#BlendMap|#CavityMap|#CompleteMap|#DensityMap|#DiffuseMap|#DustMap|#HeightMap|#LightMap|#NormalMap|#OcclusionMap|#ShadowMap|#SpecularMap|#SubSurfaceMap|#OverrideMap}
        """
        ...
    def AddMapByClassID(Object: pymxs.runtime.Node, ClassID: pymxs.runtime.Integer64Array) -> pymxs.runtime.Interface: ...
    def AddMapByTypeName(Object: pymxs.runtime.Node, MapTypeName: pymxs.runtime.String) -> pymxs.runtime.Interface:
        """
        mapTypeName is In and Out parameter
        """
        ...
    def AddMultipleMaps(Objects: pymxs.runtime.NodeArray, MapTypeEnums: pymxs.runtime.EnumArray) -> pymxs.runtime.InterfaceArray:
        """
        Objects is In and Out parameter
        mapTypeEnums pymxs.runtime.Enums: {#AlphaMap|#BlendMap|#CavityMap|#CompleteMap|#DensityMap|#DiffuseMap|#DustMap|#HeightMap|#LightMap|#NormalMap|#OcclusionMap|#ShadowMap|#SpecularMap|#SubSurfaceMap|#OverrideMap}
        mapTypeEnums is In and Out parameter
        """
        ...
    def AddMultipleMapsByTypeName(Objects: pymxs.runtime.NodeArray, MapTypeNames: pymxs.runtime.StringArray) -> pymxs.runtime.InterfaceArray:
        """
        Objects is In and Out parameter
        mapTypeNames is In and Out parameter
        """
        ...
    def GetMapById(MapID: pymxs.runtime.Integer) -> pymxs.runtime.Interface: ...
    def DeleteMapById(MapID: pymxs.runtime.Integer) -> None: ...
    def DeleteAllMaps() -> None: ...
    def OpenOutputLocation() -> None: ...
    def GetCompatibleMapTypes() -> pymxs.runtime.StringArray: ...
    def ShowDialog() -> None: ...
    def HideDialog() -> None: ...
    def GetOutputTo(Object: pymxs.runtime.Node) -> pymxs.runtime.Enum:
        """
        getOutputTo pymxs.runtime.Enums: {#FilesOnly|#OriginalMaterial|#DuplicateOriginalMaterial|#CreateNewMaterial|#InvalidType
        """
        ...
    def SetOutputTo(Object: pymxs.runtime.Node, Output: pymxs.runtime.Enum, Material: pymxs.runtime.Material) -> pymxs.runtime.Boolean:
        """
        output pymxs.runtime.Enums: {#FilesOnly|#OriginalMaterial|#DuplicateOriginalMaterial|#CreateNewMaterial|#InvalidType}
        """
        ...
    def GetNewMaterial(Object: pymxs.runtime.Node) -> pymxs.runtime.Material: ...
    def GetTargetMaterialSlots(Object: pymxs.runtime.Node) -> pymxs.runtime.StringArray: ...
    def ClearShellKeepBaked(Nodes: pymxs.runtime.NodeArray = ()) -> None:
        """
        Nodes is In and Out parameter
        """
        ...
    def ClearShellKeepOriginal(Nodes: pymxs.runtime.NodeArray = ()) -> None:
        """
        Nodes is In and Out parameter
        """
        ...
    ...
class ImageMotionBlur:
    ...
class CATGroupManagerFPInterface:
    NUMBONES: pymxs.runtime.Integer  
    def GetBone(Index: pymxs.runtime.Index) -> pymxs.runtime.Interface: ...
    ...
class Irgbio:
    def UseMax() -> None: ...
    def UseFlightStudio() -> None: ...
    def SetCompressed(Compression: pymxs.runtime.Boolean) -> None: ...
    def GetCompressed() -> pymxs.runtime.Boolean: ...
    def GetBytesPerChannel() -> pymxs.runtime.Integer: ...
    def SetBytesPerChannel(BytesPerChannel: pymxs.runtime.Integer) -> None: ...
    def GetAlphaChannelState() -> pymxs.runtime.Boolean: ...
    def SetAlphaChannelState(HasAlphaChannel: pymxs.runtime.Boolean) -> None: ...
    ...
class RefCheckInterface:
    def ShowBitmapPathEditor() -> None: ...
    ...
class BitmapTex:
    def Reload() -> None: ...
    def ViewImage() -> None: ...
    ...
class CATMuscleFunctions:
    DEFORMERTYPE: pymxs.runtime.String  
    MUSCLENAME: pymxs.runtime.String  
    COLOUR: pymxs.runtime.Color  
    LMR: pymxs.runtime.Integer  
    NUMVSEGS: pymxs.runtime.Integer  
    NUMUSEGS: pymxs.runtime.Integer  
    HANDLESIZE: pymxs.runtime.Float  
    HANDLESVISIBLE: pymxs.runtime.Boolean  
    MIDDLEHANDLES: pymxs.runtime.Boolean  
    @property
    def HANDLES() -> pymxs.runtime.NodeArray: ...
    @property
    def NUMCOLLISIONOBJECTS() -> pymxs.runtime.Integer: ...
    def AddCollisionObject(Sphere: pymxs.runtime.Node) -> None: ...
    def RemoveCollisionObject(Index: pymxs.runtime.Index) -> None: ...
    def GetCollisionObject(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def GetCollisionObjectDistortion(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetCollisionObjectDistortion(Index: pymxs.runtime.Index, Value: pymxs.runtime.Float) -> None: ...
    def GetCollisionObjectHardness(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetCollisionObjectHardness(Index: pymxs.runtime.Index, Value: pymxs.runtime.Float) -> None: ...
    def MoveCollisionObjectUp(Index: pymxs.runtime.Index) -> None: ...
    def MoveCollisionObjectDown(Index: pymxs.runtime.Index) -> None: ...
    def PasteMuscle(SourceMuscle: pymxs.runtime.MaxObject) -> None: ...
    ...
class PointCache:
    def Record() -> None: ...
    def SetCache() -> None: ...
    def EnableMods() -> None: ...
    def DisableMods() -> None: ...
    ...
class IXRefItem:
    SRCFILENAME: pymxs.runtime.Filename  
    SRCITEMNAME: pymxs.runtime.String  
    @property
    def XREFRECORD() -> pymxs.runtime.Interface: ...
    @property
    def UNRESOLVED() -> pymxs.runtime.Boolean: ...
    @property
    def NESTED() -> pymxs.runtime.Boolean: ...
    @property
    def RETARGETABLE() -> pymxs.runtime.Boolean: ...
    def GetSrcItem(ResolveNested: pymxs.runtime.Boolean = False) -> pymxs.runtime.MaxObject: ...
    def GetParentItems(ParentItems: pymxs.runtime.MaxObjectArray) -> pymxs.runtime.Integer:
        """
        parentItems is Out parameter
        """
        ...
    def GetRootItems(RootItems: pymxs.runtime.MaxObjectArray) -> pymxs.runtime.Integer:
        """
        rootItems is Out parameter
        """
        ...
    def GetChildItems(ChildItems: pymxs.runtime.MaxObjectArray) -> pymxs.runtime.Integer:
        """
        childItems is Out parameter
        """
        ...
    def GetNodes(XrefNodes: pymxs.runtime.NodeArray) -> None:
        """
        xrefNodes is Out parameter
        """
        ...
    ...
class IXRefCtrl:
    XREFCTRLSTATUS: pymxs.runtime.Enum  # XRefed, Local - rt.Name("")
    USEPRE2017TRANSFORMORDERINGFOR2017: pymxs.runtime.Boolean  
    def GetSourceCtrl(ResolveNestedXRef: pymxs.runtime.Boolean) -> pymxs.runtime.Control: ...
    def ResetOffsetTM() -> None: ...
    def UpdatePre() -> None: ...
    def Update() -> None: ...
    ...
class PatchDeformOps:
    def Resample() -> None: ...
    ...
class AlembicExport:
    ARCHIVETYPE: pymxs.runtime.Enum  # HDF5, Ogawa - rt.Name("")
    COORDINATESYSTEM: pymxs.runtime.Enum  # Max, Maya, ZUp, YUp - rt.Name("")
    ANIMTIMERANGE: pymxs.runtime.Enum  # CurrentFrame, TimeSlider, StartEnd - rt.Name("")
    STARTFRAME: pymxs.runtime.Integer  
    ENDFRAME: pymxs.runtime.Integer  
    SAMPLESPERFRAME: pymxs.runtime.Integer  
    HIDDEN: pymxs.runtime.Boolean  
    UVS: pymxs.runtime.Boolean  
    NORMALS: pymxs.runtime.Boolean  
    VERTEXCOLORS: pymxs.runtime.Boolean  
    EXTRACHANNELS: pymxs.runtime.Enum  # None, UV, UVW - rt.Name("")
    VELOCITY: pymxs.runtime.Boolean  
    MaterialIDS: pymxs.runtime.Boolean  
    VISIBILITY: pymxs.runtime.Boolean  
    LAYERNAME: pymxs.runtime.Boolean  
    MaterialNAME: pymxs.runtime.Boolean  
    ObjectID: pymxs.runtime.Boolean  
    CUSTOMATTRIBUTES: pymxs.runtime.Boolean  
    PARTICLEASMESH: pymxs.runtime.Boolean  
    SHAPESUFFIX: pymxs.runtime.Boolean  
    ObjectATTRIBUTES: pymxs.runtime.Boolean  
    SPLINESASNURBS: pymxs.runtime.Boolean  
    PRESERVEINSTANCES: pymxs.runtime.Boolean  
    CLEANUPMESHES: pymxs.runtime.Boolean  
    def SetDefaults() -> None:
        """
        setDefaults - no automatic redraw after invoked
        """
        ...
    def CA(Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum) -> pymxs.runtime.Integer:
        """
        CA_Count - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        CA_Name - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        CA_Animated - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        CA_Type pymxs.runtime.Enums: {#Bool|#Int|#ULong|#Float|#Point2|#Point3|#Point4|#String|#Matrix3|#Error
        CA_Type - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        CA_GetBool - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Integer:
        """
        CA_GetInt - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Float:
        """
        CA_GetFloat - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Point2:
        """
        CA_GetPoint2 - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Point3:
        """
        CA_GetPoint3 - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Point4:
        """
        CA_GetPoint4 - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        CA_GetString - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def CA(Time: pymxs.runtime.Time, Node: pymxs.runtime.Node, Location: pymxs.runtime.Enum, Index: pymxs.runtime.Index) -> pymxs.runtime.Matrix3:
        """
        CA_GetMatrix3 - no automatic redraw after invoked
        location pymxs.runtime.Enums: {#modifier|#xform|#geom}
        """
        ...
    def OA(Node: pymxs.runtime.Node) -> None:
        """
        OA_SetNode - no automatic redraw after invoked
        """
        ...
    def OA() -> pymxs.runtime.Integer:
        """
        OA_Count - no automatic redraw after invoked
        """
        ...
    def OA(Index: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        OA_Name - no automatic redraw after invoked
        """
        ...
    def OA(Index: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        OA_Type pymxs.runtime.Enums: {#Bool|#Int|#ULong|#Float|#Point2|#Point3|#Point4|#String|#Matrix3|#Error
        OA_Type - no automatic redraw after invoked
        """
        ...
    def OA(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        OA_GetBool - no automatic redraw after invoked
        """
        ...
    def OA(Index: pymxs.runtime.Index) -> pymxs.runtime.Integer:
        """
        OA_GetInt - no automatic redraw after invoked
        """
        ...
    def OA(Index: pymxs.runtime.Index) -> pymxs.runtime.Integer64:
        """
        OA_GetULong - no automatic redraw after invoked
        """
        ...
    ...
class MeshDeformOps:
    def GetSelectedVertices(WrapNodeIndex: pymxs.runtime.Index) -> pymxs.runtime.BitArray: ...
    def SetSelectVertices(WrapNodeIndex: pymxs.runtime.Index, Sel: pymxs.runtime.BitArray, Update: pymxs.runtime.Boolean) -> None: ...
    def GetNumberOfControlPoints(WrapNodeIndex: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetControlPointScale(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetControlPointScale(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index, Scale: pymxs.runtime.Point3) -> None: ...
    def GetControlPointStr(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetControlPointStr(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index, Str: pymxs.runtime.Float) -> None: ...
    def MirrorSelectedControlPoints() -> None: ...
    def BakeControlPoint() -> None: ...
    def RetrieveControlPoint() -> None: ...
    def Reset() -> None: ...
    def SetLocalScale(Axis: pymxs.runtime.Index, Scale: pymxs.runtime.Float) -> None: ...
    def SetLocalStr(Str: pymxs.runtime.Float) -> None: ...
    def GetControlPointInitialTM(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def GetControlPointCurrentTM(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def GetControlPointDist(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def GetControlPointXVert(WrapNodeIndex: pymxs.runtime.Index, Index: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def ConvertToSkin(Silent: pymxs.runtime.Boolean) -> None: ...
    def FullReset() -> None: ...
    def OutputVertexData(Node: pymxs.runtime.Node, VertexIndex: pymxs.runtime.Integer) -> None: ...
    ...
class SimpleFaceChannel:
    NAME: pymxs.runtime.String  
    @property
    def ID() -> pymxs.runtime.IntegerArray: ...
    @property
    def TYPE() -> pymxs.runtime.Enum: ...
    @property
    def NUMFACES() -> pymxs.runtime.Integer: ...
    def GetValue(Face: pymxs.runtime.Index) -> pymxs.runtime.Value:
        """
        face Validated by Validator function
        """
        ...
    def SetValue(Face: pymxs.runtime.Index, Value: pymxs.runtime.Value) -> pymxs.runtime.Boolean:
        """
        face Validated by Validator function
        Value Validated by Validator function
        """
        ...
    def GetValues() -> pymxs.runtime.Value: ...
    def SetValues(Values: pymxs.runtime.Value) -> pymxs.runtime.Boolean:
        """
        Values Validated by Validator function
        """
        ...
    def GetValueBySelection(Faces: pymxs.runtime.BitArray) -> pymxs.runtime.Value:
        """
        faces Validated by Validator function
        """
        ...
    def SetValueBySelection(Faces: pymxs.runtime.BitArray, Value: pymxs.runtime.Value) -> pymxs.runtime.Boolean:
        """
        faces Validated by Validator function
        Value Validated by Validator function
        """
        ...
    ...
class OptimzeSplineModifier:
    def MakeSpline() -> None: ...
    ...
class LightMeterInterface:
    def GetIlluminance(Time: pymxs.runtime.Time, Index: pymxs.runtime.Index, Illuminance: pymxs.runtime.Float) -> pymxs.runtime.Boolean:
        """
        illuminance is In and Out parameter
        """
        ...
    def GetDirectIlluminance(Time: pymxs.runtime.Time, Index: pymxs.runtime.Index, DirectIlluminance: pymxs.runtime.Float) -> pymxs.runtime.Boolean:
        """
        directIlluminance is In and Out parameter
        """
        ...
    def GetIndirectIlluminance(Time: pymxs.runtime.Time, Index: pymxs.runtime.Index, IndirectIlluminance: pymxs.runtime.Float) -> pymxs.runtime.Boolean:
        """
        indirectIlluminance is In and Out parameter
        """
        ...
    def GetDaylightFactor(Time: pymxs.runtime.Time, Index: pymxs.runtime.Index, DaylightFactor: pymxs.runtime.Float) -> pymxs.runtime.Boolean:
        """
        daylightFactor is In and Out parameter
        """
        ...
    def GetMeterTransform(Time: pymxs.runtime.Time, Index: pymxs.runtime.Index, Transform: pymxs.runtime.Matrix3) -> pymxs.runtime.Boolean:
        """
        transform is In and Out parameter
        """
        ...
    def GetLocalMeterPosition(Index: pymxs.runtime.Index, Position: pymxs.runtime.Point3) -> pymxs.runtime.Boolean:
        """
        position is In and Out parameter
        """
        ...
    ...
class Viewportmanager:
    def GetNumViewportEffects() -> pymxs.runtime.Integer: ...
    def GetActiveViewportEffect() -> pymxs.runtime.MaxObject: ...
    def SetViewportEffect(Effectindex: pymxs.runtime.Integer) -> pymxs.runtime.MaxObject: ...
    def GetViewportEffectName(Effectindex: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def ActivateEffect(Material: pymxs.runtime.Material, State: pymxs.runtime.Boolean) -> pymxs.runtime.Float: ...
    def IsDxStdMatEnabled() -> pymxs.runtime.Boolean: ...
    def ActivateDxStdMat(Active: pymxs.runtime.Boolean) -> None: ...
    def SaveFXFile(FileName: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    def GetActiveEffectName() -> pymxs.runtime.String: ...
    ...
class SaveEffectFile:
    def SaveAsFXFile() -> pymxs.runtime.Boolean: ...
    def DXDisplay() -> pymxs.runtime.Boolean: ...
    ...
class ICATTransformOffsetFPInterface:
    COORDSYSNODE: pymxs.runtime.Node  
    FLAGS: pymxs.runtime.BitArray  
    ...
class Iobjexp:
    def GetIniName() -> pymxs.runtime.String: ...
    def GetPresetIniName() -> pymxs.runtime.String: ...
    ...
class ShapeBooleanObject:
    def GetNumOperands() -> pymxs.runtime.Integer: ...
    def GetOperandName(Index: pymxs.runtime.Index, Nameout: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        nameout is Out parameter
        """
        ...
    def SetOperandName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetOperandType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#system|#generated}
        type is Out parameter
        """
        ...
    def GetNumChildren(Index: pymxs.runtime.Index, Count: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        count is Out parameter
        """
        ...
    def GetOperationType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#union|#intersection|#subtraction|#merge|#attach|#insert|#symmetricDifference}
        type is Out parameter
        """
        ...
    def SetOperationType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#union|#intersection|#subtraction|#merge|#attach|#insert|#symmetricDifference}
        """
        ...
    def GetOperationOption(Index: pymxs.runtime.Index, Option: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        option pymxs.runtime.Enums: {#none|#imprint|#cookie}
        option is Out parameter
        """
        ...
    def SetOperationOption(Index: pymxs.runtime.Index, Option: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        option pymxs.runtime.Enums: {#none|#imprint|#cookie}
        """
        ...
    def GetSeamType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#simple|#fillet|#chamfer}
        type is Out parameter
        """
        ...
    def SetSeamType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#simple|#fillet|#chamfer}
        """
        ...
    def GetSeamSize(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Size: pymxs.runtime.Float, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        size is Out parameter
        valid is In and Out parameter
        """
        ...
    def SetSeamSize(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Size: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetSolo(OperandIndex: pymxs.runtime.Index, Solo: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        solo is Out parameter
        """
        ...
    def SetSolo(OperandIndex: pymxs.runtime.Index, Solo: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetSoloOperandIndex(OperandIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        operandIndex is Out parameter
        """
        ...
    def GetDisable(OperandIndex: pymxs.runtime.Index, Disable: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        disable is Out parameter
        """
        ...
    def SetDisable(OperandIndex: pymxs.runtime.Index, Disable: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def HasSubdivs(OperandIndex: pymxs.runtime.Index, Time: pymxs.runtime.Time, Sub: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        sub is Out parameter
        """
        ...
    def GetSubdivs(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Subdivs: pymxs.runtime.Integer, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        subdivs is Out parameter
        valid is In and Out parameter
        """
        ...
    def SetSubdivs(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Subdivs: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def RemoveOperand(OperandIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AppendOperand(BoolNode: pymxs.runtime.Node, OperandNode: pymxs.runtime.Node, Hold: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def InsertOperand(BoolNode: pymxs.runtime.Node, OperandNode: pymxs.runtime.Node, Where: pymxs.runtime.Index, Hold: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    ...
class ISvfExporterFPInterface:
    EXPORTSELECTED: pymxs.runtime.Boolean  
    EXPORTHIDDEN: pymxs.runtime.Boolean  
    OPTIMIZEMAPS: pymxs.runtime.Boolean  
    FLATSHADING: pymxs.runtime.Boolean  
    def GetConfigFile() -> pymxs.runtime.String: ...
    def SetConfigFile(ConfigFile: pymxs.runtime.String) -> None: ...
    def ClearConfig() -> None: ...
    def SetDefaults() -> None:
        """
        setDefaults - no automatic redraw after invoked
        """
        ...
    ...
class SrrOps:
    def Start() -> None: ...
    def Stop() -> None: ...
    def Reset(ResetGeometry: pymxs.runtime.Boolean, NoWarningDialog: pymxs.runtime.Boolean) -> None: ...
    def GatherObjects(Nodes: pymxs.runtime.NodeArray, GatherSteps: pymxs.runtime.Integer) -> None:
        """
        GatherSteps Validated by Range: 0 to 1000000
        """
        ...
    def ShowLightingStatistics() -> pymxs.runtime.Boolean: ...
    def AbortLightingStatistics() -> None: ...
    def CanShowLightingStatistics() -> pymxs.runtime.Boolean: ...
    def GetPointIlluminance(Result: pymxs.runtime.Float, Node: pymxs.runtime.Node, Point: pymxs.runtime.Point3, Vertex: pymxs.runtime.Point3) -> pymxs.runtime.Boolean:
        """
        result is Out parameter
        """
        ...
    def GetPointLuminance(Result: pymxs.runtime.Float, Node: pymxs.runtime.Node, Point: pymxs.runtime.Point3, Vertex: pymxs.runtime.Point3) -> pymxs.runtime.Boolean:
        """
        result is Out parameter
        """
        ...
    def GetPointReflectance(Result: pymxs.runtime.Float, Node: pymxs.runtime.Node, Point: pymxs.runtime.Point3, Vertex: pymxs.runtime.Point3) -> pymxs.runtime.Boolean:
        """
        result is Out parameter
        """
        ...
    def GetPointTransmittance(Result: pymxs.runtime.Float, Node: pymxs.runtime.Node, Point: pymxs.runtime.Point3, Vertex: pymxs.runtime.Point3) -> pymxs.runtime.Boolean:
        """
        result is Out parameter
        """
        ...
    ...
class SrrRadiosityMesh:
    def DoesSolutionExist() -> pymxs.runtime.Boolean: ...
    def DoesMeshExist(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def IsMeshValid(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetMeshValidity(Node: pymxs.runtime.Node) -> pymxs.runtime.Interval: ...
    def GetMesh(Node: pymxs.runtime.Node) -> pymxs.runtime.Mesh: ...
    def GetMeshTMValidity(Node: pymxs.runtime.Node) -> pymxs.runtime.Interval: ...
    def GetMeshTM(Node: pymxs.runtime.Node) -> pymxs.runtime.Matrix3: ...
    ...
class RenderElementMgr:
    def AddRenderElement(Element: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def RemoveRenderElement(Element: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def RemoveAllRenderElements() -> None: ...
    def NumRenderElements() -> pymxs.runtime.Integer: ...
    def GetRenderElement(Index: pymxs.runtime.Integer) -> pymxs.runtime.MaxObject: ...
    def SetElementsActive(Active: pymxs.runtime.Boolean) -> None: ...
    def GetElementsActive() -> pymxs.runtime.Boolean: ...
    def SetDisplayElements(Display: pymxs.runtime.Boolean) -> None: ...
    def GetDisplayElements() -> pymxs.runtime.Boolean: ...
    def SetCombustionOutputEnabled(Enabled: pymxs.runtime.Boolean) -> None: ...
    def GetCombustionOutputEnabled() -> pymxs.runtime.Boolean: ...
    def SetCombustionOutputPath(Pathname: pymxs.runtime.Filename) -> None: ...
    def GetCombustionOutputPath() -> pymxs.runtime.Filename: ...
    def SetRenderElementFilename(Index: pymxs.runtime.Integer, Filename: pymxs.runtime.Filename) -> None: ...
    def GetRenderElementFilename(Index: pymxs.runtime.Integer) -> pymxs.runtime.Filename: ...
    ...
class HairEffect:
    def GetHairMode(T: pymxs.runtime.Integer = 0) -> pymxs.runtime.Integer: ...
    ...
class ChamferModifier:
    def SetVersion(Version: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        version pymxs.runtime.Enums: {#Ver2015|#Ver2016|#Ver2018|#Ver2020|#Ver2020_1|#Ver2020_2|#Ver2020_3|#Ver2021|#Ver2021_1|#Ver2021_3|#VerLatest}
        """
        ...
    ...
class IRingArrayMaster:
    NUMNODES: pymxs.runtime.Integer  # Range: 1 to 200
    CYCLES: pymxs.runtime.Float  # Range: 0.0 to 10.0
    PHASE: pymxs.runtime.Float  # Range: -1000.0 to 1000.0
    AMPLITUDE: pymxs.runtime.Float  # Range: 0.0 to 500.0
    RADIUS: pymxs.runtime.Float  # Range: 0.0 to 500.0
    def GetNodes(Nodes: pymxs.runtime.NodeArray, Context: pymxs.runtime.Enum) -> pymxs.runtime.Integer:
        """
        Nodes is In and Out parameter
        context pymxs.runtime.Enums: {#Ctx_Clone|#Ctx_Delete|#Ctx_FileMerge|#Ctx_FileSave}
        """
        ...
    def GetNode(NodeIdx: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    ...
class SweepInterface:
    def PickCustomSection() -> None: ...
    def MergeCustomSection() -> None: ...
    def ExtractCustomSection() -> None: ...
    def AlignPivot() -> None: ...
    ...
class GmakerOps:
    def ButtonCreateSeam() -> None: ...
    def SelectSplines(Sel: pymxs.runtime.BitArray) -> None: ...
    def CreateSeamFromSplines(Spline: pymxs.runtime.Integer, Orientation: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def MakeMultiSegmentFromSplines(Indices: pymxs.runtime.IntegerArray) -> pymxs.runtime.String: ...
    def GetPanelFromSpline(Spline: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetPanelMatrix(Panel: pymxs.runtime.Integer) -> pymxs.runtime.Matrix3: ...
    def SetPanelMatrix(Panel: pymxs.runtime.Integer, Matrix: pymxs.runtime.Matrix3) -> None: ...
    def MeshIT() -> None: ...
    def MeshItPreserve() -> None: ...
    def GenerateDescription() -> None: ...
    def SetPanelDeformType(Panel: pymxs.runtime.Integer, Deform: pymxs.runtime.Integer) -> None: ...
    def SetPanelCurvature(Panel: pymxs.runtime.Integer, Curvature: pymxs.runtime.Float) -> None: ...
    def SetPanelAxis(Panel: pymxs.runtime.Integer, Axis: pymxs.runtime.Integer) -> None: ...
    def SetPanelMatID(Panel: pymxs.runtime.Integer, MatID: pymxs.runtime.Integer) -> None: ...
    def SetPanelDensity(Panel: pymxs.runtime.Integer, Density: pymxs.runtime.Float) -> None: ...
    def SetPanelParams(Panel: pymxs.runtime.Integer, Density: pymxs.runtime.Float, Deform: pymxs.runtime.Integer, Curvature: pymxs.runtime.Float, Axis: pymxs.runtime.Integer, MatID: pymxs.runtime.Integer) -> None: ...
    def GetPanelDeformType(Panel: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetPanelCurvature(Panel: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def GetPanelAxis(Panel: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetPanelMatID(Panel: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetPanelDensity(Panel: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetDensity(Density: pymxs.runtime.Float) -> None: ...
    def GetDensity() -> pymxs.runtime.Float: ...
    def SetSeamTolerance(Tolerance: pymxs.runtime.Float) -> None: ...
    def GetSeamTolerance() -> pymxs.runtime.Float: ...
    def SetSeamParamsByIndex(Seam: pymxs.runtime.Integer, Bend: pymxs.runtime.Float, Enabled: pymxs.runtime.Boolean, Sewing: pymxs.runtime.Float) -> None: ...
    def SetFlatPanelMatrix(Panel: pymxs.runtime.Integer, Matrix: pymxs.runtime.Matrix3) -> None: ...
    def GetFlatPanelMatrix(Panel: pymxs.runtime.Integer) -> pymxs.runtime.Matrix3: ...
    ...
class PhysXModRBInterface:
    BAKEONSIMULATE: pymxs.runtime.Boolean  
    SKINWIDTH: pymxs.runtime.Boolean  
    SKINWIDTHVALUE: pymxs.runtime.Float  
    @property
    def ISDYNAMICEVER() -> pymxs.runtime.Boolean: ...
    def GetRBMeshCount() -> pymxs.runtime.Integer: ...
    def GetRBMeshCurrentIndex() -> pymxs.runtime.Integer: ...
    def GetRBMeshTM(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Matrix3: ...
    def SetRBMeshTM(MeshIndex: pymxs.runtime.Integer, Pose: pymxs.runtime.Matrix3) -> pymxs.runtime.Boolean:
        """
        pose is In and Out parameter
        """
        ...
    def AddRBMesh() -> pymxs.runtime.Integer: ...
    def DeleteRBMesh(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def ClipboardCopyRBMesh(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def ClipboardPasteRBMesh() -> pymxs.runtime.Boolean: ...
    def GetRBMeshName(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def SetRBMeshName(MeshIndex: pymxs.runtime.Integer, MeshName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetRBMeshType(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def SetRBMeshType(MeshIndex: pymxs.runtime.Integer, MeshType: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetRBMeshRadius(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshRadius(MeshIndex: pymxs.runtime.Integer, Radius: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshLength(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshLength(MeshIndex: pymxs.runtime.Integer, Length: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshWidth(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshWidth(MeshIndex: pymxs.runtime.Integer, Width: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshHeight(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshHeight(MeshIndex: pymxs.runtime.Integer, Height: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshCustomNode(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Node: ...
    def SetRBMeshCustomNode(MeshIndex: pymxs.runtime.Integer, CustomNode: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetRBMeshVertexLimit(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def SetRBMeshVertexLimit(MeshIndex: pymxs.runtime.Integer, VerticeLimit: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetRBMeshInflation(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshInflation(MeshIndex: pymxs.runtime.Integer, Inflation: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshShape(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Mesh: ...
    def SetRBMeshShape(MeshIndex: pymxs.runtime.Integer, NewMesh: pymxs.runtime.Mesh) -> pymxs.runtime.Boolean: ...
    def GetRBMeshOverrideMasterMat(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetRBMeshOverrideMasterMat(MeshIndex: pymxs.runtime.Integer, OverrideIt: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetRBMeshDensity(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshDensity(MeshIndex: pymxs.runtime.Integer, Density: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshMass(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshMass(MeshIndex: pymxs.runtime.Integer, Mass: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshStaticFriction(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshStaticFriction(MeshIndex: pymxs.runtime.Integer, StaticFriction: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshDynamicFriction(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshDynamicFriction(MeshIndex: pymxs.runtime.Integer, DynamicFriction: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetRBMeshBounce(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetRBMeshBounce(MeshIndex: pymxs.runtime.Integer, Bounce: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def RBMeshRegenerate(MeshIndex: pymxs.runtime.Integer) -> None: ...
    def RBMeshConvertToCustomMesh(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Node: ...
    def CalculateMassCenter() -> pymxs.runtime.Node: ...
    def CalculateCurrentVelocitySpin() -> pymxs.runtime.Node: ...
    def RBMeshCompositeGenerate(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetRBMeshCompositeMeshCount(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def ExtractCustomMesh() -> pymxs.runtime.Boolean: ...
    def RBMeshCustomNodeExtract(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def RBMeshCustomNodeUpdateFromSource(MeshIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetRBPresetMaterial(MaterialID: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    ...
class RayMeshProjIntersectOps:
    def SetNode(Node: pymxs.runtime.Node) -> None: ...
    def Build() -> None: ...
    def Free() -> None: ...
    def IntersectRay(Point: pymxs.runtime.Point3, Dir: pymxs.runtime.Point3, DoubleSided: pymxs.runtime.Boolean = False) -> pymxs.runtime.Boolean: ...
    def ProjectionFace(TriIndex: pymxs.runtime.Integer, TriBary: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def ClosestFace(Point: pymxs.runtime.Point3, Dir: pymxs.runtime.Point3 = [0,0,0], Caged: pymxs.runtime.Boolean = False, DoubleSided: pymxs.runtime.Boolean = False) -> pymxs.runtime.Boolean: ...
    def GetHitDist(HitIndex: pymxs.runtime.Integer = -1) -> pymxs.runtime.Value: ...
    def GetHitNode(HitIndex: pymxs.runtime.Integer = -1) -> pymxs.runtime.Value: ...
    def GetHitFace(HitIndex: pymxs.runtime.Integer = -1) -> pymxs.runtime.Value: ...
    def GetHitBary(HitIndex: pymxs.runtime.Integer = -1) -> pymxs.runtime.Value: ...
    def GetHitBackfacing(HitIndex: pymxs.runtime.Integer = -1) -> pymxs.runtime.Value: ...
    def GetHitPos(HitIndex: pymxs.runtime.Integer = -1) -> pymxs.runtime.Value: ...
    ...
class IXRefProxy:
    PROXYFILENAME: pymxs.runtime.Filename  
    PROXYITEMNAME: pymxs.runtime.String  
    @property
    def PROXYRECORD() -> pymxs.runtime.Interface: ...
    DISPLAYPROXY: pymxs.runtime.Boolean  
    RENDERPROXY: pymxs.runtime.Boolean  
    USELOCAL: pymxs.runtime.Boolean  
    ...
class IXRefObject:
    @property
    def ACTIVEFILENAME() -> pymxs.runtime.Filename: ...
    @property
    def ACTIVEOBJNAME() -> pymxs.runtime.String: ...
    @property
    def ACTIVERECORD() -> pymxs.runtime.Interface: ...
    def GetSourceObject(ResolveNestedXRef: pymxs.runtime.Boolean, Modifiers: pymxs.runtime.MaxObjectArray = ()) -> pymxs.runtime.MaxObject:
        """
        modifiers is Out parameter
        """
        ...
    ...
class IKChainActions:
    def Snap() -> pymxs.runtime.Boolean: ...
    def IkSnap() -> pymxs.runtime.Boolean: ...
    def FkSnap() -> pymxs.runtime.Boolean: ...
    def ToggleEnabled() -> pymxs.runtime.Boolean: ...
    def SetPrefAngles() -> pymxs.runtime.Boolean: ...
    def AssumePrefAngles() -> pymxs.runtime.Boolean: ...
    ...
class Constraints:
    def GetNode(NodeNumber: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def GetFrameNo(TargetNumber: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def SetFrameNo(TargetNumber: pymxs.runtime.Index, FrameNo: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetNumTargets() -> pymxs.runtime.Integer: ...
    def AddTarget(Target: pymxs.runtime.Node, FrameNo: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def DeleteTarget(TargetNumber: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddWorld(FrameNo: pymxs.runtime.Integer = -99999) -> pymxs.runtime.Integer: ...
    ...
class Itgaio:
    def GetColorDepth() -> pymxs.runtime.Integer: ...
    def SetColorDepth(ColorDepth: pymxs.runtime.Integer) -> None: ...
    def GetCompressed() -> pymxs.runtime.Boolean: ...
    def SetCompressed(Compression: pymxs.runtime.Boolean) -> None: ...
    def GetAlphaSplit() -> pymxs.runtime.Boolean: ...
    def SetAlphaSplit(AlphaSplit: pymxs.runtime.Boolean) -> None: ...
    def GetPreMultAlpha() -> pymxs.runtime.Boolean: ...
    def SetPreMultAlpha(PreMultAlpha: pymxs.runtime.Boolean) -> None: ...
    def GetAuthor() -> pymxs.runtime.String: ...
    def SetAuthor(Author: pymxs.runtime.String) -> None: ...
    def GetJobName() -> pymxs.runtime.String: ...
    def SetJobName(Jobname: pymxs.runtime.String) -> None: ...
    def GetComment() -> pymxs.runtime.String: ...
    def SetComment(Comment: pymxs.runtime.String) -> None: ...
    ...
class CATMuscleStrandFunctions:
    LMR: pymxs.runtime.Integer  
    HANDLESIZE: pymxs.runtime.Float  
    HANDLESVISIBLE: pymxs.runtime.Boolean  
    @property
    def HANDLES() -> pymxs.runtime.NodeArray: ...
    NUMSPHERES: pymxs.runtime.Integer  
    @property
    def CURRENTLENGTH() -> pymxs.runtime.Float: ...
    @property
    def CURRENTSCALE() -> pymxs.runtime.Float: ...
    SQUASHSTRETCH: pymxs.runtime.Boolean  
    DEFAULTLENGTH: pymxs.runtime.Float  
    SQUASHSTRETCHSCALE: pymxs.runtime.Float  
    def PasteStrand(SourceStrand: pymxs.runtime.MaxObject) -> None: ...
    def GetSphereRadius(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetSphereRadius(Index: pymxs.runtime.Index, Value: pymxs.runtime.Float) -> None: ...
    def GetSphereUStart(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetSphereUStart(Index: pymxs.runtime.Index, Value: pymxs.runtime.Float) -> None: ...
    def GetSphereUEnd(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetSphereUEnd(Index: pymxs.runtime.Index, Value: pymxs.runtime.Float) -> None: ...
    ...
class Ibmpio:
    def GetType() -> pymxs.runtime.Enum:
        """
        getType pymxs.runtime.Enums: {#noType|#paletted|#true24
        """
        ...
    def SetType(Type: pymxs.runtime.Enum) -> None:
        """
        type pymxs.runtime.Enums: {#noType|#paletted|#true24}
        """
        ...
    ...
class IExprCtrl:
    THROWONERROR: pymxs.runtime.Boolean  
    def SetExpression(Expression: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetExpression() -> pymxs.runtime.String: ...
    def NumScalars() -> pymxs.runtime.Integer: ...
    def NumVectors() -> pymxs.runtime.Integer: ...
    def AddScalarTarget(Name: pymxs.runtime.String, Target: pymxs.runtime.Value, Offset: pymxs.runtime.Time, Owner: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def AddVectorTarget(Name: pymxs.runtime.String, Target: pymxs.runtime.Value, Offset: pymxs.runtime.Time, Owner: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def AddVectorNode(Name: pymxs.runtime.String, Node: pymxs.runtime.Node, Offset: pymxs.runtime.Time = 0) -> pymxs.runtime.Boolean: ...
    def AddScalarConstant(Name: pymxs.runtime.String, Constant: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def AddVectorConstant(Name: pymxs.runtime.String, Constant: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def SetScalarTarget(Which: pymxs.runtime.Value, Target: pymxs.runtime.Value, Owner: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def SetVectorTarget(Which: pymxs.runtime.Value, Target: pymxs.runtime.Value, Owner: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def SetVectorNode(Which: pymxs.runtime.Value, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetScalarConstant(Which: pymxs.runtime.Value, Constant: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SetVectorConstant(Which: pymxs.runtime.Value, Constant: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def DeleteVariable(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def RenameVariable(OldName: pymxs.runtime.String, NewName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetDescription() -> pymxs.runtime.String: ...
    def SetDescription(Description: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetOffset(Name: pymxs.runtime.String) -> pymxs.runtime.Time: ...
    def SetOffset(Name: pymxs.runtime.String, Offset: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def Update() -> None: ...
    def VariableExists(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetScalarConstant(Which: pymxs.runtime.Value) -> pymxs.runtime.Float: ...
    def GetScalarTarget(Which: pymxs.runtime.Value, AsController: pymxs.runtime.Boolean = False) -> pymxs.runtime.Value: ...
    def GetVectorConstant(Which: pymxs.runtime.Value) -> pymxs.runtime.Point3: ...
    def GetVectorTarget(Which: pymxs.runtime.Value, AsController: pymxs.runtime.Boolean = False) -> pymxs.runtime.Value: ...
    def GetVectorNode(Which: pymxs.runtime.Value) -> pymxs.runtime.Node: ...
    def GetScalarValue(Which: pymxs.runtime.Value) -> pymxs.runtime.Float: ...
    def GetVectorValue(Which: pymxs.runtime.Value) -> pymxs.runtime.Point3: ...
    def GetValue(Name: pymxs.runtime.String) -> pymxs.runtime.Value: ...
    def GetScalarType(Which: pymxs.runtime.Value) -> pymxs.runtime.Enum:
        """
        GetScalarType pymxs.runtime.Enums: {#unknown|#scalarTarget|#scalarConstant|#vectorTarget|#vectorConstant|#vectorNode
        """
        ...
    def GetVectorType(Which: pymxs.runtime.Value) -> pymxs.runtime.Enum:
        """
        GetVectorType pymxs.runtime.Enums: {#unknown|#scalarTarget|#scalarConstant|#vectorTarget|#vectorConstant|#vectorNode
        """
        ...
    def GetValueType(Name: pymxs.runtime.String) -> pymxs.runtime.Enum:
        """
        GetValueType pymxs.runtime.Enums: {#unknown|#scalarTarget|#scalarConstant|#vectorTarget|#vectorConstant|#vectorNode
        """
        ...
    def GetScalarName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetVectorName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetScalarIndex(Name: pymxs.runtime.String) -> pymxs.runtime.Index: ...
    def GetVectorIndex(Name: pymxs.runtime.String) -> pymxs.runtime.Index: ...
    def PrintDetails() -> pymxs.runtime.String: ...
    ...
class Ijpegio:
    def GetQuality() -> pymxs.runtime.Integer: ...
    def SetQuality(Quality: pymxs.runtime.Integer) -> None: ...
    def GetSmoothing() -> pymxs.runtime.Integer: ...
    def SetSmoothing(Smoothing: pymxs.runtime.Integer) -> None: ...
    ...
class EditNormalsMod:
    SELLEVEL: pymxs.runtime.Enum  # pymxs.runtime.Object, Normal, Vertex, Edge, Face - rt.Name("")
    def Move(Offset: pymxs.runtime.Point3) -> pymxs.runtime.Boolean:
        """
        offset is In and Out parameter
        """
        ...
    def Rotate(Rotation: pymxs.runtime.Quat) -> pymxs.runtime.Boolean:
        """
        rotation is In and Out parameter
        """
        ...
    def Break(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node, ToAverage: pymxs.runtime.Boolean = False) -> pymxs.runtime.Boolean: ...
    def Unify(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node, ToAverage: pymxs.runtime.Boolean = False) -> pymxs.runtime.Boolean: ...
    def Reset(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def Specify(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def MakeExplicit(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def Copy(NormalID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def Paste(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def Average(UseThresh: pymxs.runtime.Boolean, Threshold: pymxs.runtime.Float, Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def AverageGlobal(UseThresh: pymxs.runtime.Boolean = False, Threshold: pymxs.runtime.Float = 0.0) -> pymxs.runtime.Boolean: ...
    def AverageTwo(Node: pymxs.runtime.Node, NormalID: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetSelection(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def SetSelection(NewSelection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        newSelection is In and Out parameter
        """
        ...
    def Select(NewSelection: pymxs.runtime.BitArray, Invert: pymxs.runtime.Boolean, Select: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        newSelection is In and Out parameter
        """
        ...
    def ConvertVertexSelection(VertexSelection: pymxs.runtime.BitArray, NormalSelection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        vertexSelection is In and Out parameter
        normalSelection is In and Out parameter
        """
        ...
    def ConvertEdgeSelection(EdgeSelection: pymxs.runtime.BitArray, NormalSelection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        edgeSelection is In and Out parameter
        normalSelection is In and Out parameter
        """
        ...
    def ConvertFaceSelection(FaceSelection: pymxs.runtime.BitArray, NormalSelection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        faceSelection is In and Out parameter
        normalSelection is In and Out parameter
        """
        ...
    def GetNumNormals(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetNormal(NormalIndex: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3: ...
    def SetNormal(NormalIndex: pymxs.runtime.Index, NormalValue: pymxs.runtime.Point3, Node: pymxs.runtime.Node) -> None:
        """
        normalValue is In and Out parameter
        """
        ...
    def GetNormalExplicit(NormalIndex: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetNormalExplicit(NormalIndex: pymxs.runtime.Index, Explicit: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def GetNumFaces(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetFaceDegree(Face: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetNormalID(Face: pymxs.runtime.Index, Corner: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def SetNormalID(Face: pymxs.runtime.Index, Corner: pymxs.runtime.Index, NormalID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def GetFaceNormalSpecified(Face: pymxs.runtime.Index, Corner: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetFaceNormalSpecified(Face: pymxs.runtime.Index, Corner: pymxs.runtime.Index, Specified: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None: ...
    def GetNumVertices(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetVertexID(Face: pymxs.runtime.Index, Corner: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetVertex(VertexID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3: ...
    def GetNumEdges(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def GetEdgeID(Face: pymxs.runtime.Index, Side: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetFaceEdgeSide(Face: pymxs.runtime.Index, Edge: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetEdgeVertex(Edge: pymxs.runtime.Index, End: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetEdgeFace(Edge: pymxs.runtime.Index, Side: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetEdgeNormal(Edge: pymxs.runtime.Index, End: pymxs.runtime.Index, Side: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def RebuildNormals(Node: pymxs.runtime.Node) -> None: ...
    def RecomputeNormals(Node: pymxs.runtime.Node) -> None: ...
    ...
class IRLAio:
    ColorDEPTH: pymxs.runtime.Integer  
    ALPHA: pymxs.runtime.Boolean  
    PREMULTALPHA: pymxs.runtime.Boolean  
    DESCRIPTION: pymxs.runtime.String  
    AUTHOR: pymxs.runtime.String  
    ZCHANNEL: pymxs.runtime.Boolean  
    MTLIDCHANNEL: pymxs.runtime.Boolean  
    NodeIDCHANNEL: pymxs.runtime.Boolean  
    UVCHANNEL: pymxs.runtime.Boolean  
    NORMALCHANNEL: pymxs.runtime.Boolean  
    REALPIXCHANNEL: pymxs.runtime.Boolean  
    COVERAGECHANNEL: pymxs.runtime.Boolean  
    ...
class IRPFio:
    ColorDEPTH: pymxs.runtime.Integer  
    ALPHA: pymxs.runtime.Boolean  
    PREMULTALPHA: pymxs.runtime.Boolean  
    DESCRIPTION: pymxs.runtime.String  
    AUTHOR: pymxs.runtime.String  
    ZCHANNEL: pymxs.runtime.Boolean  
    MTLIDCHANNEL: pymxs.runtime.Boolean  
    NodeIDCHANNEL: pymxs.runtime.Boolean  
    UVCHANNEL: pymxs.runtime.Boolean  
    NORMALCHANNEL: pymxs.runtime.Boolean  
    REALPIXCHANNEL: pymxs.runtime.Boolean  
    COVERAGECHANNEL: pymxs.runtime.Boolean  
    NodeRENDERIDCHANNEL: pymxs.runtime.Boolean  
    ColorCHANNEL: pymxs.runtime.Boolean  
    TRANSPCHANNEL: pymxs.runtime.Boolean  
    VELOCCHANNEL: pymxs.runtime.Boolean  
    WEIGHTCHANNEL: pymxs.runtime.Boolean  
    MASKCHANNEL: pymxs.runtime.Boolean  
    ...
class ExposureMaterialControl:
    NOEXPOSURECONTROL: pymxs.runtime.Boolean  
    EXPOSURECONTROLINVERTSELFILLUM: pymxs.runtime.Boolean  
    EXPOSURECONTROLINVERTREFLECTION: pymxs.runtime.Boolean  
    EXPOSURECONTROLINVERTREFRACTION: pymxs.runtime.Boolean  
    ...
class ICATUnitsCtrlFPInterface:
    CATPARENTNODE: pymxs.runtime.Node  
    ...
class Itifio:
    def GetType() -> pymxs.runtime.Enum:
        """
        getType pymxs.runtime.Enums: {#mono|#color|#logL|#logLUV|#color16
        """
        ...
    def SetType(Type: pymxs.runtime.Enum) -> None:
        """
        type pymxs.runtime.Enums: {#mono|#color|#logL|#logLUV|#color16}
        """
        ...
    def GetShowControl() -> pymxs.runtime.Enum:
        """
        getShowControl pymxs.runtime.Enums: {#true|#false
        """
        ...
    def SetShowControl(ShowControl: pymxs.runtime.Enum) -> None:
        """
        showControl pymxs.runtime.Enums: {#true|#false}
        """
        ...
    def GetCompression() -> pymxs.runtime.Enum:
        """
        getCompression pymxs.runtime.Enums: {#none|#packBits
        """
        ...
    def SetCompression(Compression: pymxs.runtime.Enum) -> None:
        """
        compression pymxs.runtime.Enums: {#none|#packBits}
        """
        ...
    def GetAlpha() -> pymxs.runtime.Enum:
        """
        getAlpha pymxs.runtime.Enums: {#true|#false
        """
        ...
    def SetAlpha(OnOff: pymxs.runtime.Enum) -> None:
        """
        onOff pymxs.runtime.Enums: {#true|#false}
        """
        ...
    def GetDPI() -> pymxs.runtime.Float: ...
    def SetDPI(Dpi: pymxs.runtime.Float) -> None: ...
    ...
class MclothOps:
    def NumberVertices() -> pymxs.runtime.Integer: ...
    def SelectVertices(Sel: pymxs.runtime.BitArray) -> None: ...
    def GetSelectedVertices() -> pymxs.runtime.BitArray: ...
    def MakeConstraint(Groupname: pymxs.runtime.String, Type: pymxs.runtime.String, Target: pymxs.runtime.Node) -> None: ...
    def MakePointGroup(Vertex: pymxs.runtime.BitArray, Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def DeletePointgroup(Groupname: pymxs.runtime.String) -> None: ...
    def InitPointgroup(Groupname: pymxs.runtime.String) -> None: ...
    def DetachPointgroup(Groupname: pymxs.runtime.String) -> None: ...
    def CaptureInitialState() -> None: ...
    def ResetInitialState() -> None: ...
    def CaptureTargetState() -> None: ...
    def ResetTargetState() -> None: ...
    def GetGroupParamBlock(Groupname: pymxs.runtime.String) -> pymxs.runtime.ParamBlock2: ...
    def MakeTear(Vertex: pymxs.runtime.BitArray, Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def ClearTears() -> None: ...
    def CreatePreset(Presetname: pymxs.runtime.String) -> None: ...
    def LoadPreset(Presetname: pymxs.runtime.String) -> None: ...
    def GetNumberPointGroups() -> pymxs.runtime.Integer: ...
    def GetGroupConstraintType(Groupname: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetGroupNameByIndex(Groupindex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetGroupParamBlockByIndex(Groupindex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    ...
class ClothOps:
    def NumberVertices(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SelectVertices(Sel: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None: ...
    def GetSelectedVertices(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray: ...
    def MakeConstraint(Groupname: pymxs.runtime.String, Type: pymxs.runtime.String, Target: pymxs.runtime.Node) -> None: ...
    def MakePointGroup(Vertex: pymxs.runtime.BitArray, Node: pymxs.runtime.Node, Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def DeletePointgroup(Groupname: pymxs.runtime.String) -> None: ...
    def InitPointgroup(Groupname: pymxs.runtime.String) -> None: ...
    def DetachPointgroup(Groupname: pymxs.runtime.String) -> None: ...
    def MakeGroupConstraint(Groupname: pymxs.runtime.String, Target: pymxs.runtime.String) -> None: ...
    def Simulate(Show: pymxs.runtime.Boolean) -> None: ...
    def SimulateLocal(Stop: pymxs.runtime.Integer, Param: pymxs.runtime.Float, Damped: pymxs.runtime.Boolean) -> None: ...
    def StopLocalSimulation() -> None: ...
    def EraseSimulation() -> None: ...
    def TruncateSimulation() -> None: ...
    def SetInitialState(Node: pymxs.runtime.Node) -> None: ...
    def ResetState(Node: pymxs.runtime.Node) -> None: ...
    def DelObjectCache(Node: pymxs.runtime.Node) -> None: ...
    def SetObjectType(Node: pymxs.runtime.Node, Type: pymxs.runtime.Integer, UpdateSim: pymxs.runtime.Boolean) -> None: ...
    def GetObjectType(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SetObjectProperty(Node: pymxs.runtime.Node, Property: pymxs.runtime.String, Value: pymxs.runtime.Value) -> None: ...
    def ShowObjectProperties() -> pymxs.runtime.StringArray: ...
    def GrabState(Node: pymxs.runtime.Node) -> None: ...
    def AddForceField(Node: pymxs.runtime.Node) -> None: ...
    def RemoveForceField(Node: pymxs.runtime.Node) -> None: ...
    def FlagParticles(Sel: pymxs.runtime.BitArray) -> None: ...
    def ExportCache(Node: pymxs.runtime.Node, Filename: pymxs.runtime.String) -> None: ...
    def ImportCache(Node: pymxs.runtime.Node, Filename: pymxs.runtime.String) -> None: ...
    def LoadCache(Node: pymxs.runtime.Node) -> None: ...
    def LoadAllCaches() -> None: ...
    def SaveCache(Node: pymxs.runtime.Node) -> None: ...
    def SaveExtraCache(Node: pymxs.runtime.Node) -> None: ...
    def SaveAllCaches() -> None: ...
    def SaveAllExtraCaches() -> None: ...
    def GetObjectParamBlock(Node: pymxs.runtime.Node) -> pymxs.runtime.ParamBlock2: ...
    def GetGroupParamBlock(Groupname: pymxs.runtime.String) -> pymxs.runtime.ParamBlock2: ...
    def MakeTear(Vertex: pymxs.runtime.BitArray, Node: pymxs.runtime.Node, Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def ClearTears(Node: pymxs.runtime.Node) -> None: ...
    def GetObjectProperty(Node: pymxs.runtime.Node, Property: pymxs.runtime.String) -> pymxs.runtime.Value: ...
    def GetNumberPointGroups() -> pymxs.runtime.Integer: ...
    def GetGroupConstraintType(Groupname: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetGroupNameByIndex(Groupindex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetGroupParamBlockByIndex(Groupindex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetNumberObjects() -> pymxs.runtime.Integer: ...
    def GetGroupTargetNode(Groupname: pymxs.runtime.String) -> pymxs.runtime.Node: ...
    ...
class Fopenexr:
    def IsAutoAddRenderElements() -> pymxs.runtime.Boolean: ...
    def SetAutoAddRenderElements(Add: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetSaveScanline() -> pymxs.runtime.Boolean: ...
    def SetSaveScanline(SaveScanline: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetTileSize() -> pymxs.runtime.Integer: ...
    def SetTileSize(TileSize: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetSaveRegion() -> pymxs.runtime.Boolean: ...
    def SetSaveRegion(SaveRegion: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetSaveCameraAttributes() -> pymxs.runtime.Boolean: ...
    def SetSaveCameraAttributes(SaveCamera: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetCompression() -> pymxs.runtime.Integer: ...
    def SetCompression(Compression: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def NumLayers() -> pymxs.runtime.Integer: ...
    def GetLayerType(Layer: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetLayerName(Layer: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def GetLayerOutputName(Layer: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def GetLayerOutputType(Layer: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetLayerOutputFormat(Layer: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def AddRenderElementLayer(Name: pymxs.runtime.String, Outname: pymxs.runtime.String, Type: pymxs.runtime.Integer, Format: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        name is In and Out parameter
        outname is In and Out parameter
        """
        ...
    def DelRenderElementLayer(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        name is In and Out parameter
        """
        ...
    def AddRenderElementLayerRef(Element: pymxs.runtime.MaxObject, Outname: pymxs.runtime.String, Type: pymxs.runtime.Integer, Format: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        outname is In and Out parameter
        """
        ...
    def DelRenderElementLayerRef(Element: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def AddGBufferChannelLayer(Channel: pymxs.runtime.Integer, Name: pymxs.runtime.String, Type: pymxs.runtime.Integer, Format: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        name is In and Out parameter
        """
        ...
    def DelGBufferChannelLayer(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        name is In and Out parameter
        """
        ...
    def SetLayerName(Layer: pymxs.runtime.Integer, Name: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        name is In and Out parameter
        """
        ...
    def SetLayerOutputName(Layer: pymxs.runtime.Integer, Name: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        name is In and Out parameter
        """
        ...
    def SetLayerOutputType(Layer: pymxs.runtime.Integer, Type: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetLayerOutputFormat(Layer: pymxs.runtime.Integer, Format: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def NumAttributes() -> pymxs.runtime.Integer: ...
    def GetAttributeName(Attribute: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def GetAttributeType(Attribute: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetAttributeStringValue(Attribute: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def GetAttributeFloatValue(Attribute: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def GetAttributeIntValue(Attribute: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def AddStringAttribute(Attribute: pymxs.runtime.String, Value: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        attribute is In and Out parameter
        Value is In and Out parameter
        """
        ...
    def AddFloatAttribute(Attribute: pymxs.runtime.String, Value: pymxs.runtime.Float) -> pymxs.runtime.Boolean:
        """
        attribute is In and Out parameter
        """
        ...
    def AddIntAttribute(Attribute: pymxs.runtime.String, Value: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        attribute is In and Out parameter
        """
        ...
    def DelAttribute(Attribute: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        attribute is In and Out parameter
        """
        ...
    def GetAttributeMatrixValue(Attribute: pymxs.runtime.Integer) -> pymxs.runtime.Matrix3: ...
    def AddMatrixAttribute(Attribute: pymxs.runtime.String, Value: pymxs.runtime.Matrix3) -> pymxs.runtime.Boolean:
        """
        attribute is In and Out parameter
        """
        ...
    def SetDefaults() -> pymxs.runtime.Boolean: ...
    def DelAllAppDatas() -> pymxs.runtime.Boolean: ...
    def DelAllRenderElementLayers() -> pymxs.runtime.Integer: ...
    def DelAllGBufferLayers() -> pymxs.runtime.Integer: ...
    def DelAllAttributes() -> pymxs.runtime.Integer: ...
    def LoadEXRParams(ExrName: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        exrName is In and Out parameter
        """
        ...
    def SaveEXRParams(ExrName: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        exrName is In and Out parameter
        """
        ...
    def GetRenderElementByLayer(Layer: pymxs.runtime.Integer) -> pymxs.runtime.MaxObject: ...
    def GetLayerEnabled(Layer: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    ...
class Ipngio:
    def GetType() -> pymxs.runtime.Enum:
        """
        getType pymxs.runtime.Enums: {#paletted|#true24|#true48|#gray8|#gray16
        """
        ...
    def SetType(Type: pymxs.runtime.Enum) -> None:
        """
        type pymxs.runtime.Enums: {#paletted|#true24|#true48|#gray8|#gray16}
        """
        ...
    def GetAlpha() -> pymxs.runtime.Boolean: ...
    def SetAlpha(UseAlpha: pymxs.runtime.Boolean) -> None: ...
    def GetInterlaced() -> pymxs.runtime.Boolean: ...
    def SetInterlaced(Interlaced: pymxs.runtime.Boolean) -> None: ...
    ...
class CreaseSetMod:
    def SelectSetsNone() -> None: ...
    def SelectSetsAll() -> None: ...
    def SelectSetsInvert() -> None: ...
    def DoSelectByAngle() -> None: ...
    def ShrinkSelection() -> None: ...
    def GrowSelection() -> None: ...
    def RingSelection() -> None: ...
    def LoopSelection() -> None: ...
    def MakeUniqueSetName(Namein: pymxs.runtime.String, Type: pymxs.runtime.Integer, Nameout: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        nameout is Out parameter
        """
        ...
    def GetSetIndex(Name: pymxs.runtime.String) -> pymxs.runtime.Index: ...
    def CreateSet(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def SelectSet(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetNumSelectedSets() -> pymxs.runtime.Integer: ...
    def GetNumEmptySets() -> pymxs.runtime.Integer: ...
    def GetNumSets() -> pymxs.runtime.Integer: ...
    def GetSetNameByIndex(Index: pymxs.runtime.Index, Nameout: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        nameout is Out parameter
        """
        ...
    def SelectSetElements(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def AddSelectionToSet(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def SubtractSelectionFromSet(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def UpdateSetFromSelection(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def RenameSet(OldName: pymxs.runtime.String, NewName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def DeleteCreaseSet(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def DeleteSelectedSets() -> pymxs.runtime.Boolean: ...
    def DeleteEmptySets() -> pymxs.runtime.Boolean: ...
    def CountSetElements(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetSetType(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def CountAutoCreaseSets() -> pymxs.runtime.Integer: ...
    def AutoGenerateSets() -> pymxs.runtime.Boolean: ...
    def SelectAllNodes() -> None: ...
    def SetVertSelection(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetEdgeSelection(Selection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def GetVertSelection(Node: pymxs.runtime.Node, Selout: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean:
        """
        selout is Out parameter
        """
        ...
    def GetEdgeSelection(Node: pymxs.runtime.Node, Selout: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean:
        """
        selout is Out parameter
        """
        ...
    def GetNumVertSets() -> pymxs.runtime.Integer: ...
    def GetNumEdgeSets() -> pymxs.runtime.Integer: ...
    ...
class DataViewGroup:
    def HasComments() -> pymxs.runtime.Boolean: ...
    def GetComments() -> pymxs.runtime.String: ...
    def SetComments(Comments: pymxs.runtime.String) -> None: ...
    def GetName() -> pymxs.runtime.String: ...
    def SetName(Name: pymxs.runtime.String) -> None: ...
    ...
class IAssembly:
    ASSEMBLYMEMBER: pymxs.runtime.Boolean  
    ASSEMBLYHEAD: pymxs.runtime.Boolean  
    ASSEMBLYMEMBEROPEN: pymxs.runtime.Boolean  
    ASSEMBLYHEADOPEN: pymxs.runtime.Boolean  
    ASSEMBLYBBOXDISPLAY: pymxs.runtime.Boolean  
    ...
class INodeGIProperties:
    ISGIEXCLUDED: pymxs.runtime.Boolean  
    ISGIOCCLUDER: pymxs.runtime.Boolean  
    ISGIRECEIVER: pymxs.runtime.Boolean  
    ISGIDIFFUSE: pymxs.runtime.Boolean  
    ISGISPECULAR: pymxs.runtime.Boolean  
    GIUSEGLOBALMESHING: pymxs.runtime.Boolean  
    GIMESHINGENABLED: pymxs.runtime.Boolean  
    NBGIREFINESTEPS: pymxs.runtime.Integer  # Range: 0 to 65535
    NBGIREFINESTEPSDONE: pymxs.runtime.Integer  # Range: 0 to 65535
    GIMESHSIZE: pymxs.runtime.WorldUnits  # Range: 0.01 to 1e+09
    ISGIEXCLUDEDFROMREGATHER: pymxs.runtime.Boolean  
    STOREILLUMTOMESH: pymxs.runtime.Boolean  
    GIBYLAYER: pymxs.runtime.Boolean  
    GIRAYMULT: pymxs.runtime.Float  
    GIUSEADAPTIVESUBDIVISION: pymxs.runtime.Boolean  
    GIMINMESHSIZE: pymxs.runtime.Float  
    GIINITIALMESHSIZE: pymxs.runtime.Float  
    GICONTRASTTHRESHOLD: pymxs.runtime.Float  
    ...
class INode:
    BONEENABLE: pymxs.runtime.Boolean  
    POSTASKWEIGHT: pymxs.runtime.Float  
    ROTTASKWEIGHT: pymxs.runtime.Float  
    BONEAUTOALIGN: pymxs.runtime.Boolean  
    BONEFREEZELENGTH: pymxs.runtime.Boolean  
    BONESCALETYPE: pymxs.runtime.Enum  # scale, squash, none - rt.Name("")
    @property
    def STRETCHTM() -> pymxs.runtime.Matrix3: ...
    BONEAXIS: pymxs.runtime.Enum  # X, Y, Z - rt.Name("")
    BONEAXISFLIP: pymxs.runtime.Boolean  
    PRIMARYVISIBILITY: pymxs.runtime.Boolean  
    SECONDARYVISIBILITY: pymxs.runtime.Boolean  
    APPLYATMOSPHERICS: pymxs.runtime.Boolean  
    VERTEXCOLORTYPE: pymxs.runtime.Enum  # pymxs.runtime.Color, illum, alpha, Color_plus_illum, soft_select, map_channel - rt.Name("")
    SHOWVERTEXCOLORS: pymxs.runtime.Integer  
    SHADEVERTEXCOLORS: pymxs.runtime.Integer  
    VERTEXCOLORMAPCHANNEL: pymxs.runtime.Integer  
    @property
    def HANDLE() -> pymxs.runtime.Integer: ...
    @property
    def ISSCENEXREFNODE() -> pymxs.runtime.Boolean: ...
    @property
    def POSINPARENT() -> pymxs.runtime.Point3: ...
    @property
    def ROTINPARENT() -> pymxs.runtime.Point3: ...
    @property
    def SCALEINPARENT() -> pymxs.runtime.Point3: ...
    @property
    def SCALEORIENTINPARENT() -> pymxs.runtime.Quat: ...
    @property
    def WASLOADEDBYLASTMERGE() -> pymxs.runtime.Boolean: ...
    OVERRIDEMATERIALENABLED: pymxs.runtime.Boolean  
    def SetBoneEnable(OnOff: pymxs.runtime.Boolean, Time: pymxs.runtime.Time) -> None: ...
    def RealignBoneToChild() -> None: ...
    def ResetBoneStretch() -> None: ...
    ...
class INodeLayerProperties:
    @property
    def LAYER() -> pymxs.runtime.Interface: ...
    DISPLAYBYLAYER: pymxs.runtime.Boolean  
    RENDERBYLAYER: pymxs.runtime.Boolean  
    MOTIONBYLAYER: pymxs.runtime.Boolean  
    ColorBYLAYER: pymxs.runtime.Boolean  
    GLOBALILLUMINATIONBYLAYER: pymxs.runtime.Boolean  
    ...
class INodeBakeProperties:
    BAKEENABLED: pymxs.runtime.Boolean  
    BAKECHANNEL: pymxs.runtime.Integer  
    NDILATIONS: pymxs.runtime.Integer  
    FLAGS: pymxs.runtime.Integer  
    SURFACEAREA: pymxs.runtime.Float  
    AREASCALE: pymxs.runtime.Float  
    ACTIVEORIGINX: pymxs.runtime.Float  
    ACTIVEORIGINY: pymxs.runtime.Float  
    ACTIVEWIDTH: pymxs.runtime.Float  
    ACTIVEHEIGHT: pymxs.runtime.Float  
    def AddBakeElement(Element: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def RemoveBakeElement(Element: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def RemoveBakeElementByIndex(ElementIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def RemoveBakeElementByName(ElementName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def RemoveAllBakeElements() -> None: ...
    def NumBakeElements() -> pymxs.runtime.Integer: ...
    def GetBakeElement(Index: pymxs.runtime.Index) -> pymxs.runtime.MaxObject: ...
    def FindByName(ElementName: pymxs.runtime.String) -> pymxs.runtime.Index: ...
    def RenderWidth() -> pymxs.runtime.Integer: ...
    def RenderHeight() -> pymxs.runtime.Integer: ...
    def EffectiveEnable() -> pymxs.runtime.Boolean: ...
    def NumElementParams(Element: pymxs.runtime.MaxObject) -> pymxs.runtime.Integer: ...
    def ParamName(Element: pymxs.runtime.MaxObject, ParamIndex: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def ParamType(Element: pymxs.runtime.MaxObject, ParamIndex: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def ParamValue(Element: pymxs.runtime.MaxObject, ParamIndex: pymxs.runtime.Index) -> pymxs.runtime.Value: ...
    def SetParamValue(Element: pymxs.runtime.MaxObject, ParamIndex: pymxs.runtime.Index, ParamValue: pymxs.runtime.Value) -> None: ...
    def ParamValueMin(Element: pymxs.runtime.MaxObject, ParamIndex: pymxs.runtime.Index) -> pymxs.runtime.Value: ...
    def ParamValueMax(Element: pymxs.runtime.MaxObject, ParamIndex: pymxs.runtime.Index) -> pymxs.runtime.Value: ...
    def FindParam(Element: pymxs.runtime.MaxObject, ParamName: pymxs.runtime.String) -> pymxs.runtime.Index: ...
    def GetBackgroundColor(Element: pymxs.runtime.MaxObject) -> pymxs.runtime.Color: ...
    def SetBackgroundColor(Element: pymxs.runtime.MaxObject, Color: pymxs.runtime.Color) -> None: ...
    ...
class SkinPose:
    SKINPOS: pymxs.runtime.Point3  
    SKINROT: pymxs.runtime.Point3  
    SKINSCALE: pymxs.runtime.Point3  
    SKINSCALEORIENT: pymxs.runtime.Quat  
    SKINPOSENABLED: pymxs.runtime.Boolean  
    SKINROTENABLED: pymxs.runtime.Boolean  
    SKINSCALEENABLED: pymxs.runtime.Boolean  
    SKINPOSEMODE: pymxs.runtime.Boolean  
    def SetSkinPose() -> None: ...
    def AssumeSkinPose() -> None: ...
    ...
class INodeBakeProjProperties:
    ENABLED: pymxs.runtime.Boolean  
    PROJECTIONMOD: pymxs.runtime.MaxObject  
    PROJECTIONMODTARGET: pymxs.runtime.String  
    CROPALPHA: pymxs.runtime.Boolean  
    PROJSPACE: pymxs.runtime.Enum  # raytrace, uvw_match - rt.Name("")
    NORMALSPACE: pymxs.runtime.Enum  # world, screen, local, tangent - rt.Name("")
    TANGENTYDIR: pymxs.runtime.Enum  # Y_Up, Y_Down - rt.Name("")
    TANGENTXDIR: pymxs.runtime.Enum  # X_Right, X_Left - rt.Name("")
    USECAGE: pymxs.runtime.Boolean  
    RAYOFFSET: pymxs.runtime.Float  
    HITRESOLVEMODE: pymxs.runtime.Enum  # closest, furthest - rt.Name("")
    HITMATCHMTLID: pymxs.runtime.Boolean  
    HITWORKINGMODEL: pymxs.runtime.Boolean  
    WARNRAYMISS: pymxs.runtime.Boolean  
    RAYMISSCOLOR: pymxs.runtime.Color  
    HEIGHTMAPMIN: pymxs.runtime.Float  
    HEIGHTMAPMAX: pymxs.runtime.Float  
    HEIGHTBUFMIN: pymxs.runtime.Float  
    HEIGHTBUFMAX: pymxs.runtime.Float  
    BAKEOBJECTLEVEL: pymxs.runtime.Boolean  
    BAKESUBOBJLEVELS: pymxs.runtime.Boolean  
    USEOBJECTBAKEFORMTL: pymxs.runtime.Boolean  
    PROPORTIONALOUTPUT: pymxs.runtime.Boolean  
    SUBOBJBAKECHANNEL: pymxs.runtime.Integer  
    ...
class INodeDisplayProperties:
    NEVERDEGRADE: pymxs.runtime.Boolean  
    ...
class INodeShadingProperties:
    VIEWPORTSHADOWCASTING: pymxs.runtime.Boolean  
    VIEWPORTILLUMINATION: pymxs.runtime.Boolean  
    LOCKEDVIEWPORTILLUMINATION: pymxs.runtime.Boolean  
    ...
class OSDModOps:
    def GPUTestWindow() -> None: ...
    ...
class IrotWindup:
    ROTWINDUP: pymxs.runtime.Boolean  
    ...
class MaxFluidLiquidSolver:
    def RunSolve() -> pymxs.runtime.Boolean: ...
    def PauseSolve(Wait: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def StopSolve(Wait: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def IsSolveRunning() -> pymxs.runtime.Boolean: ...
    def ExportSolve(StartFrame: pymxs.runtime.Integer, EndFrame: pymxs.runtime.Integer, Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def ImportAndRunSolve(Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def RenameSolve(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def ClearCaches(Liquid: pymxs.runtime.Boolean, Foam: pymxs.runtime.Boolean, Mesh: pymxs.runtime.Boolean) -> None: ...
    def ClearStaleCaches() -> None: ...
    def GetCacheMesh(Frame: pymxs.runtime.Integer, MeshOut: pymxs.runtime.Mesh) -> pymxs.runtime.Boolean:
        """
        MeshOut is In and Out parameter
        """
        ...
    def GetDynamicMesh(Frame: pymxs.runtime.Integer, MeshOrFoam: pymxs.runtime.Enum, MeshOut: pymxs.runtime.Mesh) -> pymxs.runtime.Boolean:
        """
        MeshOrFoam pymxs.runtime.Enums: {#liquid|#foam}
        MeshOut is In and Out parameter
        """
        ...
    def ImportSolveTest(Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetParticleCache(Type: pymxs.runtime.Enum) -> pymxs.runtime.Interface:
        """
        type pymxs.runtime.Enums: {#liquid|#foam}
        """
        ...
    def AddMeshChannel(Name: pymxs.runtime.String, MapChannelIndex: pymxs.runtime.Integer) -> None: ...
    def DeleteMeshChannel(Name: pymxs.runtime.String) -> None: ...
    def FrameStatus(Frame: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetInitialState(Frame: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def ClearInitialState() -> pymxs.runtime.Boolean: ...
    def CloneWithInitialState(Frame: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def HasInitialState() -> pymxs.runtime.Boolean: ...
    def HasLiquidCacheAtFrame(Frame: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def TruncateSimulation() -> pymxs.runtime.Boolean: ...
    def ExportPRT(ExportLiquid: pymxs.runtime.Boolean, ExportFoam: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def PresetCount(Type: pymxs.runtime.Enum) -> pymxs.runtime.Integer:
        """
        type pymxs.runtime.Enums: {#solver|#mesher}
        """
        ...
    def PresetName(Type: pymxs.runtime.Enum, Index: pymxs.runtime.Index, PresetName: pymxs.runtime.String) -> None:
        """
        type pymxs.runtime.Enums: {#solver|#mesher}
        presetName is In and Out parameter
        """
        ...
    def PresetSave(Type: pymxs.runtime.Enum, Name: pymxs.runtime.String) -> None:
        """
        type pymxs.runtime.Enums: {#solver|#mesher}
        name is In and Out parameter
        """
        ...
    def PresetLoad(Type: pymxs.runtime.Enum, Name: pymxs.runtime.String) -> None:
        """
        type pymxs.runtime.Enums: {#solver|#mesher}
        name is In and Out parameter
        """
        ...
    def PresetDelete(Type: pymxs.runtime.Enum, Name: pymxs.runtime.String) -> None:
        """
        type pymxs.runtime.Enums: {#solver|#mesher}
        name is In and Out parameter
        """
        ...
    ...
class VolumeHelper:
    def IsVolumeOK(Time: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def SetGizmoType(Type: pymxs.runtime.Enum) -> None:
        """
        type pymxs.runtime.Enums: {#box|#sphere|#cylinder|#torus|#mesh}
        """
        ...
    def GetGizmoType() -> pymxs.runtime.Enum:
        """
        GetGizmoType pymxs.runtime.Enums: {#box|#sphere|#cylinder|#torus|#mesh
        """
        ...
    def SetGizmoSize(Time: pymxs.runtime.Time, Value: pymxs.runtime.Float) -> None: ...
    def GetGizmoSize(Time: pymxs.runtime.Time, Interval: pymxs.runtime.Interval) -> pymxs.runtime.Float:
        """
        Interval is In and Out parameter
        """
        ...
    def SetSectionRadius(Time: pymxs.runtime.Time, Value: pymxs.runtime.Float) -> None: ...
    def GetSectionRadius(Time: pymxs.runtime.Time, Interval: pymxs.runtime.Interval) -> pymxs.runtime.Float:
        """
        Interval is In and Out parameter
        """
        ...
    def GetGizmoMesh(MeshOut: pymxs.runtime.Mesh, Time: pymxs.runtime.Time, Interval: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        MeshOut is Out parameter
        Interval is In and Out parameter
        """
        ...
    ...
class EditPolyMod:
    EDGECHAMFERTYPE: pymxs.runtime.Enum  # Standard, Quad - rt.Name("")
    EDGECHAMFERQUADINTERSECTIONS: pymxs.runtime.Boolean  
    def GetEPolySelLevel() -> pymxs.runtime.Enum:
        """
        GetEPolySelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel
        GetEPolySelLevel - no automatic redraw after invoked
        """
        ...
    def GetMeshSelLevel() -> pymxs.runtime.Enum:
        """
        GetMeshSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel
        GetMeshSelLevel - no automatic redraw after invoked
        """
        ...
    def SetEPolySelLevel(SelectionLevel: pymxs.runtime.Enum) -> None:
        """
        selectionLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        """
        ...
    def ConvertSelection(FromLevel: pymxs.runtime.Enum, ToLevel: pymxs.runtime.Enum, RequireAll: pymxs.runtime.Boolean = False) -> pymxs.runtime.Integer:
        """
        fromLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        toLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        """
        ...
    def GetOperation() -> pymxs.runtime.Enum:
        """
        GetOperation pymxs.runtime.Enums: {#GrowSelection|#ShrinkSelection|#SelectEdgeLoop|#SelectEdgeRing|#GetStackSelection|#HideVertex|#HideFace|#HideUnselectedVertex|#HideUnselectedFace|#UnhideAllVertex|#UnhideAllFace|#NamedSelectionCopy|#NamedSelectionPaste|#Cap|#DeleteVertex|#DeleteEdge|#DeleteFace|#RemoveVertex|#RemoveEdge|#DetachVertex|#DetachFace|#SplitEdges|#BreakVertex|#CollapseVertex|#CollapseEdge|#CollapseFace|#ResetSlicePlane|#Slice|#SliceSelectedFaces|#Cut|#WeldVertex|#WeldEdge|#CreateShape|#MakePlanar|#MakePlanarInX|#MakePlanarInY|#MakePlanarInZ|#Align|#Relax|#MeshSmooth|#Tessellate|#Retriangulate|#FlipFace|#FlipElement|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#Bevel|#Inset|#Outline|#ExtrudeAlongSpline|#HingeFromEdge|#ConnectVertices|#ConnectEdges|#ChamferVertex|#ChamferEdge|#RemoveIsoVerts|#RemoveIsoMapVerts|#ToggleShadedFaces|#Transform|#Create|#Attach|#TargetWeldVertex|#TargetWeldEdge|#EditTriangulation|#TurnEdge|#CreateEdge|#CloneVertex|#CloneEdge|#CloneFace|#InsertVertexInEdge|#InsertVertexInFace|#Autosmooth|#SetSmooth|#SetMaterial|#SelectBySmooth|#SelectByMaterial|#BridgeBorder|#BridgePolygon|#BridgeEdge|#PreserveUVSettings|#RemoveEdgeRemoveVertices|#MakeHardEdges|#MakeSmoothEdges|#SelectHardEdges|#SelectSmoothEdges
        GetOperation - no automatic redraw after invoked
        """
        ...
    def SetOperation(Operation: pymxs.runtime.Enum) -> None:
        """
        operation pymxs.runtime.Enums: {#GrowSelection|#ShrinkSelection|#SelectEdgeLoop|#SelectEdgeRing|#GetStackSelection|#HideVertex|#HideFace|#HideUnselectedVertex|#HideUnselectedFace|#UnhideAllVertex|#UnhideAllFace|#NamedSelectionCopy|#NamedSelectionPaste|#Cap|#DeleteVertex|#DeleteEdge|#DeleteFace|#RemoveVertex|#RemoveEdge|#DetachVertex|#DetachFace|#SplitEdges|#BreakVertex|#CollapseVertex|#CollapseEdge|#CollapseFace|#ResetSlicePlane|#Slice|#SliceSelectedFaces|#Cut|#WeldVertex|#WeldEdge|#CreateShape|#MakePlanar|#MakePlanarInX|#MakePlanarInY|#MakePlanarInZ|#Align|#Relax|#MeshSmooth|#Tessellate|#Retriangulate|#FlipFace|#FlipElement|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#Bevel|#Inset|#Outline|#ExtrudeAlongSpline|#HingeFromEdge|#ConnectVertices|#ConnectEdges|#ChamferVertex|#ChamferEdge|#RemoveIsoVerts|#RemoveIsoMapVerts|#ToggleShadedFaces|#Transform|#Create|#Attach|#TargetWeldVertex|#TargetWeldEdge|#EditTriangulation|#TurnEdge|#CreateEdge|#CloneVertex|#CloneEdge|#CloneFace|#InsertVertexInEdge|#InsertVertexInFace|#Autosmooth|#SetSmooth|#SetMaterial|#SelectBySmooth|#SelectByMaterial|#BridgeBorder|#BridgePolygon|#BridgeEdge|#PreserveUVSettings|#RemoveEdgeRemoveVertices|#MakeHardEdges|#MakeSmoothEdges|#SelectHardEdges|#SelectSmoothEdges}
        """
        ...
    def PopupDialog(Operation: pymxs.runtime.Enum) -> None:
        """
        operation pymxs.runtime.Enums: {#GrowSelection|#ShrinkSelection|#SelectEdgeLoop|#SelectEdgeRing|#GetStackSelection|#HideVertex|#HideFace|#HideUnselectedVertex|#HideUnselectedFace|#UnhideAllVertex|#UnhideAllFace|#NamedSelectionCopy|#NamedSelectionPaste|#Cap|#DeleteVertex|#DeleteEdge|#DeleteFace|#RemoveVertex|#RemoveEdge|#DetachVertex|#DetachFace|#SplitEdges|#BreakVertex|#CollapseVertex|#CollapseEdge|#CollapseFace|#ResetSlicePlane|#Slice|#SliceSelectedFaces|#Cut|#WeldVertex|#WeldEdge|#CreateShape|#MakePlanar|#MakePlanarInX|#MakePlanarInY|#MakePlanarInZ|#Align|#Relax|#MeshSmooth|#Tessellate|#Retriangulate|#FlipFace|#FlipElement|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#Bevel|#Inset|#Outline|#ExtrudeAlongSpline|#HingeFromEdge|#ConnectVertices|#ConnectEdges|#ChamferVertex|#ChamferEdge|#RemoveIsoVerts|#RemoveIsoMapVerts|#ToggleShadedFaces|#Transform|#Create|#Attach|#TargetWeldVertex|#TargetWeldEdge|#EditTriangulation|#TurnEdge|#CreateEdge|#CloneVertex|#CloneEdge|#CloneFace|#InsertVertexInEdge|#InsertVertexInFace|#Autosmooth|#SetSmooth|#SetMaterial|#SelectBySmooth|#SelectByMaterial|#BridgeBorder|#BridgePolygon|#BridgeEdge|#PreserveUVSettings|#RemoveEdgeRemoveVertices|#MakeHardEdges|#MakeSmoothEdges|#SelectHardEdges|#SelectSmoothEdges}
        """
        ...
    def ButtonOp(Operation: pymxs.runtime.Enum) -> None:
        """
        operation pymxs.runtime.Enums: {#GrowSelection|#ShrinkSelection|#SelectEdgeLoop|#SelectEdgeRing|#GetStackSelection|#HideVertex|#HideFace|#HideUnselectedVertex|#HideUnselectedFace|#UnhideAllVertex|#UnhideAllFace|#NamedSelectionCopy|#NamedSelectionPaste|#Cap|#DeleteVertex|#DeleteEdge|#DeleteFace|#RemoveVertex|#RemoveEdge|#DetachVertex|#DetachFace|#SplitEdges|#BreakVertex|#CollapseVertex|#CollapseEdge|#CollapseFace|#ResetSlicePlane|#Slice|#SliceSelectedFaces|#Cut|#WeldVertex|#WeldEdge|#CreateShape|#MakePlanar|#MakePlanarInX|#MakePlanarInY|#MakePlanarInZ|#Align|#Relax|#MeshSmooth|#Tessellate|#Retriangulate|#FlipFace|#FlipElement|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#Bevel|#Inset|#Outline|#ExtrudeAlongSpline|#HingeFromEdge|#ConnectVertices|#ConnectEdges|#ChamferVertex|#ChamferEdge|#RemoveIsoVerts|#RemoveIsoMapVerts|#ToggleShadedFaces|#Transform|#Create|#Attach|#TargetWeldVertex|#TargetWeldEdge|#EditTriangulation|#TurnEdge|#CreateEdge|#CloneVertex|#CloneEdge|#CloneFace|#InsertVertexInEdge|#InsertVertexInFace|#Autosmooth|#SetSmooth|#SetMaterial|#SelectBySmooth|#SelectByMaterial|#BridgeBorder|#BridgePolygon|#BridgeEdge|#PreserveUVSettings|#RemoveEdgeRemoveVertices|#MakeHardEdges|#MakeSmoothEdges|#SelectHardEdges|#SelectSmoothEdges}
        """
        ...
    def Commit() -> None: ...
    def CommitUnlessAnimating() -> None: ...
    def CommitAndRepeat() -> None: ...
    def Cancel() -> None: ...
    def GetSelection(MeshSelLevel: pymxs.runtime.Enum, Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray:
        """
        GetSelection - no automatic redraw after invoked
        MeshSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def SetSelection(MeshSelLevel: pymxs.runtime.Enum, NewSelection: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        MeshSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        newSelection is In and Out parameter
        """
        ...
    def Select(MeshSelLevel: pymxs.runtime.Enum, NewSelection: pymxs.runtime.BitArray, Invert: pymxs.runtime.Boolean, Select: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        MeshSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        newSelection is In and Out parameter
        """
        ...
    def SetPrimaryNode(Node: pymxs.runtime.Node) -> None: ...
    def ToggleCommandMode(CommandMode: pymxs.runtime.Enum) -> None:
        """
        commandMode pymxs.runtime.Enums: {#CreateVertex|#CreateEdge|#CreateFace|#DivideEdge|#DivideFace|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#ChamferVertex|#ChamferEdge|#Bevel|#InsetFace|#OutlineFace|#SlicePlane|#Cut|#Weld|#EditTriangulation|#TurnEdge|#QuickSlice|#HingeFromEdge|#PickHinge|#BridgeBorder|#BridgePolygon|#PickBridgeTarget1|#PickBridgeTarget2|#EditSoftSelection}
        """
        ...
    def EnterCommandMode(CommandMode: pymxs.runtime.Enum) -> None:
        """
        commandMode pymxs.runtime.Enums: {#CreateVertex|#CreateEdge|#CreateFace|#DivideEdge|#DivideFace|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#ChamferVertex|#ChamferEdge|#Bevel|#InsetFace|#OutlineFace|#SlicePlane|#Cut|#Weld|#EditTriangulation|#TurnEdge|#QuickSlice|#HingeFromEdge|#PickHinge|#BridgeBorder|#BridgePolygon|#PickBridgeTarget1|#PickBridgeTarget2|#EditSoftSelection}
        """
        ...
    def EnterPickMode(CommandMode: pymxs.runtime.Enum) -> None:
        """
        commandMode pymxs.runtime.Enums: {#Attach|#PickShape}
        """
        ...
    def GetCommandMode() -> pymxs.runtime.Enum:
        """
        GetCommandMode pymxs.runtime.Enums: {#CreateVertex|#CreateEdge|#CreateFace|#DivideEdge|#DivideFace|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#ChamferVertex|#ChamferEdge|#Bevel|#InsetFace|#OutlineFace|#SlicePlane|#Cut|#Weld|#EditTriangulation|#TurnEdge|#QuickSlice|#HingeFromEdge|#PickHinge|#BridgeBorder|#BridgePolygon|#PickBridgeTarget1|#PickBridgeTarget2|#EditSoftSelection
        """
        ...
    def GetPickMode() -> pymxs.runtime.Enum:
        """
        GetPickMode pymxs.runtime.Enums: {#Attach|#PickShape
        """
        ...
    def RepeatLastOperation() -> None: ...
    def GetLastOperation() -> pymxs.runtime.Integer: ...
    def MoveSelection(Amount: pymxs.runtime.Point3, Parent: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), Axis: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), LocalOrigin: pymxs.runtime.Boolean = False) -> None: ...
    def RotateSelection(Amount: pymxs.runtime.Quat, Parent: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), Axis: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), LocalOrigin: pymxs.runtime.Boolean = False) -> None: ...
    def ScaleSelection(Amount: pymxs.runtime.Point3, Parent: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), Axis: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), LocalOrigin: pymxs.runtime.Boolean = False) -> None: ...
    def MoveSlicePlane(Amount: pymxs.runtime.Point3, Parent: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), Axis: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0])) -> None: ...
    def RotateSlicePlane(Amount: pymxs.runtime.Quat, Parent: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), Axis: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), LocalOrigin: pymxs.runtime.Boolean = False) -> None: ...
    def ScaleSlicePlane(Amount: pymxs.runtime.Point3, Parent: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), Axis: pymxs.runtime.Matrix3 = pymxs.runtime.matrix3([1,0,0] [0,1,0] [0,0,1] [0,0,0]), LocalOrigin: pymxs.runtime.Boolean = False) -> None: ...
    def InSlicePlaneMode() -> pymxs.runtime.Boolean:
        """
        InSlicePlaneMode - no automatic redraw after invoked
        """
        ...
    def ResetSlicePlane() -> None: ...
    def GetSlicePlaneTM() -> pymxs.runtime.Matrix3:
        """
        GetSlicePlaneTM - no automatic redraw after invoked
        """
        ...
    def SetSlicePlane(PlaneNormal: pymxs.runtime.Point3, PlaneCenter: pymxs.runtime.Point3) -> None: ...
    def GetSlicePlane(PlaneNormal: pymxs.runtime.Point3, PlaneCenter: pymxs.runtime.Point3) -> None:
        """
        planeNormal is Out parameter
        planeCenter is Out parameter
        """
        ...
    def CreateVertex(Point: pymxs.runtime.Point3, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def CreateFace(Vertices: pymxs.runtime.IndexArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def CreateEdge(Vertex: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def SetDiagonal(Vertex: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def StartCut(Level: pymxs.runtime.Enum, Index: pymxs.runtime.Index, Point: pymxs.runtime.Point3, Normal: pymxs.runtime.Point3, Node: pymxs.runtime.Node) -> None:
        """
        level pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def WeldVertices(Vertex: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def WeldEdges(Edge: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def BridgeBorders(Edge: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def BridgePolygons(Poly: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def BridgeEdges(Edge: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> None: ...
    def GetBridgeNode() -> pymxs.runtime.Node: ...
    def SetBridgeNode(Node: pymxs.runtime.Node) -> None: ...
    def GetPreserveMap(MapChannel: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetPreserveMap(MapChannel: pymxs.runtime.Integer, Preserve: pymxs.runtime.Boolean) -> None: ...
    def Attach(NodeToAttach: pymxs.runtime.Node, EditPolyNode: pymxs.runtime.Node) -> None: ...
    def AttachList(NodesToAttach: pymxs.runtime.NodeArray, EditPolyNode: pymxs.runtime.Node) -> None: ...
    def DetachToObject(NewObjectName: pymxs.runtime.String) -> None:
        """
        newObjectName is In and Out parameter
        """
        ...
    def CreateShape(NewShapeName: pymxs.runtime.String) -> None:
        """
        newShapeName is In and Out parameter
        """
        ...
    def GetNumVertices(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetNumVertices - no automatic redraw after invoked
        """
        ...
    def GetVertex(VertexID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3:
        """
        GetVertex - no automatic redraw after invoked
        """
        ...
    def GetVertexFaceCount(VertexID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetVertexFaceCount - no automatic redraw after invoked
        """
        ...
    def GetVertexFace(VertexID: pymxs.runtime.Index, Face: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetVertexFace - no automatic redraw after invoked
        """
        ...
    def GetVertexEdgeCount(VertexID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetVertexEdgeCount - no automatic redraw after invoked
        """
        ...
    def GetVertexEdge(VertexID: pymxs.runtime.Index, Edge: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetVertexEdge - no automatic redraw after invoked
        """
        ...
    def GetNumEdges(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetNumEdges - no automatic redraw after invoked
        """
        ...
    def GetEdgeVertex(EdgeID: pymxs.runtime.Index, End: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetEdgeVertex - no automatic redraw after invoked
        """
        ...
    def GetEdgeFace(EdgeID: pymxs.runtime.Index, Side: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetEdgeFace - no automatic redraw after invoked
        """
        ...
    def GetNumFaces(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetNumFaces - no automatic redraw after invoked
        """
        ...
    def GetFaceDegree(FaceID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetFaceDegree - no automatic redraw after invoked
        """
        ...
    def GetFaceVertex(FaceID: pymxs.runtime.Index, Corner: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetFaceVertex - no automatic redraw after invoked
        """
        ...
    def GetFaceEdge(FaceID: pymxs.runtime.Index, Side: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetFaceEdge - no automatic redraw after invoked
        """
        ...
    def GetFaceMaterial(FaceID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetFaceMaterial - no automatic redraw after invoked
        """
        ...
    def GetFaceSmoothingGroups(FaceID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetFaceSmoothingGroups - no automatic redraw after invoked
        """
        ...
    def GetNumMapChannels(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetNumMapChannels - no automatic redraw after invoked
        """
        ...
    def GetMapChannelActive(MapChannel: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        GetMapChannelActive - no automatic redraw after invoked
        """
        ...
    def GetNumMapVertices(MapChannel: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        GetNumMapVertices - no automatic redraw after invoked
        """
        ...
    def GetMapVertex(MapChannel: pymxs.runtime.Integer, VertexID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3:
        """
        GetMapVertex - no automatic redraw after invoked
        """
        ...
    def GetMapFaceVert(MapChannel: pymxs.runtime.Integer, FaceID: pymxs.runtime.Index, Corner: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Index:
        """
        GetMapFaceVert - no automatic redraw after invoked
        """
        ...
    def List(Node: pymxs.runtime.Node) -> None:
        """
        List - no automatic redraw after invoked
        """
        ...
    def LocalDataChanged(Parts: pymxs.runtime.Integer) -> None: ...
    def RefreshScreen() -> None: ...
    def InSlice() -> pymxs.runtime.Boolean:
        """
        InSlice - no automatic redraw after invoked
        """
        ...
    def ShowOperationDialog() -> pymxs.runtime.Boolean:
        """
        ShowOperationDialog - no automatic redraw after invoked
        """
        ...
    def ShowingOperationDialog() -> pymxs.runtime.Boolean:
        """
        ShowingOperationDialog - no automatic redraw after invoked
        """
        ...
    def CloseOperationDialog() -> None:
        """
        CloseOperationDialog - no automatic redraw after invoked
        """
        ...
    def GetPrimaryNode() -> pymxs.runtime.Node:
        """
        GetPrimaryNode - no automatic redraw after invoked
        """
        ...
    def GetNodeTM(Node: pymxs.runtime.Node) -> pymxs.runtime.Matrix3:
        """
        GetNodeTM - no automatic redraw after invoked
        """
        ...
    def SetCutEnd(EndPoint: pymxs.runtime.Point3, Node: pymxs.runtime.Node) -> None: ...
    def GetLastCutEnd() -> pymxs.runtime.Index:
        """
        GetLastCutEnd - no automatic redraw after invoked
        """
        ...
    def ClearLastCutEnd() -> None:
        """
        ClearLastCutEnd - no automatic redraw after invoked
        """
        ...
    def CutCancel(Node: pymxs.runtime.Node) -> None: ...
    def DivideEdge(EdgeID: pymxs.runtime.Index, Proportion: pymxs.runtime.Float, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def DivideFace(FaceID: pymxs.runtime.Index, VertexCoefficients: pymxs.runtime.FloatArray, Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def RingSelect(RingValue: pymxs.runtime.Integer, MoveOnly: pymxs.runtime.Boolean, Add: pymxs.runtime.Boolean) -> None: ...
    def LoopSelect(LoopValue: pymxs.runtime.Integer, MoveOnly: pymxs.runtime.Boolean, Add: pymxs.runtime.Boolean) -> None: ...
    def ConvertSelectionToBorder(FromLevel: pymxs.runtime.Enum, ToLevel: pymxs.runtime.Enum) -> pymxs.runtime.Integer:
        """
        fromLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        toLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        """
        ...
    def CommitPaintDeform() -> None: ...
    def CancelPaintDeform() -> None: ...
    def GetFaceNormal(FaceID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3:
        """
        GetFaceNormal - no automatic redraw after invoked
        """
        ...
    def GetFaceCenter(FaceID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Point3:
        """
        GetFaceCenter - no automatic redraw after invoked
        """
        ...
    def GetFaceArea(FaceID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Float:
        """
        GetFaceArea - no automatic redraw after invoked
        """
        ...
    def GetOpenEdges(Node: pymxs.runtime.Node) -> pymxs.runtime.BitArray:
        """
        GetOpenEdges - no automatic redraw after invoked
        """
        ...
    def GetVerticesByFlag(VertexSet: pymxs.runtime.BitArray, FlagsRequested: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        GetVerticesByFlag - no automatic redraw after invoked
        vertexSet is In and Out parameter
        """
        ...
    def GetEdgesByFlag(EdgeSet: pymxs.runtime.BitArray, FlagsRequested: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        GetEdgesByFlag - no automatic redraw after invoked
        edgeSet is In and Out parameter
        """
        ...
    def GetFacesByFlag(FaceSet: pymxs.runtime.BitArray, FlagsRequested: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer, Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean:
        """
        GetFacesByFlag - no automatic redraw after invoked
        faceSet is In and Out parameter
        """
        ...
    def SetVertexFlags(VertexSet: pymxs.runtime.BitArray, FlagsToSet: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer, GenerateUndoRecord: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None:
        """
        vertexSet is In and Out parameter
        """
        ...
    def SetEdgeFlags(EdgeSet: pymxs.runtime.BitArray, FlagsToSet: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer, GenerateUndoRecord: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None:
        """
        edgeSet is In and Out parameter
        """
        ...
    def SetFaceFlags(FaceSet: pymxs.runtime.BitArray, FlagsToSet: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer, GenerateUndoRecord: pymxs.runtime.Boolean, Node: pymxs.runtime.Node) -> None:
        """
        faceSet is In and Out parameter
        """
        ...
    def GetVertexFlags(VertexID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        getVertexFlags - no automatic redraw after invoked
        """
        ...
    def GetEdgeFlags(EdgeID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        getEdgeFlags - no automatic redraw after invoked
        """
        ...
    def GetFaceFlags(FaceID: pymxs.runtime.Index, Node: pymxs.runtime.Node) -> pymxs.runtime.Integer:
        """
        getFaceFlags - no automatic redraw after invoked
        """
        ...
    def GetVertsUsingEdge(VertSet: pymxs.runtime.BitArray, EdgeSet: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        getVertsUsingEdge - no automatic redraw after invoked
        vertSet is In and Out parameter
        edgeSet is In and Out parameter
        """
        ...
    def GetEdgesUsingVert(EdgeSet: pymxs.runtime.BitArray, VertSet: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        getEdgesUsingVert - no automatic redraw after invoked
        edgeSet is In and Out parameter
        vertSet is In and Out parameter
        """
        ...
    def GetFacesUsingEdge(FaceSet: pymxs.runtime.BitArray, EdgeSet: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        getFacesUsingEdge - no automatic redraw after invoked
        faceSet is In and Out parameter
        edgeSet is In and Out parameter
        """
        ...
    def GetElementsUsingFace(ElementSet: pymxs.runtime.BitArray, FaceSet: pymxs.runtime.BitArray, FenceSet: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        getElementsUsingFace - no automatic redraw after invoked
        elementSet is In and Out parameter
        faceSet is In and Out parameter
        fenceSet is In and Out parameter
        """
        ...
    def GetFacesUsingVert(FaceSet: pymxs.runtime.BitArray, VertSet: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        getFacesUsingVert - no automatic redraw after invoked
        faceSet is In and Out parameter
        vertSet is In and Out parameter
        """
        ...
    def GetVertsUsingFace(VertSet: pymxs.runtime.BitArray, FaceSet: pymxs.runtime.BitArray, Node: pymxs.runtime.Node) -> None:
        """
        getVertsUsingFace - no automatic redraw after invoked
        vertSet is In and Out parameter
        faceSet is In and Out parameter
        """
        ...
    def SetVert(VertSet: pymxs.runtime.BitArray, Point: pymxs.runtime.Point3, Node: pymxs.runtime.Node) -> None:
        """
        vertSet is In and Out parameter
        """
        ...
    def SmGrpFloaterVisible() -> pymxs.runtime.Boolean: ...
    def SmGrpFloater() -> None: ...
    def MatIDFloaterVisible() -> pymxs.runtime.Boolean: ...
    def MatIDFloater() -> None: ...
    def ListDeltaOps() -> None: ...
    ...
class OffsetTimer:
    ...
class SetKeyCtrl:
    ...
class PolyToolsSelect:
    def Loop(CylinderEnds: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Ring() -> pymxs.runtime.Boolean: ...
    def GrowLoop() -> pymxs.runtime.Boolean: ...
    def ShrinkLoop() -> pymxs.runtime.Boolean: ...
    def GrowRing() -> pymxs.runtime.Boolean: ...
    def ShrinkRing() -> pymxs.runtime.Boolean: ...
    def DotLoop(Value: pymxs.runtime.Integer, CylinderEnds: pymxs.runtime.Boolean, Opposite: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def DotRing(Value: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def StepLoop(LongestDir: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Outline() -> pymxs.runtime.Boolean: ...
    def Tops(WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Fill() -> pymxs.runtime.Boolean: ...
    def FillHole() -> pymxs.runtime.Boolean: ...
    def HardEdges() -> pymxs.runtime.Boolean: ...
    def Similar(EdgeCount: pymxs.runtime.Boolean, EdgeLength: pymxs.runtime.Boolean, FaceCount: pymxs.runtime.Boolean, FaceArea: pymxs.runtime.Boolean, Topology: pymxs.runtime.Boolean, Normal: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Random(Percent: pymxs.runtime.Float, Number: pymxs.runtime.Integer, Type: pymxs.runtime.Integer, WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def RandomGrow() -> pymxs.runtime.Boolean: ...
    def RandomShrink() -> pymxs.runtime.Boolean: ...
    def Even(Skip: pymxs.runtime.Integer, WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Odd(Skip: pymxs.runtime.Integer, WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Symmetry(Axis: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def NumericVertex(Edges: pymxs.runtime.Integer, Type: pymxs.runtime.Integer, WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def NumericEdge(WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def NumericFace(Sides: pymxs.runtime.Integer, Type: pymxs.runtime.Integer, WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Half(Axis: pymxs.runtime.Integer, Invert: pymxs.runtime.Boolean, WithinSel: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Normal(Axis: pymxs.runtime.Integer, Value: pymxs.runtime.Float, Invert: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Perspective(Value: pymxs.runtime.Float, Outline: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Distance(Value: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def PerspectiveGrow(Value: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def ConvexConcave(Value: pymxs.runtime.Float, IsConcave: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def BitmapToSel(File: pymxs.runtime.String, Mapchannel: pymxs.runtime.Integer, Color: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def Pattern(Times: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def PatternDots(Times: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def PatternChecker(Times: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def PatternGrowLine(Times: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def PatternOneRing(Times: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    ...
class PolyToolsModeling:
    def BuildEnd() -> pymxs.runtime.Boolean: ...
    def BuildCorner() -> pymxs.runtime.Boolean: ...
    def DistanceConnect() -> pymxs.runtime.Boolean: ...
    def RandomConnect(Axis: pymxs.runtime.Float, AtuoLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def InsertVertex(Number: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SpinEdge(AlternativeDir: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def RemoveLoop() -> pymxs.runtime.Boolean: ...
    def Quadrify(WithinSel: pymxs.runtime.Boolean, SelectOnly: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GeoPoly() -> pymxs.runtime.Boolean: ...
    def SpaceLoop(AutoLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def CurveLoop(AutoLoop: pymxs.runtime.Boolean, SpaceLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def StraightLoop(AutoLoop: pymxs.runtime.Boolean, SpaceLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def CircleLoop(AutoLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def RelaxLoop(AutoLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def CenterLoop(AutoLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def SetFlow(AutoLoop: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def SetFlowVertex() -> pymxs.runtime.Boolean: ...
    def SymmetryGather(Node: pymxs.runtime.Node, Axis: pymxs.runtime.Value, Threshold: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SymmetryPosToNeg(Axis: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SymmetryNegToPos(Axis: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SymmetryFlip(Axis: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SymmetryCopy() -> pymxs.runtime.Boolean: ...
    def SymmetryPaste() -> pymxs.runtime.Boolean: ...
    def MultiHide() -> pymxs.runtime.Boolean: ...
    def RotateSelection(Degree: pymxs.runtime.Float, Coordsys: pymxs.runtime.Integer, ViewDirection: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def MirrorElement(Axis: pymxs.runtime.Value, Clone: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def CreateFace(Bitarray: pymxs.runtime.BitArray) -> pymxs.runtime.Integer: ...
    ...
class Channel:
    def Clone() -> pymxs.runtime.IObject: ...
    def IsSimilarChannel(Channel: pymxs.runtime.IObject) -> pymxs.runtime.Boolean: ...
    def IsTransferable() -> pymxs.runtime.Boolean: ...
    def SetTransferable(Status: pymxs.runtime.Boolean) -> None: ...
    def IsPrivateChannel() -> pymxs.runtime.Boolean: ...
    def GetPrivateOwner() -> pymxs.runtime.Object: ...
    def SetPrivateOwner(Action: pymxs.runtime.Object) -> None: ...
    def GetCreatorAction() -> pymxs.runtime.Node: ...
    def SetCreatorAction(Action: pymxs.runtime.Node) -> None: ...
    def GetReadID() -> pymxs.runtime.Integer: ...
    def GetWriteID() -> pymxs.runtime.Integer: ...
    def SetReadID(PartA: pymxs.runtime.Integer, PartB: pymxs.runtime.Integer) -> None: ...
    def SetWriteID(PartA: pymxs.runtime.Integer, PartB: pymxs.runtime.Integer) -> None: ...
    ...
class AmountRead:
    def Count() -> pymxs.runtime.Integer: ...
    ...
class AmountWrite:
    def ZeroCount() -> None: ...
    def SetCount(Amount: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def Delete(FirstIndex: pymxs.runtime.Integer, Amount: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def Delete(ToDelete: pymxs.runtime.BitArray) -> pymxs.runtime.Integer:
        """
        toDelete is In and Out parameter
        """
        ...
    def Split(ToSplit: pymxs.runtime.BitArray) -> pymxs.runtime.IObject:
        """
        toSplit is In and Out parameter
        """
        ...
    def Spawn(ToSpawn: pymxs.runtime.IntegerArray) -> pymxs.runtime.Boolean:
        """
        toSpawn is In and Out parameter
        """
        ...
    def AppendNum(Amount: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def Append(Channel: pymxs.runtime.IObject) -> pymxs.runtime.Boolean: ...
    ...
class MeshRead:
    def IsShared() -> pymxs.runtime.Boolean: ...
    def GetValueCount() -> pymxs.runtime.Integer: ...
    def GetValueIndex(ParticleIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetValueByIndex(ValueIndex: pymxs.runtime.Integer) -> pymxs.runtime.Mesh: ...
    def GetValue(ParticleIndex: pymxs.runtime.Integer) -> pymxs.runtime.Mesh: ...
    def GetValueFirst() -> pymxs.runtime.Mesh: ...
    def GetMaxBoundingBox(MinCorner: pymxs.runtime.Point3, MaxCorner: pymxs.runtime.Point3) -> None:
        """
        minCorner is In and Out parameter
        maxCorner is In and Out parameter
        """
        ...
    ...
class MeshWrite:
    def SetValue(ParticleIndex: pymxs.runtime.Integer, Mesh: pymxs.runtime.Mesh) -> pymxs.runtime.Boolean: ...
    def SetValueMany(ParticleIndices: pymxs.runtime.IntegerArray, Mesh: pymxs.runtime.Mesh) -> pymxs.runtime.Boolean:
        """
        particleIndices is In and Out parameter
        """
        ...
    def SetValueAll(Mesh: pymxs.runtime.Mesh) -> pymxs.runtime.Boolean: ...
    def BuildMaxBoundingBox() -> None: ...
    ...
class VisibleRead:
    def GetVisible(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def IsGlobalVisible() -> pymxs.runtime.Boolean: ...
    def GetVisibleGlobal() -> pymxs.runtime.Boolean: ...
    ...
class VisibleWrite:
    def SetVisible(Index: pymxs.runtime.Integer, Visible: pymxs.runtime.Boolean) -> None: ...
    def SetVisibleGlobal(Visible: pymxs.runtime.Boolean) -> None: ...
    ...
class SkinMorphOps:
    def AddBone(Node: pymxs.runtime.Node) -> None: ...
    def RemoveBone(Node: pymxs.runtime.Node) -> None: ...
    def SelectBone(Node: pymxs.runtime.Node, MorphName: pymxs.runtime.String) -> None: ...
    def SelectVertices(Node: pymxs.runtime.Node, Sel: pymxs.runtime.BitArray) -> None: ...
    def IsSelectedVertex(Node: pymxs.runtime.Node, VertexIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def ResetSelectionGraph() -> None: ...
    def Grow() -> None: ...
    def Shrink() -> None: ...
    def Loop() -> None: ...
    def Ring() -> None: ...
    def CreateMorph(Node: pymxs.runtime.Node) -> None: ...
    def RemoveMorph(Node: pymxs.runtime.Node, MorphName: pymxs.runtime.String) -> None: ...
    def EditMorph(Edit: pymxs.runtime.Boolean) -> None: ...
    def ClearSelectedVertices() -> None: ...
    def DeleteSelectedVertices() -> None: ...
    def ResetOrientation(Node: pymxs.runtime.Node, MorphName: pymxs.runtime.String) -> None: ...
    def ReloadTarget(Node: pymxs.runtime.Node, MorphName: pymxs.runtime.String) -> None: ...
    def MirrorPaste(Node: pymxs.runtime.Node) -> None: ...
    def EditFalloffGraph(Node: pymxs.runtime.Node, MorphName: pymxs.runtime.String) -> None: ...
    def SetExternalNode(Morphnode: pymxs.runtime.Node, MorphName: pymxs.runtime.String, Externalnode: pymxs.runtime.Node) -> None: ...
    def MoveVerts(Vec: pymxs.runtime.Point3) -> None: ...
    def TransformVerts(TmMotion: pymxs.runtime.Matrix3, TmToLocalSpace: pymxs.runtime.Matrix3) -> None: ...
    def NumberOfBones() -> pymxs.runtime.Integer: ...
    def BoneGetInitialNodeTM(Node: pymxs.runtime.Node) -> pymxs.runtime.Matrix3: ...
    def BoneSetInitialNodeTM(Node: pymxs.runtime.Node, Tm: pymxs.runtime.Matrix3) -> None: ...
    def BoneGetInitialObjectTM(Node: pymxs.runtime.Node) -> pymxs.runtime.Matrix3: ...
    def BoneSetInitialObjectTM(Node: pymxs.runtime.Node, Tm: pymxs.runtime.Matrix3) -> None: ...
    def BoneGetInitialParentTM(Node: pymxs.runtime.Node) -> pymxs.runtime.Matrix3: ...
    def BoneSetInitialParentTM(Node: pymxs.runtime.Node, Tm: pymxs.runtime.Matrix3) -> None: ...
    def BoneGetNumberOfMorphs(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def BoneGetMorphName(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.String: ...
    def BoneSetMorphName(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer, Name: pymxs.runtime.String) -> None: ...
    def BoneGetMorphAngle(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def BoneSetMorphAngle(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer, Angle: pymxs.runtime.Float) -> None: ...
    def BoneGetMorphTM(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Matrix3: ...
    def BoneSetMorphTM(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer, Tm: pymxs.runtime.Matrix3) -> None: ...
    def BoneGetMorphParentTM(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Matrix3: ...
    def BoneSetMorphParentTM(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer, Tm: pymxs.runtime.Matrix3) -> None: ...
    def BoneGetMorphIsDead(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def BoneSetMorphSetDead(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer, Dead: pymxs.runtime.Boolean) -> None: ...
    def BoneGetMorphNumPoints(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def BoneSetMorphNumPoints(Node: pymxs.runtime.Node, Index: pymxs.runtime.Integer, NumPoints: pymxs.runtime.Integer) -> None: ...
    def BoneGetMorphVertID(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def BoneSetMorphVertID(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer, Index: pymxs.runtime.Integer) -> None: ...
    def BoneGetMorphVec(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def BoneSetMorphVec(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer, Vec: pymxs.runtime.Point3) -> None: ...
    def BoneGetMorphVecInParentSpace(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def BoneSetMorphVecInParentSpace(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer, Vec: pymxs.runtime.Point3) -> None: ...
    def BoneGetMorphBasePoint(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def BoneSetMorphBasePoint(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer, Point: pymxs.runtime.Point3) -> None: ...
    def BoneGetMorphOwner(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer) -> pymxs.runtime.Node: ...
    def BoneSetMorphOwner(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, IthVertIndex: pymxs.runtime.Integer) -> None: ...
    def BoneGetMorphFalloff(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def BoneSetMorphFalloff(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, Falloff: pymxs.runtime.Integer) -> None: ...
    def Update() -> None: ...
    def GetWeight(Node: pymxs.runtime.Node, MorphName: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def BoneGetMorphEnabled(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def BoneSetMorphEnabled(Node: pymxs.runtime.Node, MorphIndex: pymxs.runtime.Integer, Enabled: pymxs.runtime.Boolean) -> None: ...
    ...
class ILuminaire:
    DIMMER: pymxs.runtime.Float  
    FILTERCOLOR: pymxs.runtime.Color  
    ...
class PolyToolsTopology:
    def Wall() -> pymxs.runtime.Boolean: ...
    def Tiles() -> pymxs.runtime.Boolean: ...
    def Brick() -> pymxs.runtime.Boolean: ...
    def Hive() -> pymxs.runtime.Boolean: ...
    def Mosiac() -> pymxs.runtime.Boolean: ...
    def Floor() -> pymxs.runtime.Boolean: ...
    def Skin() -> pymxs.runtime.Boolean: ...
    def Holer() -> pymxs.runtime.Boolean: ...
    def EdgeDirection() -> pymxs.runtime.Boolean: ...
    def Simplify() -> pymxs.runtime.Boolean: ...
    def Chaos() -> pymxs.runtime.Boolean: ...
    def Fours() -> pymxs.runtime.Boolean: ...
    def SmoothStar() -> pymxs.runtime.Boolean: ...
    def Cross() -> pymxs.runtime.Boolean: ...
    def Planks() -> pymxs.runtime.Boolean: ...
    def Tatter(Size: pymxs.runtime.Integer, Iterations: pymxs.runtime.Integer, Smooth: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def ScrapVerts() -> pymxs.runtime.Boolean: ...
    ...
class PolyToolsPolyDraw:
    OFFSET: pymxs.runtime.Float  
    MINDISTANCE: pymxs.runtime.Float  
    DISTANCETYPE: pymxs.runtime.Integer  
    BRANCHTAPER: pymxs.runtime.Float  
    TOPOAUTOWELD: pymxs.runtime.Boolean  
    SURFACEDOQUADS: pymxs.runtime.Boolean  
    def StepBuild() -> pymxs.runtime.Boolean: ...
    def PaintConnect() -> pymxs.runtime.Boolean: ...
    def SwiftLoop() -> pymxs.runtime.Boolean: ...
    def Extend() -> pymxs.runtime.Boolean: ...
    def Drag() -> pymxs.runtime.Boolean: ...
    def Optimize() -> pymxs.runtime.Boolean: ...
    def Topology() -> pymxs.runtime.Boolean: ...
    def Surface() -> pymxs.runtime.Boolean: ...
    def Shapes() -> pymxs.runtime.Boolean: ...
    def Strips() -> pymxs.runtime.Boolean: ...
    def Branch() -> pymxs.runtime.Boolean: ...
    def Splines() -> pymxs.runtime.Boolean: ...
    def EndTool() -> pymxs.runtime.Boolean: ...
    ...
class PolyToolsPaintDeform:
    NORMALDIRECTION: pymxs.runtime.Integer  
    CAPOFFSET: pymxs.runtime.Boolean  
    def PushPull() -> pymxs.runtime.Boolean: ...
    def RelaxSoften() -> pymxs.runtime.Boolean: ...
    def Flatten() -> pymxs.runtime.Boolean: ...
    def PinchSpread() -> pymxs.runtime.Boolean: ...
    def Smudge() -> pymxs.runtime.Boolean: ...
    def Noise() -> pymxs.runtime.Boolean: ...
    def Exaggerate() -> pymxs.runtime.Boolean: ...
    def Revert() -> pymxs.runtime.Boolean: ...
    def Commit() -> pymxs.runtime.Boolean: ...
    def Cancel() -> pymxs.runtime.Boolean: ...
    def RefreshNormals() -> pymxs.runtime.Boolean: ...
    def BrushOptions() -> pymxs.runtime.Boolean: ...
    def EndTool() -> pymxs.runtime.Boolean: ...
    ...
class IDaylightSystem:
    def GetSun() -> pymxs.runtime.Object: ...
    def SetSun(SunClass: pymxs.runtime.Class) -> pymxs.runtime.Object: ...
    def GetSky() -> pymxs.runtime.Object: ...
    def SetSky(SkyClass: pymxs.runtime.Class) -> pymxs.runtime.Object: ...
    def GetPosition() -> pymxs.runtime.Point3: ...
    def GetOrbitalScale() -> pymxs.runtime.Float: ...
    def GetNorthDirection() -> pymxs.runtime.Float: ...
    def GetCompassDiameter() -> pymxs.runtime.Float: ...
    def GetTimeOfDay() -> pymxs.runtime.Point3: ...
    def GetDate() -> pymxs.runtime.Point3: ...
    def GetLatitude() -> pymxs.runtime.Float: ...
    def GetLongitude() -> pymxs.runtime.Float: ...
    def GetDaylightSavingTime() -> pymxs.runtime.Boolean: ...
    def GetTimeZone(Longitude: pymxs.runtime.Float) -> pymxs.runtime.Float: ...
    def GetDaylightControlType() -> pymxs.runtime.Integer: ...
    def SetDaylightControlType(Type: pymxs.runtime.Integer) -> None: ...
    def GetLocation() -> pymxs.runtime.String: ...
    def GetAltitudeAzimuth(Time: pymxs.runtime.Time, Altitude: pymxs.runtime.Float, Azimuth: pymxs.runtime.Float) -> None:
        """
        altitude is In and Out parameter
        azimuth is In and Out parameter
        """
        ...
    def GetWeatherFileName() -> pymxs.runtime.Filename: ...
    def OpenWeatherFileDlg() -> None: ...
    def MatchTimeLine() -> None: ...
    def LoadWeatherFile(File: pymxs.runtime.Filename) -> None: ...
    def SetWeatherFileFilterAnimated(Animated: pymxs.runtime.Boolean) -> None: ...
    def GetWeatherFileFilterAnimated() -> pymxs.runtime.Boolean: ...
    def SetWeatherFileSpecificTimeAndDate(TimeOfDay: pymxs.runtime.Point3, Date: pymxs.runtime.Point3) -> None:
        """
        TimeOfDay is In and Out parameter
        date is In and Out parameter
        """
        ...
    def GetWeatherFileSpecificTimeAndDate(TimeOfDay: pymxs.runtime.Point3, Date: pymxs.runtime.Point3) -> None:
        """
        TimeOfDay is In and Out parameter
        date is In and Out parameter
        """
        ...
    def SetWeatherFileAnimStartTimeAndDate(TimeOfDay: pymxs.runtime.Point3, Date: pymxs.runtime.Point3) -> None:
        """
        TimeOfDay is In and Out parameter
        date is In and Out parameter
        """
        ...
    def GetWeatherFileAnimStartTimeAndDate(TimeOfDay: pymxs.runtime.Point3, Date: pymxs.runtime.Point3) -> None:
        """
        TimeOfDay is In and Out parameter
        date is In and Out parameter
        """
        ...
    def SetWeatherFileAnimEndTimeAndDate(TimeOfDay: pymxs.runtime.Point3, Date: pymxs.runtime.Point3) -> None:
        """
        TimeOfDay is In and Out parameter
        date is In and Out parameter
        """
        ...
    def GetWeatherFileAnimEndTimeAndDate(TimeOfDay: pymxs.runtime.Point3, Date: pymxs.runtime.Point3) -> None:
        """
        TimeOfDay is In and Out parameter
        date is In and Out parameter
        """
        ...
    def SetWeatherFileSkipHours(SkipHours: pymxs.runtime.Boolean, StartHour: pymxs.runtime.Integer, EndHour: pymxs.runtime.Integer) -> None: ...
    def GetWeatherFileSkipHours(SkipHours: pymxs.runtime.Boolean, StartHour: pymxs.runtime.Integer, EndHour: pymxs.runtime.Integer) -> None:
        """
        skipHours is In and Out parameter
        startHour is In and Out parameter
        endHour is In and Out parameter
        """
        ...
    def SetWeatherFileSkipWeekend(SkipWeekend: pymxs.runtime.Boolean) -> None: ...
    def GetWeatherFileSkipWeekend() -> pymxs.runtime.Boolean: ...
    def SetWeatherFileSkipFramePer(FramePer: pymxs.runtime.Integer) -> None: ...
    def GetWeatherFileSkipFramePer() -> pymxs.runtime.Integer: ...
    ...
class PolyToolsShift:
    FULLSTRENGTH: pymxs.runtime.Integer  
    FALLOFF: pymxs.runtime.Integer  
    STRENGTH: pymxs.runtime.Integer  
    USESELECTEDVERTS: pymxs.runtime.Boolean  
    IGNOREBACKFACING: pymxs.runtime.Boolean  
    USEMIRROR: pymxs.runtime.Boolean  
    def StartTool() -> pymxs.runtime.Boolean: ...
    def EndTool() -> pymxs.runtime.Boolean: ...
    def GetAxisFrozen(Axis: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SetAxisFrozen(Axis: pymxs.runtime.Value, OnOff: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetAxisFrozenEdges(Axis: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    def SetAxisFrozenEdges(Axis: pymxs.runtime.Value, OnOff: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetMirrorAxis() -> pymxs.runtime.Value: ...
    def SetMirrorAxis(Axis: pymxs.runtime.Value) -> pymxs.runtime.Boolean: ...
    ...
class IVertexPaint:
    def AcquirePaintState(Node: pymxs.runtime.Node) -> pymxs.runtime.Interface: ...
    def ApplyPaintState(Node: pymxs.runtime.Node, State: pymxs.runtime.Interface) -> None: ...
    def ReleasePaintState(Node: pymxs.runtime.Node, State: pymxs.runtime.Interface) -> None: ...
    def MergeVertexColors(Node: pymxs.runtime.Node) -> None: ...
    ...
class PolyToolsUVWTweak:
    FULLSTRENGTH: pymxs.runtime.Integer  
    FALLOFF: pymxs.runtime.Integer  
    STRENGTH: pymxs.runtime.Float  
    BOUNDRYFIXED: pymxs.runtime.Boolean  
    def StartTool() -> pymxs.runtime.Boolean: ...
    def EndTool() -> pymxs.runtime.Boolean: ...
    ...
class PathFlow:
    DIRECTION: pymxs.runtime.Enum  # Forward, HugLeft, WeaveLeft, WeaveRight, HugRight, Backward - rt.Name("")
    def NumPoints() -> pymxs.runtime.Integer: ...
    def GetPoint(Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def AddPoint(Point: pymxs.runtime.Point3) -> None: ...
    def InsertPoint(Index: pymxs.runtime.Integer, Point: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def SetPoint(Index: pymxs.runtime.Integer, Point: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def DeletePoint(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def CreateRamp(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def DeleteRamp(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetCreasePercent(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetCreasePercent(Index: pymxs.runtime.Integer, Percent: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    ...
class IObjectRead:
    def IsShared() -> pymxs.runtime.Boolean: ...
    def GetValueCount() -> pymxs.runtime.Integer: ...
    def GetValueIndex(ParticleIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetValueByIndex(ValueIndex: pymxs.runtime.Integer) -> pymxs.runtime.IObject: ...
    def GetValue(ParticleIndex: pymxs.runtime.Integer) -> pymxs.runtime.IObject: ...
    def GetValueFirst() -> pymxs.runtime.IObject: ...
    ...
class IObjectWrite:
    def SetValue(ParticleIndex: pymxs.runtime.Integer, IObj: pymxs.runtime.IObject) -> pymxs.runtime.Boolean: ...
    def SetValueMany(ParticleIndices: pymxs.runtime.IntegerArray, IObj: pymxs.runtime.IObject) -> pymxs.runtime.Boolean:
        """
        particleIndices is In and Out parameter
        """
        ...
    def SetValueAll(IObj: pymxs.runtime.IObject) -> pymxs.runtime.Boolean: ...
    ...
class IDxMaterial:
    EFFECTFILENAME: pymxs.runtime.Filename  
    SOFTWAREBITMAP: pymxs.runtime.Bitmap  
    def Reloadeffect() -> None: ...
    def Numberofbitmaps() -> pymxs.runtime.Integer: ...
    def Bitmapmappingchannel(Index: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def Bitmapusage(Index: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        bitmapusage pymxs.runtime.Enums: {#Unknown|#DiffuseMap|#BumpMap|#OpacityMap|#DisplacementMap|#LightMap|#NormalMap
        """
        ...
    def Geteffectbitmap(Index: pymxs.runtime.Index) -> pymxs.runtime.Bitmap: ...
    def Seteffectbitmap(Index: pymxs.runtime.Index, Bitmap: pymxs.runtime.Bitmap) -> None: ...
    def Setmappingchannel(Index: pymxs.runtime.Index, MapChannel: pymxs.runtime.Integer) -> None: ...
    def GetNumberOfTechniques() -> pymxs.runtime.Integer: ...
    def GetTechniqueName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetTechniqueList() -> pymxs.runtime.StringArray: ...
    def GetCurrentTechniqueName() -> pymxs.runtime.String: ...
    def LoadStingrayGraph(Filename: pymxs.runtime.String) -> None: ...
    def ExportStingrayGraph(Filename: pymxs.runtime.String) -> None: ...
    def IsStingray() -> pymxs.runtime.Boolean: ...
    ...
class Retimer:
    @property
    def NUMMARKERS() -> pymxs.runtime.Integer: ...
    @property
    def NUMSPANS() -> pymxs.runtime.Integer: ...
    ACTIVE: pymxs.runtime.Boolean  
    NAME: pymxs.runtime.String  
    SHORTNAME: pymxs.runtime.String  
    def SetNewMarker(Time: pymxs.runtime.Time) -> None: ...
    def ExpandMarker(Time: pymxs.runtime.Time, NewTime: pymxs.runtime.Time) -> None: ...
    def MoveMarker(Time: pymxs.runtime.Time, NewTime: pymxs.runtime.Time) -> None: ...
    def RemoveMarker(Time: pymxs.runtime.Time) -> None: ...
    def GetMarkerTimes() -> pymxs.runtime.TimeArray: ...
    def GetExpandedMarkerTimes() -> pymxs.runtime.TimeArray: ...
    def GetSpanType(Index: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        GetSpanType pymxs.runtime.Enums: {#linear|#easeIn|#easeOut
        """
        ...
    def SetSpanType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> None:
        """
        type pymxs.runtime.Enums: {#linear|#easeIn|#easeOut}
        """
        ...
    def GetSpanLocked(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetSpanLocked(Index: pymxs.runtime.Index, Lock: pymxs.runtime.Boolean) -> None: ...
    ...
class FluidLoaderObject:
    def AddCache(Path: pymxs.runtime.String, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        Index is Out parameter
        """
        ...
    def RemoveCache(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def NumberCaches() -> pymxs.runtime.Integer: ...
    def GetCacheIndex(Name: pymxs.runtime.String, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        Index is Out parameter
        """
        ...
    def GetPathAndFile(Index: pymxs.runtime.Index, Path: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        path is Out parameter
        """
        ...
    def GetCacheName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        name is Out parameter
        """
        ...
    def SetCacheName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetCachePath(Index: pymxs.runtime.Index, Path: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        path is Out parameter
        """
        ...
    def GetCacheType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#unknown|#liquid|#smoke|#foam|#mesh}
        type is Out parameter
        """
        ...
    def GetCacheRange(Index: pymxs.runtime.Index, Start: pymxs.runtime.Integer, End: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        start is Out parameter
        end is Out parameter
        """
        ...
    def GetCacheEnable(Index: pymxs.runtime.Index, Enable: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        enable is Out parameter
        """
        ...
    def SetCacheEnable(Index: pymxs.runtime.Index, Enable: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetCacheDisplay(Index: pymxs.runtime.Index, Display: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        display is Out parameter
        """
        ...
    def SetCacheDisplay(Index: pymxs.runtime.Index, Display: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetCacheMatID(Index: pymxs.runtime.Index, MatID: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        matID is Out parameter
        """
        ...
    def SetCacheMatID(Index: pymxs.runtime.Index, MatID: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetCachePlaybackMode(Index: pymxs.runtime.Index, Mode: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        mode pymxs.runtime.Enums: {#originalRange|#customStart|#customRange|#playbackGraph}
        mode is Out parameter
        """
        ...
    def SetCachePlaybackMode(Index: pymxs.runtime.Index, Mode: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        mode pymxs.runtime.Enums: {#originalRange|#customStart|#customRange|#playbackGraph}
        """
        ...
    ...
class ArchMatMixin:
    def AverageColor(Color: pymxs.runtime.Color, Map: pymxs.runtime.Texturemap) -> pymxs.runtime.Boolean:
        """
        Color is Out parameter
        """
        ...
    def ConvertMaterial(Material: pymxs.runtime.Material, Replace: pymxs.runtime.Boolean = False) -> pymxs.runtime.Boolean: ...
    ...
class LimbFPInterface:
    @property
    def IKTARGET() -> pymxs.runtime.Node: ...
    @property
    def UPNODE() -> pymxs.runtime.Node: ...
    @property
    def ISLEG() -> pymxs.runtime.Boolean: ...
    @property
    def ISARM() -> pymxs.runtime.Boolean: ...
    LMR: pymxs.runtime.Integer  
    @property
    def SYMLIMB() -> pymxs.runtime.Interface: ...
    @property
    def PALM() -> pymxs.runtime.Interface: ...
    @property
    def COLLARBONE() -> pymxs.runtime.Interface: ...
    def CreateIKTarget() -> pymxs.runtime.Node: ...
    def RemoveIKTarget() -> None: ...
    def MoveIKTargetToEndOfLimb(Time: pymxs.runtime.Time) -> None: ...
    def CreateUpNode() -> pymxs.runtime.Node: ...
    def RemoveUpNode() -> None: ...
    def CreatePalmAnkle() -> pymxs.runtime.Interface: ...
    def RemovePalmAnkle() -> None: ...
    def CreateCollarbone() -> pymxs.runtime.Interface: ...
    def RemoveCollarbone() -> None: ...
    ...
class ParticleSkeletonHolder:
    def IsSkinningActivated() -> pymxs.runtime.Boolean: ...
    def ActivateSkinning() -> None: ...
    def DeactivateSkinning() -> None: ...
    ...
class IAutodeskMaterial:
    @property
    def DEFINITIONID() -> pymxs.runtime.String: ...
    @property
    def CONVERTTOGENERIC() -> pymxs.runtime.Material: ...
    @property
    def BASETYPE() -> pymxs.runtime.String: ...
    ...
class Limits:
    def IsEnabled() -> pymxs.runtime.Boolean: ...
    def SetEnabled(Enabled: pymxs.runtime.Boolean) -> None: ...
    def GetLimitedControl() -> pymxs.runtime.Control: ...
    def SetLimitedControl(LimitedCtrl: pymxs.runtime.Control) -> None: ...
    def SetUpperLimit(Time: pymxs.runtime.Time) -> None:
        """
        Value is In and Out parameter
        """
        ...
    def SetLowerLimit(Time: pymxs.runtime.Time) -> None:
        """
        Value is In and Out parameter
        """
        ...
    ...
class Deformable_GPoly:
    def GetNumberFaces() -> pymxs.runtime.Integer: ...
    def GetNumberVertices() -> pymxs.runtime.Integer: ...
    def ValidateNormals() -> None: ...
    def GetMaterialID(FaceIndex: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def Update() -> None: ...
    def LockFaceChannel() -> None: ...
    def UnlockFaceChannel() -> None: ...
    def CopyFaceChannel(Buffer: pymxs.runtime.IntegerArray) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def PasteFaceChannel(Buffer: pymxs.runtime.IntegerArray) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def LockPosChannel() -> pymxs.runtime.Boolean: ...
    def UnlockPosChannel() -> None: ...
    def CopyPosChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def PastePosChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def LockNormalChannel() -> pymxs.runtime.Boolean: ...
    def UnlockNormalChannel() -> None: ...
    def CopyNormalChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def PasteNormalChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def LockTangentChannel() -> pymxs.runtime.Boolean: ...
    def UnlockTangentChannel() -> None: ...
    def CopyTangentChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def PasteTangentChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def LockBitangentChannel() -> pymxs.runtime.Boolean: ...
    def UnlockBitangentChannel() -> None: ...
    def CopyBitangentChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def PasteBitangentChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def GetUVWChannels(Channels: pymxs.runtime.IntegerArray) -> None:
        """
        channels is In and Out parameter
        """
        ...
    def LockUVWChannel(ChannelIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def UnlockUVWChannel(ChannelIndex: pymxs.runtime.Integer) -> None: ...
    def CopyUVWChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    def PasteUVWChannel(Buffer: pymxs.runtime.Point3Array) -> None:
        """
        buffer is In and Out parameter
        """
        ...
    ...
class IXRefMaterial:
    def GetSourceMaterial(ResolveNestedXRef: pymxs.runtime.Boolean) -> pymxs.runtime.Material: ...
    def GetActiveMaterial() -> pymxs.runtime.Material: ...
    ...
class GroupSelection:
    def GetSelectionHandle() -> pymxs.runtime.Integer: ...
    ...
class SpineFPInterface:
    @property
    def BASEHUB() -> pymxs.runtime.Interface: ...
    @property
    def TIPHUB() -> pymxs.runtime.Interface: ...
    SPINEFK: pymxs.runtime.Boolean  
    def SetAbsRel(Time: pymxs.runtime.Time, Value: pymxs.runtime.Float) -> None: ...
    def GetAbsRel(Time: pymxs.runtime.Time, Value: pymxs.runtime.Interval) -> pymxs.runtime.Float:
        """
        Value is In and Out parameter
        """
        ...
    ...
class EditablePoly:
    EDGECHAMFERTYPE: pymxs.runtime.Enum  # Standard, Quad - rt.Name("")
    EDGECHAMFERQUADINTERSECTIONS: pymxs.runtime.Boolean  
    def Hide(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def UnhideAll(MnSelLevel: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def NamedSelCopy(Name: pymxs.runtime.String) -> None: ...
    def NamedSelPaste(UseRenameDialog: pymxs.runtime.Boolean) -> None: ...
    def CreateVertex(Point: pymxs.runtime.Point3, PointInLocalCoords: pymxs.runtime.Boolean = True, Select: pymxs.runtime.Boolean = False) -> pymxs.runtime.Index: ...
    def CreateEdge(Vertex: pymxs.runtime.Index, Select: pymxs.runtime.Boolean = False) -> pymxs.runtime.Index: ...
    def CreateFace(VertexArray: pymxs.runtime.IndexArray, Select: pymxs.runtime.Boolean = False) -> pymxs.runtime.Index: ...
    def CapHoles(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def Delete(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1, DeleteIsoVerts: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def Attach(NodeToAttach: pymxs.runtime.Node, MyNode: pymxs.runtime.Node) -> None: ...
    def DetachToElement(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1, KeepOriginal: pymxs.runtime.Boolean = False) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def SplitEdges(EdgeFlags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def BreakVerts(VertFlags: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def DivideFace(FaceID: pymxs.runtime.Index, VertexCoefficients: pymxs.runtime.FloatArray, Select: pymxs.runtime.Boolean = False) -> pymxs.runtime.Index:
        """
        vertexCoefficients is In and Out parameter
        """
        ...
    def InsertVertexInFace(FaceID: pymxs.runtime.Index, VertexCoefficients: pymxs.runtime.FloatArray, Select: pymxs.runtime.Boolean = False) -> pymxs.runtime.Index:
        """
        vertexCoefficients is In and Out parameter
        """
        ...
    def DivideEdge(EdgeID: pymxs.runtime.Index, Proportion: pymxs.runtime.Float, Select: pymxs.runtime.Boolean = False) -> pymxs.runtime.Index: ...
    def InsertVertexInEdge(EdgeID: pymxs.runtime.Index, Proportion: pymxs.runtime.Float, Select: pymxs.runtime.Boolean = False) -> pymxs.runtime.Index: ...
    def Collapse(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def ExtrudeFaces(Amount: pymxs.runtime.Float, FaceFlags: pymxs.runtime.Integer = 1) -> None: ...
    def BevelFaces(Height: pymxs.runtime.Float, Outline: pymxs.runtime.Float, FaceFlags: pymxs.runtime.Integer = 1) -> None: ...
    def ChamferVertices(Amount: pymxs.runtime.Float, Open: pymxs.runtime.Boolean = False) -> None: ...
    def ChamferEdges(Amount: pymxs.runtime.Float, Open: pymxs.runtime.Boolean = False) -> None: ...
    def Slice(SlicePlaneNormal: pymxs.runtime.Point3, SlicePlaneCenter: pymxs.runtime.Point3, FlaggedFacesOnly: pymxs.runtime.Boolean = False, FaceFlags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def InSlicePlaneMode() -> pymxs.runtime.Boolean: ...
    def CutVertices(StartVertex: pymxs.runtime.Index, EndPosition: pymxs.runtime.Point3, ViewDirection: pymxs.runtime.Point3) -> pymxs.runtime.Index: ...
    def CutEdges(StartEdge: pymxs.runtime.Index, StartProportion: pymxs.runtime.Float, EndEdge: pymxs.runtime.Index, EndProportion: pymxs.runtime.Float, ViewDirection: pymxs.runtime.Point3) -> pymxs.runtime.Index: ...
    def CutFaces(StartFace: pymxs.runtime.Index, StartPosition: pymxs.runtime.Point3, EndPosition: pymxs.runtime.Point3, ViewDirection: pymxs.runtime.Point3) -> pymxs.runtime.Index: ...
    def WeldVerts(Vertex: pymxs.runtime.Index, DestinationPoint: pymxs.runtime.Point3) -> pymxs.runtime.Boolean: ...
    def WeldEdges(Edge: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def WeldFlaggedVertices(VertexFlags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def WeldFlaggedEdges(EdgeFlags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def CreateShape(ShapeName: pymxs.runtime.String, Curved: pymxs.runtime.Boolean, MyNode: pymxs.runtime.Node, EdgeFlags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def MakePlanar(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def MoveToPlane(PlaneNormal: pymxs.runtime.Point3, PlaneOffset: pymxs.runtime.Float, MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def AlignToGrid(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def AlignToView(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def DeleteIsoVerts() -> pymxs.runtime.Boolean: ...
    def MeshSmooth(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def Tessellate(MnSelLevel: pymxs.runtime.Enum, Flags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def ForceSubdivision() -> None: ...
    def SetDiagonal(Face: pymxs.runtime.Index, Corner: pymxs.runtime.Index) -> None: ...
    def Retriangulate(FaceFlags: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def FlipNormals(FaceFlags: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SelectByMaterial(MaterialID: pymxs.runtime.Index, ClearCurrentSelection: pymxs.runtime.Boolean = True) -> None: ...
    def SelectBySmoothGroup(SmoothingGroups: pymxs.runtime.Integer, ClearCurrentSelection: pymxs.runtime.Boolean = True) -> None: ...
    def Autosmooth() -> None: ...
    def ButtonOp(ButtonOpID: pymxs.runtime.Enum) -> None:
        """
        buttonOpID pymxs.runtime.Enums: {#GrowSelection|#ShrinkSelection|#SelectEdgeLoop|#SelectEdgeRing|#HideSelection|#HideUnselected|#UnhideAll|#NamedSelectionCopy|#NamedSelectionPaste|#Cap|#Delete|#Remove|#Detach|#AttachList|#SplitEdges|#BreakVertex|#Collapse|#ResetSlicePlane|#Slice|#WeldSelected|#CreateShape|#MakePlanar|#AlignGrid|#AlignView|#RemoveIsoVerts|#MeshSmooth|#Tessellate|#Update|#SelectByVertexColor|#Retriangulate|#FlipNormals|#SelectByMatID|#SelectBySmoothingGroups|#Autosmooth|#ClearSmoothingGroups|#Extrude|#Bevel|#Inset|#Outline|#ExtrudeAlongSpline|#HingeFromEdge|#ConnectEdges|#ConnectVertices|#Chamfer|#Cut|#RemoveIsoMapVerts|#ToggleShadedFaces|#MakePlanarInX|#MakePlanarInY|#MakePlanarInZ|#Relax|#BridgeBorder|#BridgePolygon|#BridgeEdge|#PreserveUVSettings|#MakeHardEdges|#MakeSmoothEdges|#SelectHardEdges|#SelectSmoothEdges}
        """
        ...
    def ToggleCommandMode(CommandModeID: pymxs.runtime.Enum) -> None:
        """
        commandModeID pymxs.runtime.Enums: {#CreateVertex|#CreateEdge|#CreateFace|#DivideEdge|#DivideFace|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#ChamferVertex|#ChamferEdge|#Bevel|#SlicePlane|#CutVertex|#CutEdge|#CutFace|#Weld|#EditTriangulation|#InsetFace|#QuickSlice|#HingeFromEdge|#PickLiftEdge|#OutlineFace|#EditSoftSelection|#TurnEdge}
        """
        ...
    def EnterPickMode(PickModeID: pymxs.runtime.Enum) -> None:
        """
        pickModeID pymxs.runtime.Enums: {#Attach|#PickShape}
        """
        ...
    def ExitCommandModes() -> None: ...
    def GetCommandMode() -> pymxs.runtime.Enum:
        """
        GetCommandMode pymxs.runtime.Enums: {#CreateVertex|#CreateEdge|#CreateFace|#DivideEdge|#DivideFace|#ExtrudeVertex|#ExtrudeEdge|#ExtrudeFace|#ChamferVertex|#ChamferEdge|#Bevel|#SlicePlane|#CutVertex|#CutEdge|#CutFace|#Weld|#EditTriangulation|#InsetFace|#QuickSlice|#HingeFromEdge|#PickLiftEdge|#OutlineFace|#EditSoftSelection|#TurnEdge
        """
        ...
    def GetPickMode() -> pymxs.runtime.Enum:
        """
        GetPickMode pymxs.runtime.Enums: {#Attach|#PickShape
        """
        ...
    def GetVerticesByFlag(VertexSet: pymxs.runtime.BitArray, FlagsRequested: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer = 0) -> pymxs.runtime.Boolean:
        """
        vertexSet is In and Out parameter
        """
        ...
    def GetEdgesByFlag(EdgeSet: pymxs.runtime.BitArray, FlagsRequested: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer = 0) -> pymxs.runtime.Boolean:
        """
        edgeSet is In and Out parameter
        """
        ...
    def GetFacesByFlag(FaceSet: pymxs.runtime.BitArray, FlagsRequested: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer = 0) -> pymxs.runtime.Boolean:
        """
        faceSet is In and Out parameter
        """
        ...
    def SetVertexFlags(VertexSet: pymxs.runtime.BitArray, FlagsToSet: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer = 0, GenerateUndoRecord: pymxs.runtime.Boolean = True) -> None:
        """
        vertexSet is In and Out parameter
        """
        ...
    def SetEdgeFlags(EdgeSet: pymxs.runtime.BitArray, FlagsToSet: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer = 0, GenerateUndoRecord: pymxs.runtime.Boolean = True) -> None:
        """
        edgeSet is In and Out parameter
        """
        ...
    def SetFaceFlags(FaceSet: pymxs.runtime.BitArray, FlagsToSet: pymxs.runtime.Integer, FlagMask: pymxs.runtime.Integer = 0, GenerateUndoRecord: pymxs.runtime.Boolean = True) -> None:
        """
        faceSet is In and Out parameter
        """
        ...
    def ResetSlicePlane() -> None: ...
    def GetSlicePlane(PlaneNormal: pymxs.runtime.Point3, PlaneCenter: pymxs.runtime.Point3, PlaneSize: pymxs.runtime.Float) -> None:
        """
        planeNormal is In and Out parameter
        planeCenter is In and Out parameter
        planeSize is In and Out parameter
        """
        ...
    def SetSlicePlane(PlaneNormal: pymxs.runtime.Point3, PlaneCenter: pymxs.runtime.Point3, PlaneSize: pymxs.runtime.Float) -> None:
        """
        planeNormal is In and Out parameter
        planeCenter is In and Out parameter
        """
        ...
    def GetVertexData(VertexDataChannel: pymxs.runtime.Integer, NumberSelected: pymxs.runtime.Integer, UniformData: pymxs.runtime.Boolean, VertexFlags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Float:
        """
        numberSelected is In and Out parameter
        uniformData is In and Out parameter
        """
        ...
    def GetEdgeData(EdgeDataChannel: pymxs.runtime.Integer, NumberSelected: pymxs.runtime.Integer, UniformData: pymxs.runtime.Boolean, EdgeFlags: pymxs.runtime.Integer = 1) -> pymxs.runtime.Float:
        """
        numberSelected is In and Out parameter
        uniformData is In and Out parameter
        """
        ...
    def SetVertexData(VertexDataChannel: pymxs.runtime.Integer, Value: pymxs.runtime.Float, VertexFlags: pymxs.runtime.Integer = 1) -> None: ...
    def SetEdgeData(EdgeDataChannel: pymxs.runtime.Integer, Value: pymxs.runtime.Float, EdgeFlags: pymxs.runtime.Integer = 1) -> None: ...
    def ResetVertexData(VertexDataChannel: pymxs.runtime.Integer) -> None: ...
    def ResetEdgeData(EdgeDataChannel: pymxs.runtime.Integer) -> None: ...
    def BeginModifyPerData(MnSelLevel: pymxs.runtime.Enum, DataChannel: pymxs.runtime.Integer) -> None:
        """
        mnSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def InModifyPerData() -> pymxs.runtime.Boolean: ...
    def EndModifyPerData(Success: pymxs.runtime.Boolean) -> None: ...
    def GetMaterialIndex(Determined: pymxs.runtime.Boolean) -> pymxs.runtime.Index:
        """
        determined is In and Out parameter
        """
        ...
    def SetMaterialIndex(Index: pymxs.runtime.Index, FaceFlags: pymxs.runtime.Integer) -> None: ...
    def GetSmoothingGroups(FaceFlag: pymxs.runtime.Integer, AnyFaces: pymxs.runtime.Integer, AllFaces: pymxs.runtime.Integer) -> None:
        """
        anyFaces is In and Out parameter
        allFaces is In and Out parameter
        """
        ...
    def SetSmoothingGroups(BitValues: pymxs.runtime.Integer, BitMask: pymxs.runtime.Integer, FaceFlags: pymxs.runtime.Integer) -> None: ...
    def CollapeDeadStrctures() -> None: ...
    def CollapseDeadStructures() -> None: ...
    def PropogateComponentFlags(MnSelLevelTo: pymxs.runtime.Enum, FlagSetTo: pymxs.runtime.Integer, MnSelLevelFrom: pymxs.runtime.Enum, FlagTestFrom: pymxs.runtime.Integer, AllBitsMustMatch: pymxs.runtime.Boolean = False, Set: pymxs.runtime.Boolean = True, Undoable: pymxs.runtime.Boolean = False) -> pymxs.runtime.Integer:
        """
        mnSelLevelTo pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        mnSelLevelFrom pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def PreviewBegin(PreviewOperation: pymxs.runtime.Enum) -> None:
        """
        previewOperation pymxs.runtime.Enums: {#GrowSelection|#ShrinkSelection|#SelectEdgeLoop|#SelectEdgeRing|#HideSelection|#HideUnselected|#UnhideAll|#NamedSelectionCopy|#NamedSelectionPaste|#Cap|#Delete|#Remove|#Detach|#AttachList|#SplitEdges|#BreakVertex|#Collapse|#ResetSlicePlane|#Slice|#WeldSelected|#CreateShape|#MakePlanar|#AlignGrid|#AlignView|#RemoveIsoVerts|#MeshSmooth|#Tessellate|#Update|#SelectByVertexColor|#Retriangulate|#FlipNormals|#SelectByMatID|#SelectBySmoothingGroups|#Autosmooth|#ClearSmoothingGroups|#Extrude|#Bevel|#Inset|#Outline|#ExtrudeAlongSpline|#HingeFromEdge|#ConnectEdges|#ConnectVertices|#Chamfer|#Cut|#RemoveIsoMapVerts|#ToggleShadedFaces|#MakePlanarInX|#MakePlanarInY|#MakePlanarInZ|#Relax|#BridgeBorder|#BridgePolygon|#BridgeEdge|#PreserveUVSettings|#MakeHardEdges|#MakeSmoothEdges|#SelectHardEdges|#SelectSmoothEdges}
        """
        ...
    def PreviewCancel() -> None: ...
    def PreviewAccept() -> None: ...
    def PreviewInvalidate() -> None: ...
    def PreviewOn() -> pymxs.runtime.Boolean: ...
    def PreviewSetDragging(Dragging: pymxs.runtime.Boolean) -> None: ...
    def PreviewGetDragging() -> pymxs.runtime.Boolean: ...
    def PopupDialog(PopupOperation: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        popupOperation pymxs.runtime.Enums: {#GrowSelection|#ShrinkSelection|#SelectEdgeLoop|#SelectEdgeRing|#HideSelection|#HideUnselected|#UnhideAll|#NamedSelectionCopy|#NamedSelectionPaste|#Cap|#Delete|#Remove|#Detach|#AttachList|#SplitEdges|#BreakVertex|#Collapse|#ResetSlicePlane|#Slice|#WeldSelected|#CreateShape|#MakePlanar|#AlignGrid|#AlignView|#RemoveIsoVerts|#MeshSmooth|#Tessellate|#Update|#SelectByVertexColor|#Retriangulate|#FlipNormals|#SelectByMatID|#SelectBySmoothingGroups|#Autosmooth|#ClearSmoothingGroups|#Extrude|#Bevel|#Inset|#Outline|#ExtrudeAlongSpline|#HingeFromEdge|#ConnectEdges|#ConnectVertices|#Chamfer|#Cut|#RemoveIsoMapVerts|#ToggleShadedFaces|#MakePlanarInX|#MakePlanarInY|#MakePlanarInZ|#Relax|#BridgeBorder|#BridgePolygon|#BridgeEdge|#PreserveUVSettings|#MakeHardEdges|#MakeSmoothEdges|#SelectHardEdges|#SelectSmoothEdges}
        """
        ...
    def ClosePopupDialog() -> None: ...
    def RepeatLastOperation() -> None: ...
    def GetLastOperation() -> pymxs.runtime.Integer: ...
    def GrowSelection(SelLevel: pymxs.runtime.Enum = pymxs.runtime.Name("CurrentLevel")) -> None:
        """
        selLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def ShrinkSelection(SelLevel: pymxs.runtime.Enum = pymxs.runtime.Name("CurrentLevel")) -> None:
        """
        selLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def ConvertSelection(FromSelLevel: pymxs.runtime.Enum, ToSelLevel: pymxs.runtime.Enum, RequireAll: pymxs.runtime.Boolean = False) -> pymxs.runtime.Integer:
        """
        fromSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        toSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        """
        ...
    def SelectBorder() -> None: ...
    def SelectElement() -> None: ...
    def SelectEdgeLoop() -> None: ...
    def SelectEdgeRing() -> None: ...
    def Remove(SelLevel: pymxs.runtime.Enum = pymxs.runtime.Name("CurrentLevel"), Flag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        selLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def DeleteIsoMapVerts() -> pymxs.runtime.Boolean: ...
    def Outline(FaceFlag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def ConnectEdges(EdgeFlag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def ConnectVertices(VertexFlag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def ExtrudeAlongSpline(FaceFlag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def HingeFromEdge(FaceFlag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean: ...
    def ToggleShadedFaces() -> None: ...
    def Bridge(SelLevel: pymxs.runtime.Enum = pymxs.runtime.Name("CurrentLevel"), Flag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        selLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        """
        ...
    def ReadyToBridgeFlagged(SelLevel: pymxs.runtime.Enum = pymxs.runtime.Name("CurrentLevel"), Flag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        selLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        """
        ...
    def TurnDiagonal(Face: pymxs.runtime.Index, Diagonal: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def Relax(SelLevel: pymxs.runtime.Enum = pymxs.runtime.Name("CurrentLevel"), Flag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        selLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def MakePlanarIn(Axis: pymxs.runtime.Enum, SelLevel: pymxs.runtime.Enum = pymxs.runtime.Name("CurrentLevel"), Flag: pymxs.runtime.Integer = 1) -> pymxs.runtime.Boolean:
        """
        axis pymxs.runtime.Enums: {#X|#Y|#Z}
        selLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def GetEPolySelLevel() -> pymxs.runtime.Enum:
        """
        GetEPolySelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel
        """
        ...
    def GetMeshSelLevel() -> pymxs.runtime.Enum:
        """
        GetMeshSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel
        """
        ...
    def GetSelection(SelectionLevel: pymxs.runtime.Enum) -> pymxs.runtime.BitArray:
        """
        selectionLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def SetSelection(SelectionLevel: pymxs.runtime.Enum, Selection: pymxs.runtime.BitArray) -> None:
        """
        selectionLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Face|#CurrentLevel}
        """
        ...
    def GetNumVertices() -> pymxs.runtime.Integer: ...
    def GetVertex(VertexID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetVertexFaceCount(VertexID: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetVertexFace(VertexID: pymxs.runtime.Index, Face: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetVertexEdgeCount(VertexID: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetVertexEdge(VertexID: pymxs.runtime.Index, Edge: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetNumEdges() -> pymxs.runtime.Integer: ...
    def GetEdgeVertex(EdgeID: pymxs.runtime.Index, End: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetEdgeFace(EdgeID: pymxs.runtime.Index, Side: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetNumFaces() -> pymxs.runtime.Integer: ...
    def GetFaceDegree(FaceID: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetFaceVertex(FaceID: pymxs.runtime.Index, Corner: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetFaceEdge(FaceID: pymxs.runtime.Index, Side: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetFaceMaterial(FaceID: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetFaceSmoothingGroups(FaceID: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetNumMapChannels() -> pymxs.runtime.Integer: ...
    def GetMapChannelActive(MapChannel: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetNumMapVertices(MapChannel: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetMapVertex(MapChannel: pymxs.runtime.Integer, VertexID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetMapFaceVertex(MapChannel: pymxs.runtime.Integer, FaceID: pymxs.runtime.Index, Corner: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetMapFaceVert(MapChannel: pymxs.runtime.Integer, FaceID: pymxs.runtime.Index, Corner: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def SetRingShift(RingShiftValue: pymxs.runtime.Integer, MoveOnly: pymxs.runtime.Boolean, Add: pymxs.runtime.Boolean) -> None: ...
    def SetLoopShift(LoopShiftValue: pymxs.runtime.Integer, MoveOnly: pymxs.runtime.Boolean, Add: pymxs.runtime.Boolean) -> None: ...
    def ConvertSelectionToBorder(FromSelLevel: pymxs.runtime.Enum, ToSelLevel: pymxs.runtime.Enum) -> pymxs.runtime.Integer:
        """
        fromSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        toSelLevel pymxs.runtime.Enums: {#Object|#Vertex|#Edge|#Border|#Face|#Element|#CurrentLevel}
        """
        ...
    def CommitPaintDeform() -> None: ...
    def CancelPaintDeform() -> None: ...
    def GetCache() -> pymxs.runtime.Boolean: ...
    def SetCache(On: pymxs.runtime.Boolean) -> None: ...
    def SetCache(Suspend: pymxs.runtime.Boolean) -> None: ...
    def GetCache() -> pymxs.runtime.Integer: ...
    def SetCache(Count: pymxs.runtime.Integer) -> None: ...
    def SetVertexColor(Color: pymxs.runtime.Color, Channel: pymxs.runtime.Enum) -> None:
        """
        Channel pymxs.runtime.Enums: {#VertexColor|#Illumination|#Alpha}
        """
        ...
    def SetFaceColor(Color: pymxs.runtime.Color, Channel: pymxs.runtime.Enum) -> None:
        """
        Channel pymxs.runtime.Enums: {#VertexColor|#Illumination|#Alpha}
        """
        ...
    def GetVertexColor(Channel: pymxs.runtime.Enum) -> pymxs.runtime.Color:
        """
        Channel pymxs.runtime.Enums: {#VertexColor|#Illumination|#Alpha}
        """
        ...
    def GetFaceColor(Channel: pymxs.runtime.Enum) -> pymxs.runtime.Color:
        """
        Channel pymxs.runtime.Enums: {#VertexColor|#Illumination|#Alpha}
        """
        ...
    def SmGrpFloaterVisible() -> pymxs.runtime.Boolean: ...
    def SmGrpFloater() -> None: ...
    def MatIDFloaterVisible() -> pymxs.runtime.Boolean: ...
    def MatIDFloater() -> None: ...
    def MakeHardEdges(Flag: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def MakeSmoothEdges(Flag: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SelectHardEdges() -> None: ...
    def SelectSmoothEdges() -> None: ...
    ...
class Helpers:
    @property
    def EFFECTIVELUMINANCE() -> pymxs.runtime.Color: ...
    ...
class ProCutter:
    def CreateCutter(Cutters: pymxs.runtime.NodeArray, AddMethod: pymxs.runtime.Integer, StockOutsideCutter: pymxs.runtime.Boolean, StockInsideCutter: pymxs.runtime.Boolean, CutterOutsideStock: pymxs.runtime.Boolean, AutoExtractMesh: pymxs.runtime.Boolean, ExplodeByElements: pymxs.runtime.Boolean) -> None:
        """
        cutters is In and Out parameter
        """
        ...
    def AddStocks(Cutter: pymxs.runtime.Node, Stocks: pymxs.runtime.NodeArray, AddMethod: pymxs.runtime.Integer, MatMethod: pymxs.runtime.Integer) -> None:
        """
        stocks is In and Out parameter
        """
        ...
    def GetOperandSel(Node: pymxs.runtime.Node, Sel: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetOperandSel(Node: pymxs.runtime.Node, Sel: pymxs.runtime.Integer, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetDisplayResult(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetDisplayResult(Node: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetShowHiddenOps(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetShowHiddenOps(Node: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetUpdateMode(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SetUpdateMode(Node: pymxs.runtime.Node, Mode: pymxs.runtime.Integer) -> None: ...
    def GetDecimationPercent(Node: pymxs.runtime.Node) -> pymxs.runtime.Float: ...
    def SetDecimationPercent(Boolnode: pymxs.runtime.Node, Percent: pymxs.runtime.Float) -> None:
        """
        percent Validated by Range: 0.0 to 100.0
        """
        ...
    def GetMakeQuad(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetMakeQuad(Boolnode: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetQuadSizePercent(Node: pymxs.runtime.Node) -> pymxs.runtime.Float: ...
    def SetQuadSizePercent(Boolnode: pymxs.runtime.Node, Percent: pymxs.runtime.Float) -> None:
        """
        percent Validated by Range: 0.0 to 100.0
        """
        ...
    def GetPlanarEdgeRemoval(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SetPlanarEdgeRemoval(Node: pymxs.runtime.Node, Mode: pymxs.runtime.Integer) -> None: ...
    ...
class Spline_Vol__Select:
    def Version() -> pymxs.runtime.Integer: ...
    def RemoveInfluence(Object: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    ...
class BirthTextureOperator:
    def Initialize() -> None: ...
    ...
class IAutodeskTexmap:
    @property
    def DEFINITIONID() -> pymxs.runtime.String: ...
    @property
    def BASETYPE() -> pymxs.runtime.String: ...
    ...
class IADTStyle:
    NAME: pymxs.runtime.String  
    @property
    def NUMCOMPONENTS() -> pymxs.runtime.Integer: ...
    @property
    def NUMINSTANCES() -> pymxs.runtime.Integer: ...
    def GetCategory() -> pymxs.runtime.Interface: ...
    def SetInstance(StyleInst: pymxs.runtime.Node, HasCompVisOvrd: pymxs.runtime.Boolean) -> pymxs.runtime.Integer: ...
    def RemoveInstance(StyleInst: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetComponent(StyleInstIterator: pymxs.runtime.Integer, CompInst: pymxs.runtime.Node, CompName: pymxs.runtime.String, HasMtlOvrd: pymxs.runtime.Boolean, KeepRelTransf: pymxs.runtime.Boolean) -> pymxs.runtime.Interface: ...
    def RemoveComponent(CompName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetCompositeStyle() -> pymxs.runtime.Interface: ...
    def GetComponents(Components: pymxs.runtime.InterfaceArray) -> pymxs.runtime.Integer:
        """
        components is In and Out parameter
        """
        ...
    def GetInstances(Instances: pymxs.runtime.NodeArray, MtlOverrides: pymxs.runtime.BitArray) -> pymxs.runtime.Integer:
        """
        instances is In and Out parameter
        mtlOverrides is In and Out parameter
        """
        ...
    def FindInstance(Node: pymxs.runtime.Node, MtlOverride: pymxs.runtime.Boolean) -> pymxs.runtime.Integer:
        """
        mtlOverride is In and Out parameter
        """
        ...
    ...
class FlexOps:
    def Paint() -> None: ...
    def SetReference() -> None: ...
    def Reset() -> None: ...
    def AddForce(Force: pymxs.runtime.Node) -> None: ...
    def RemoveForce(Force: pymxs.runtime.Integer) -> None: ...
    def NumberVertices() -> pymxs.runtime.Integer: ...
    def SelectVertices(Sel: pymxs.runtime.BitArray, Update: pymxs.runtime.Boolean) -> None: ...
    def GetSelectedVertices() -> pymxs.runtime.BitArray: ...
    def GetVertexWeight(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetVertexWeight(Indices: pymxs.runtime.IntegerArray, Values: pymxs.runtime.FloatArray) -> None: ...
    def SetEdgeList(Sel: pymxs.runtime.BitArray, Update: pymxs.runtime.Boolean) -> None: ...
    def GetEdgeList() -> pymxs.runtime.BitArray: ...
    def AddSpringFromSelection(Flag: pymxs.runtime.Integer, AddDuplicates: pymxs.runtime.Boolean) -> None: ...
    def AddSpring(IndexA: pymxs.runtime.Integer, IndexB: pymxs.runtime.Integer, Flag: pymxs.runtime.Integer, AddDuplicates: pymxs.runtime.Boolean) -> None: ...
    def RemoveAllSprings() -> None: ...
    def AddSpringButton() -> None: ...
    def RemoveSpringButton() -> None: ...
    def OptionsButton() -> None: ...
    def CreateSimpleSoftButton() -> None: ...
    def RemoveSpringByEnd(A: pymxs.runtime.Integer) -> None: ...
    def RemoveSpringByEnds(A: pymxs.runtime.Integer, B: pymxs.runtime.Integer) -> None: ...
    def RemoveSpringByIndex(Index: pymxs.runtime.Integer) -> None: ...
    def NumberSprings() -> pymxs.runtime.Integer: ...
    def GetSpringGroup(Index: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def SetSpringGroup(Index: pymxs.runtime.Integer, Group: pymxs.runtime.Integer) -> None: ...
    def GetSpringLength(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def SetSpringLength(Index: pymxs.runtime.Integer, Length: pymxs.runtime.Float) -> None: ...
    def GetIndex(A: pymxs.runtime.Integer, B: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    ...
class NewRead:
    def IsNew(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def IsAllNew() -> pymxs.runtime.Boolean: ...
    def IsAllOld() -> pymxs.runtime.Boolean: ...
    ...
class NewWrite:
    def SetNew(Index: pymxs.runtime.Integer) -> None: ...
    def SetOld(Index: pymxs.runtime.Integer) -> None: ...
    def SetAllNew() -> None: ...
    def SetAllOld() -> None: ...
    ...
class IMultiOutputConsumer:
    @property
    def NUMINPUTS() -> pymxs.runtime.Integer: ...
    def SetOutputToInput(Input: pymxs.runtime.Index, Output: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def GetOutputRefTargetFromInput(Input: pymxs.runtime.Index) -> pymxs.runtime.MaxObject: ...
    def GetOutputIndexFromInput(Input: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def CanAssignOutputToInput(Input: pymxs.runtime.Index, Output: pymxs.runtime.MaxObject) -> pymxs.runtime.Boolean: ...
    def GetInputName(Input: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        GetInputName - no automatic redraw after invoked
        """
        ...
    def GetInputLocalizedName(Input: pymxs.runtime.Index) -> pymxs.runtime.String:
        """
        GetInputLocalizedName - no automatic redraw after invoked
        """
        ...
    ...
class IdRead:
    def GetID(Index: pymxs.runtime.Integer, ParticleIndex: pymxs.runtime.Integer, ParticleBorn: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetParticleIndex(Index: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetParticleBorn(Index: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    ...
class IdWrite:
    def SetID(Index: pymxs.runtime.Integer, ParticleIndex: pymxs.runtime.Integer, ParticleBorn: pymxs.runtime.Integer) -> None: ...
    ...
class BoolRead:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.Boolean: ...
    ...
class BoolWrite:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.Boolean) -> None: ...
    def SetValueGlobal(Value: pymxs.runtime.Boolean) -> None: ...
    ...
class IntRead:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.Integer: ...
    ...
class IntWrite:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.Integer) -> None: ...
    def SetValueGlobal(Value: pymxs.runtime.Integer) -> None: ...
    ...
class MaxFluidLiquidObject:
    def CreateSolver(SolverIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        solverIndex is Out parameter
        """
        ...
    def CloneSolver(Index: pymxs.runtime.Index, CloneName: pymxs.runtime.String, CloneIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        cloneName is Out parameter
        cloneIndex is Out parameter
        """
        ...
    def DeleteSolver(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def NumberSolvers() -> pymxs.runtime.Integer: ...
    def AddEmitter(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberEmitters() -> pymxs.runtime.Integer: ...
    def GetEmitter(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteEmitter(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddCollider(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberColliders() -> pymxs.runtime.Integer: ...
    def GetCollider(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteCollider(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddKillPlane(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberKillPlanes() -> pymxs.runtime.Integer: ...
    def GetKillPlane(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteKillPlane(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddFoamMask(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberFoamMasks() -> pymxs.runtime.Integer: ...
    def GetFoamMask(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteFoamMask(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddGuideMesh(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberGuideMeshes() -> pymxs.runtime.Integer: ...
    def GetGuideMesh(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteGuideMesh(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddGuideEmitter(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberGuideEmitters() -> pymxs.runtime.Integer: ...
    def GetGuideEmitter(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteGuideEmitter(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddMotionField(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberMotionFields() -> pymxs.runtime.Integer: ...
    def GetMotionField(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteMotionField(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AddChannelField(Node: pymxs.runtime.Node) -> pymxs.runtime.Index: ...
    def GetNumberChannelFields() -> pymxs.runtime.Integer: ...
    def GetChannelField(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def DeleteChannelField(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    ...
class FloatRead:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.Float: ...
    ...
class FloatWrite:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.Float) -> None: ...
    def SetValueGlobal(Value: pymxs.runtime.Float) -> None: ...
    ...
class VectorMap:
    def Reload() -> None: ...
    def Refresh() -> None: ...
    def ViewImage() -> None: ...
    def SetSvgString(FnSetSvgString: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    ...
class PfIntegrator:
    def ProceedSync(Container: pymxs.runtime.IObject, TimeTick: pymxs.runtime.Time, TickFraction: pymxs.runtime.Float, SelectedOnly: pymxs.runtime.Boolean, Selected: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean: ...
    def ProceedASync(Container: pymxs.runtime.IObject, TimeTick: pymxs.runtime.TimeArray, TickFraction: pymxs.runtime.FloatArray, SelectedOnly: pymxs.runtime.Boolean, Selected: pymxs.runtime.BitArray) -> pymxs.runtime.Boolean: ...
    ...
class ParticleViewManager:
    def OpenParticleView(PfEngine: pymxs.runtime.Object) -> pymxs.runtime.Boolean: ...
    def UpdateParticleViews(AdditionsOnly: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def PreUpdateParticleViews(AdditionsOnly: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def PostUpdateParticleViews(AdditionsOnly: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def UpdateOnHold() -> pymxs.runtime.Boolean: ...
    def NumActionClasses() -> pymxs.runtime.Integer: ...
    def ActionClass(Index: pymxs.runtime.Index) -> pymxs.runtime.Class: ...
    def ActionName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def ParticleViewOpenClose() -> pymxs.runtime.Boolean: ...
    def ParticleFlowOnOff(SelectedOnly: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    ...
class CATObjectFPInterface:
    @property
    def TMCONTROLLER() -> pymxs.runtime.Control: ...
    USECUSTOMMESH: pymxs.runtime.Boolean  
    def CopyMeshFromNode(Node: pymxs.runtime.Node) -> None: ...
    def PasteRig(Pasteobject: pymxs.runtime.Object, Mirrordata: pymxs.runtime.Boolean) -> None: ...
    ...
class ConstraintHelperInterface:
    def Init() -> None: ...
    def IsBreaking() -> pymxs.runtime.Boolean: ...
    def BreakConstraint() -> None: ...
    ...
class ISBS:
    def GetCurrentPackageName() -> pymxs.runtime.String: ...
    def GetCurrentGraphName() -> pymxs.runtime.String: ...
    def GetCurrentOutputName() -> pymxs.runtime.String: ...
    def GetOutputsNamesFromCurrentGraph() -> pymxs.runtime.StringArray: ...
    def SetPackageAndGraphNames(PackageName: pymxs.runtime.String, GraphName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def SetCurrentOutputName(OutputName: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def SelectGraph() -> None: ...
    ...
class PolyBoolean:
    def CreateBooleanObjects(Boolnode: pymxs.runtime.Node, Nodes: pymxs.runtime.NodeArray, Op: pymxs.runtime.Integer, AddMethod: pymxs.runtime.Integer, MatMethod: pymxs.runtime.Integer) -> None: ...
    def CreateBooleanObject(Boolnode: pymxs.runtime.Node, Node: pymxs.runtime.Node, Op: pymxs.runtime.Integer, AddMethod: pymxs.runtime.Integer, MatMethod: pymxs.runtime.Integer) -> None: ...
    def SetOperandA(Boolnode: pymxs.runtime.Node) -> None: ...
    def SetOperandB(Boolnode: pymxs.runtime.Node, Node: pymxs.runtime.Node, AddMethod: pymxs.runtime.Integer, MatMethod: pymxs.runtime.Integer) -> None: ...
    def GetOperandSel(Node: pymxs.runtime.Node, Sel: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetOperandSel(Node: pymxs.runtime.Node, Sel: pymxs.runtime.Integer, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetBoolOp(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SetBoolOp(Node: pymxs.runtime.Node, Op: pymxs.runtime.Integer) -> None: ...
    def GetDisplayResult(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetDisplayResult(Node: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetShowHiddenOps(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetShowHiddenOps(Node: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetUpdateMode(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SetUpdateMode(Node: pymxs.runtime.Node, Mode: pymxs.runtime.Integer) -> None: ...
    def GetOptimize(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetOptimize(Node: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetCookieCut(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetCookieCut(Node: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetImprint(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetImprint(Node: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetDecimationPercent(Node: pymxs.runtime.Node) -> pymxs.runtime.Float: ...
    def SetDecimationPercent(Boolnode: pymxs.runtime.Node, Percent: pymxs.runtime.Float) -> None:
        """
        percent Validated by Range: 0.0 to 100.0
        """
        ...
    def GetMakeQuad(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def SetMakeQuad(Boolnode: pymxs.runtime.Node, Flag: pymxs.runtime.Boolean) -> None: ...
    def GetQuadSizePercent(Node: pymxs.runtime.Node) -> pymxs.runtime.Float: ...
    def SetQuadSizePercent(Boolnode: pymxs.runtime.Node, Percent: pymxs.runtime.Float) -> None:
        """
        percent Validated by Range: 0.0 to 100.0
        """
        ...
    def GetPlanarEdgeRemoval(Node: pymxs.runtime.Node) -> pymxs.runtime.Integer: ...
    def SetPlanarEdgeRemoval(Node: pymxs.runtime.Node, Mode: pymxs.runtime.Integer) -> None: ...
    ...
class Point3Read:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.Point3: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.Point3: ...
    def GetBoundingBox(MinCorner: pymxs.runtime.Point3, MaxCorner: pymxs.runtime.Point3) -> None:
        """
        minCorner is In and Out parameter
        maxCorner is In and Out parameter
        """
        ...
    def GetMaxLength() -> pymxs.runtime.Float: ...
    ...
class Point3Write:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.Point3) -> None:
        """
        Value is In and Out parameter
        """
        ...
    def SetValueGlobal(Value: pymxs.runtime.Point3) -> None:
        """
        Value is In and Out parameter
        """
        ...
    def BuildBoundingBox() -> None: ...
    def UpdateMaxLength() -> None: ...
    ...
class PreciseTimeValueRead:
    def GetTick(Index: pymxs.runtime.Integer) -> pymxs.runtime.Time: ...
    def GetFraction(Index: pymxs.runtime.Integer) -> pymxs.runtime.Float: ...
    def GetTickFraction(Index: pymxs.runtime.Integer, Tick: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    def IsSync() -> pymxs.runtime.Boolean: ...
    ...
class PreciseTimeValueWrite:
    def SetTick(Index: pymxs.runtime.Integer, Tick: pymxs.runtime.Time) -> None: ...
    def SetFraction(Index: pymxs.runtime.Integer, Fraction: pymxs.runtime.Float) -> None: ...
    def SetTickFraction(Index: pymxs.runtime.Integer, Tick: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    ...
class PfActionListPool:
    def NumActionLists() -> pymxs.runtime.Integer: ...
    def GetActionList(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def HasActionList(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def HasActionListByHandle(Handle: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    ...
class Hair:
    def LaunchGUI(Instance: pymxs.runtime.Node) -> None: ...
    def ConvertToMesh(Instance: pymxs.runtime.Node) -> pymxs.runtime.Node: ...
    def ConvertHairsToSplines(Instance: pymxs.runtime.Node) -> pymxs.runtime.Node: ...
    def ConvertGuidesToSplines(Instance: pymxs.runtime.Node) -> pymxs.runtime.Node: ...
    def RecombFromSplines(ShapeNode: pymxs.runtime.Node, Instance: pymxs.runtime.Node) -> None: ...
    def SavePreset(PresetName: pymxs.runtime.Filename) -> None: ...
    def LoadPreset(PresetName: pymxs.runtime.Filename) -> None: ...
    def CopyHairdo(Instance: pymxs.runtime.Node) -> None: ...
    def PasteHairdo(Instance: pymxs.runtime.Node) -> None: ...
    def ResetRest(Instance: pymxs.runtime.Node) -> None: ...
    def RegrowHair(Instance: pymxs.runtime.Node) -> None: ...
    def SetInstance(Instance: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def ClearInstance() -> None: ...
    def InitStyling(DoStyling: pymxs.runtime.Boolean, HairSelLevel: pymxs.runtime.Integer) -> None: ...
    def InitHairSelection(HairSelLevel: pymxs.runtime.Integer) -> None: ...
    def SetGuideVertMarkerType(MarkerType: pymxs.runtime.Integer) -> None: ...
    def InverseHairSelection() -> None: ...
    def RotateHairSelection() -> None: ...
    def ExpandHairSelection() -> None: ...
    def HideSelectedGuides() -> None: ...
    def ShowHiddenGuides() -> None: ...
    def InitBrushMode(BrushMode: pymxs.runtime.Integer, Size: pymxs.runtime.Float) -> None: ...
    def InitCutMode(Size: pymxs.runtime.Float) -> None: ...
    def StopStylingMode() -> None: ...
    def SetBrushMode(BrushMode: pymxs.runtime.Integer) -> None: ...
    def AttenuateHair() -> None: ...
    def PopSelectedHair() -> None: ...
    def PopZeroSizedHair() -> None: ...
    def RecombHair() -> None: ...
    def ReplaceRestHairs() -> None: ...
    def ToggleCollisions() -> None: ...
    def ToggleHairs(On: pymxs.runtime.Boolean) -> None: ...
    def LockHair() -> None: ...
    def UnLockHair() -> None: ...
    def Split() -> None: ...
    def Merge() -> None: ...
    def SetMRMtl(Mtl: pymxs.runtime.Material, Apply: pymxs.runtime.Boolean) -> None: ...
    def GetHairInstanceMesh() -> pymxs.runtime.Mesh: ...
    def SplineLock(ShapeNode: pymxs.runtime.Node) -> None: ...
    def SplineUnLock() -> None: ...
    ...
class PluginMgrAction:
    def Show() -> pymxs.runtime.Boolean: ...
    ...
class PfSystemPool:
    def NumPFSystems() -> pymxs.runtime.Integer: ...
    def GetPFSystem(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def HasPFSystem(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def HasPFSystemByHandle(Handle: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    ...
class ILayerFloatFPInterface:
    SETUPVAL: pymxs.runtime.Float  
    ...
class Actions:
    def Show() -> pymxs.runtime.Boolean: ...
    ...
class AngaxisRead:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.AngleAxis: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.AngleAxis: ...
    ...
class AngaxisWrite:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.AngleAxis) -> None:
        """
        Value is In and Out parameter
        """
        ...
    def SetValueGlobal(Value: pymxs.runtime.AngleAxis) -> None:
        """
        Value is In and Out parameter
        """
        ...
    ...
class LayerInfoFPInterface:
    LAYERNAME: pymxs.runtime.String  
    LAYERCOLOUR: pymxs.runtime.Color  
    @property
    def LAYERTYPE() -> pymxs.runtime.String: ...
    LAYERENABLED: pymxs.runtime.Boolean  
    TRANSFORMNODEON: pymxs.runtime.Boolean  
    REMOVEDISPLACEMENT: pymxs.runtime.Boolean  
    @property
    def LAYERINDEX() -> pymxs.runtime.Index: ...
    @property
    def CATPARENT() -> pymxs.runtime.Node: ...
    def GetTransformNode() -> pymxs.runtime.Node: ...
    ...
class QuatRead:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.Quat: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.Quat: ...
    ...
class QuatWrite:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.Quat) -> None: ...
    def SetValueGlobal(Value: pymxs.runtime.Quat) -> None: ...
    ...
class ChannelContainer:
    def GetPublicChannel(InterfaceID: pymxs.runtime.Integer) -> pymxs.runtime.IObject: ...
    def GetPrivateChannel(InterfaceID: pymxs.runtime.Integer, Owner: pymxs.runtime.Object, Creator: pymxs.runtime.Node) -> pymxs.runtime.IObject: ...
    def AddChannel(Channel: pymxs.runtime.IObject) -> pymxs.runtime.Boolean: ...
    ...
class Matrix3Read:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.Matrix3: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.Matrix3: ...
    ...
class Matrix3Write:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.Matrix3) -> None:
        """
        Value is In and Out parameter
        """
        ...
    def SetValueGlobal(Value: pymxs.runtime.Matrix3) -> None:
        """
        Value is In and Out parameter
        """
        ...
    ...
class PointCacheWSM:
    def Record() -> None: ...
    def SetCache() -> None: ...
    def EnableMods() -> None: ...
    def DisableMods() -> None: ...
    ...
class ParticleCache:
    def Record() -> None: ...
    def SetCache() -> None: ...
    def EnableMods() -> None: ...
    def DisableMods() -> None: ...
    ...
class Tprofiler:
    PROFILERSAMPLING: pymxs.runtime.Boolean  
    BUFFERSIZE: pymxs.runtime.Integer  
    def OpenProfiler() -> None: ...
    def GetEventCategoryStat(Type: pymxs.runtime.Enum) -> pymxs.runtime.Integer:
        """
        type pymxs.runtime.Enums: {#DirtyPropagation|#Evaluation|#Rendering|#AsyncEvents|#AttributeChange}
        """
        ...
    def SaveSamplingData(Filename: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    def LoadSamplingData(Filename: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    ...
class MeshMapRead:
    def GetNumMaps() -> pymxs.runtime.Integer: ...
    def MapSupport(MapChannel: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetMapReadChannel(MapChannel: pymxs.runtime.Integer) -> pymxs.runtime.Interface: ...
    ...
class MeshMapWrite:
    def SetNumMaps(Count: pymxs.runtime.Integer, Keep: pymxs.runtime.Boolean) -> None: ...
    def SetMapSupport(MapChannel: pymxs.runtime.Integer, Support: pymxs.runtime.Boolean) -> None: ...
    def GetMapChannel(MapChannel: pymxs.runtime.Integer) -> pymxs.runtime.Interface: ...
    def GetMapChannelObject(MapChannel: pymxs.runtime.Integer) -> pymxs.runtime.IObject: ...
    ...
class INodeRead:
    def GetValue(Index: pymxs.runtime.Integer) -> pymxs.runtime.Node: ...
    def IsGlobal() -> pymxs.runtime.Boolean: ...
    def GetValueGlobal() -> pymxs.runtime.Node: ...
    ...
class INodeWrite:
    def SetValue(Index: pymxs.runtime.Integer, Value: pymxs.runtime.Node) -> None: ...
    def SetValueGlobal(Value: pymxs.runtime.Node) -> None: ...
    ...
class Default_Sound:
    def Open() -> None: ...
    ...
class CATMotionFunctions:
    FOOTSTEPMASKS: pymxs.runtime.Boolean  
    MANUALUPDATES: pymxs.runtime.Boolean  
    def CreateCATWindow() -> None: ...
    def LoadPreset(Filename: pymxs.runtime.String, Newlayer: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def SavePreset(Filename: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def AddLayer() -> None: ...
    def RemoveLayer(Index: pymxs.runtime.Integer) -> None: ...
    def CreateFootPrints() -> None: ...
    def ResetFootPrints(BOnlySelected: pymxs.runtime.Boolean) -> None: ...
    def RemoveFootPrints(BOnlySelected: pymxs.runtime.Boolean) -> None: ...
    def SnapToGround(Grnd: pymxs.runtime.Node, BOnlySelected: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def UpdateDistCovered() -> None: ...
    def UpdateSteps() -> None: ...
    ...
class PfSystem:
    def GetMultiplier(Time: pymxs.runtime.Time) -> pymxs.runtime.Float: ...
    def GetBornAllowance() -> pymxs.runtime.Integer: ...
    def HasEmitter() -> pymxs.runtime.Boolean: ...
    def GetEmitterType(Time: pymxs.runtime.Time) -> pymxs.runtime.Integer: ...
    def GetEmitterDimensions(Time: pymxs.runtime.Time, Dimensions: pymxs.runtime.FloatArray) -> None:
        """
        dimensions is In and Out parameter
        """
        ...
    def GetEmitterGeometry(Time: pymxs.runtime.Time) -> pymxs.runtime.Mesh: ...
    def IsEmitterGeometryAnimated() -> pymxs.runtime.Boolean: ...
    def SetRenderState(RenderState: pymxs.runtime.Boolean) -> None: ...
    def IsRenderState() -> pymxs.runtime.Boolean: ...
    def GetIntegrationStep() -> pymxs.runtime.Time: ...
    def GetUpdateType() -> pymxs.runtime.Integer: ...
    def NumParticlesSelected() -> pymxs.runtime.Integer: ...
    def GetSelectedParticleID(Index: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def IsParticleSelected(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def NumActionListsSelected() -> pymxs.runtime.Integer: ...
    def GetSelectedActionList(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def IsActionListSelected(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def IsRunningScript() -> pymxs.runtime.Boolean: ...
    ...
class InitialEvents:
    def GetNumInitialActionLists() -> pymxs.runtime.Integer: ...
    def GetInitialActionList(Index: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def AppendInitialActionList(ActionList: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def InsertInitialActionList(ActionList: pymxs.runtime.Node, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def RemoveInitialActionList(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def HasInitialActionList(ActionList: pymxs.runtime.Node, Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        Index is In and Out parameter
        """
        ...
    ...
class ParticleObjectExt:
    PARTICLEINDEX: pymxs.runtime.Index  # Range: 1 to 100000000
    PARTICLEID: pymxs.runtime.Index  # Range: 1 to 100000000
    PARTICLEAGE: pymxs.runtime.Time  # Range: 0f to 625000f
    PARTICLEGROUPTIME: pymxs.runtime.Time  # Range: 0f to 625000f
    PARTICLEPOSITION: pymxs.runtime.Point3  
    PARTICLESPEED: pymxs.runtime.Point3  
    PARTICLEORIENTATION: pymxs.runtime.Point3  
    PARTICLESPIN: pymxs.runtime.AngleAxis  
    PARTICLESCALE: pymxs.runtime.Float  # Range: 0.0 to 1e+09
    PARTICLESCALEXYZ: pymxs.runtime.Point3  
    PARTICLETM: pymxs.runtime.Matrix3  
    PARTICLESELECTED: pymxs.runtime.Boolean  
    PARTICLESHAPE: pymxs.runtime.Mesh  
    def UpdateParticles(ParticleSystem: pymxs.runtime.Node, Time: pymxs.runtime.Time) -> None: ...
    def NumParticles() -> pymxs.runtime.Integer: ...
    def NumParticlesGenerated() -> pymxs.runtime.Integer: ...
    def SetEveryStepUpdateScriptLine(Script: pymxs.runtime.String) -> None: ...
    def SetEveryStepUpdateScriptFile(FileName: pymxs.runtime.Filename) -> None: ...
    def SetFinalStepUpdateScriptLine(Script: pymxs.runtime.String) -> None: ...
    def SetFinalStepUpdateScriptFile(FileName: pymxs.runtime.Filename) -> None: ...
    def GetUpdateTime() -> pymxs.runtime.Time: ...
    def GetUpdateInterval(TimeStart: pymxs.runtime.Time, TimeEnd: pymxs.runtime.Time) -> None:
        """
        TimeStart is In and Out parameter
        TimeEnd is In and Out parameter
        """
        ...
    def GetParticleID(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def HasParticleID(ParticleBornIndex: pymxs.runtime.Index, ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        particleIndex is In and Out parameter
        """
        ...
    def GetParticleGroup(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Node: ...
    def GetParticleIndex(ParticleBornIndex: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def GetParticleAge(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def GetParticleAgeByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetParticleAge(ParticleIndex: pymxs.runtime.Index, Age: pymxs.runtime.Time) -> None: ...
    def SetParticleAgeByID(ParticleID: pymxs.runtime.Index, Age: pymxs.runtime.Time) -> None: ...
    def GetParticleLifeSpan(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def GetParticleLifeSpanByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetParticleLifeSpan(ParticleIndex: pymxs.runtime.Index, LifeSpan: pymxs.runtime.Time) -> None: ...
    def SetParticleLifeSpanByID(ParticleID: pymxs.runtime.Index, LifeSpan: pymxs.runtime.Time) -> None: ...
    def GetParticleGroupTime(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def GetParticleGroupTimeByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetParticleGroupTime(ParticleIndex: pymxs.runtime.Index, Age: pymxs.runtime.Time) -> None: ...
    def SetParticleGroupTimeByID(ParticleID: pymxs.runtime.Index, Age: pymxs.runtime.Time) -> None: ...
    def GetParticlePosition(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticlePositionByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticlePosition(ParticleIndex: pymxs.runtime.Index, Position: pymxs.runtime.Point3) -> None: ...
    def SetParticlePositionByID(ParticleID: pymxs.runtime.Index, Position: pymxs.runtime.Point3) -> None: ...
    def GetParticleSpeed(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleSpeedByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleSpeed(ParticleIndex: pymxs.runtime.Index, Speed: pymxs.runtime.Point3) -> None: ...
    def SetParticleSpeedByID(ParticleID: pymxs.runtime.Index, Speed: pymxs.runtime.Point3) -> None: ...
    def GetParticleOrientation(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleOrientationByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleOrientation(ParticleIndex: pymxs.runtime.Index, Orientation: pymxs.runtime.Point3) -> None: ...
    def SetParticleOrientationByID(ParticleID: pymxs.runtime.Index, Orientation: pymxs.runtime.Point3) -> None: ...
    def GetParticleSpin(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.AngleAxis: ...
    def GetParticleSpinByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.AngleAxis: ...
    def SetParticleSpin(ParticleIndex: pymxs.runtime.Index, Spin: pymxs.runtime.AngleAxis) -> None: ...
    def SetParticleSpinByID(ParticleID: pymxs.runtime.Index, Spin: pymxs.runtime.AngleAxis) -> None: ...
    def GetParticleScale(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def GetParticleScaleByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetParticleScale(ParticleIndex: pymxs.runtime.Index, Scale: pymxs.runtime.Float) -> None: ...
    def SetParticleScaleByID(ParticleID: pymxs.runtime.Index, Scale: pymxs.runtime.Float) -> None: ...
    def GetParticleScaleXYZ(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleScaleXYZByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleScaleXYZ(ParticleIndex: pymxs.runtime.Index, ScaleXYZ: pymxs.runtime.Point3) -> None: ...
    def SetParticleScaleXYZByID(ParticleID: pymxs.runtime.Index, ScaleXYZ: pymxs.runtime.Point3) -> None: ...
    def GetParticleTM(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def GetParticleTMByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def SetParticleTM(ParticleIndex: pymxs.runtime.Index, TM: pymxs.runtime.Matrix3) -> None: ...
    def SetParticleTMByID(ParticleID: pymxs.runtime.Index, TM: pymxs.runtime.Matrix3) -> None: ...
    def GetParticleSelected(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetParticleSelectedByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetParticleSelected(ParticleIndex: pymxs.runtime.Index, Selected: pymxs.runtime.Boolean) -> None: ...
    def SetParticleSelectedByID(ParticleID: pymxs.runtime.Index, Selected: pymxs.runtime.Boolean) -> None: ...
    def GetParticleShape(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Mesh: ...
    def GetParticleShapeByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Mesh: ...
    def SetParticleShape(ParticleIndex: pymxs.runtime.Index, Shape: pymxs.runtime.Mesh) -> None: ...
    def SetParticleShapeByID(ParticleID: pymxs.runtime.Index, Shape: pymxs.runtime.Mesh) -> None: ...
    def SetShapeForAllParticles(Shape: pymxs.runtime.Mesh) -> None: ...
    ...
class ProSound:
    def IsActive() -> pymxs.runtime.Boolean: ...
    def Init(Keep: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Unload() -> pymxs.runtime.Boolean: ...
    def Version() -> pymxs.runtime.Integer: ...
    def IsPlaybackActive() -> pymxs.runtime.Boolean: ...
    def SetPlaybackActive(Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def IsRenderActive() -> pymxs.runtime.Boolean: ...
    def SetRenderActive(Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def IsMetroActive() -> pymxs.runtime.Boolean: ...
    def SetMetroActive(Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def MaxTracks() -> pymxs.runtime.Integer: ...
    def NumTracks() -> pymxs.runtime.Integer: ...
    def ReloadAll() -> pymxs.runtime.Boolean: ...
    def ShiftAll(Ticks: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def Active(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetActive(Index: pymxs.runtime.Index, Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def Name(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def Replace(Index: pymxs.runtime.Index, Name: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    def Append(Name: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    def Delete(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def Start(Index: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetStart(Index: pymxs.runtime.Index, Tick: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def End(Index: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetEnd(Index: pymxs.runtime.Index, Tick: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def Shift(Index: pymxs.runtime.Index, Tick: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def SampleRate(Index: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def Channels(Index: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def FileLength(Index: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def Export(Name: pymxs.runtime.String, Start: pymxs.runtime.Time, End: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def PlayOnce() -> pymxs.runtime.Boolean: ...
    def SetPlayOnce(Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def BackwardScrub() -> pymxs.runtime.Boolean: ...
    def SetBackwardScrub(Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def UsePlaybackRange() -> pymxs.runtime.Boolean: ...
    def SetUsePlaybackRange(Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def SetPlaybackStart(Start: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def SetPlaybackEnd(End: pymxs.runtime.Time) -> pymxs.runtime.Boolean: ...
    def PingPong() -> pymxs.runtime.Boolean: ...
    def SetPingPong(Active: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def UseLoops(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetNumLoops(Index: pymxs.runtime.Index, Loops: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def Open() -> None: ...
    def Close() -> None: ...
    def NumLoops(Index: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def Step() -> None: ...
    def StepBack() -> None: ...
    ...
class PhysXWorld:
    def AddCollisionGroupExclusionPair(CollisionGroupIndex: pymxs.runtime.Integer, ) -> pymxs.runtime.Boolean: ...
    def RemoveCollisionGroupExclusionPair(CollisionGroupIndex: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def HasCollisionGroupExclusionPair(CollisionGroupIndex: pymxs.runtime.Integer, ) -> pymxs.runtime.Boolean: ...
    def BakeSimulation() -> pymxs.runtime.Boolean: ...
    def RemoveBakedSimulation() -> None: ...
    def Playback() -> None: ...
    ...
class ProfileTools:
    USEPROFILETOOLS: pymxs.runtime.Boolean  
    def GetCalcTime(Time: pymxs.runtime.Time) -> pymxs.runtime.Float: ...
    def GetCalcTimeForInterval(TimeStart: pymxs.runtime.Time, TimeEnd: pymxs.runtime.Time) -> pymxs.runtime.Float: ...
    ...
class HandleRead:
    def GetValueCount() -> pymxs.runtime.Integer: ...
    def GetValueIndex(ParticleIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetValueByIndex(ValueIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetValue(ParticleIndex: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def GetValueFirst() -> pymxs.runtime.Integer: ...
    ...
class HandleWrite:
    def SetValue(ParticleIndex: pymxs.runtime.Integer, Handle: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetValueMany(ParticleIndices: pymxs.runtime.IntegerArray, Handle: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        particleIndices is In and Out parameter
        """
        ...
    def SetValueAll(Handle: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    ...
class TailFPInterface:
    @property
    def HUB() -> pymxs.runtime.Interface: ...
    ...
class LayerProperties:
    ON: pymxs.runtime.Boolean  
    LOCK: pymxs.runtime.Boolean  
    CURRENT: pymxs.runtime.Boolean  
    WIRECOLOR: pymxs.runtime.Color  
    ISGIEXCLUDED: pymxs.runtime.Boolean  
    @property
    def NAME() -> pymxs.runtime.String: ...
    RENDERABLE: pymxs.runtime.Boolean  
    INHERITVISIBILITY: pymxs.runtime.Boolean  
    PRIMARYVISIBILITY: pymxs.runtime.Boolean  
    SECONDARYVISIBILITY: pymxs.runtime.Boolean  
    RECEIVESHADOWS: pymxs.runtime.Boolean  
    CASTSHADOWS: pymxs.runtime.Boolean  
    APPLYATMOSPHERICS: pymxs.runtime.Boolean  
    RENDEROCCLUDED: pymxs.runtime.Boolean  
    ISHIDDEN: pymxs.runtime.Boolean  
    ISFROZEN: pymxs.runtime.Boolean  
    BOXMODE: pymxs.runtime.Boolean  
    BACKFACECULL: pymxs.runtime.Boolean  
    ALLEDGES: pymxs.runtime.Boolean  
    VERTEXTICKS: pymxs.runtime.Boolean  
    SHOWTRAJECTORY: pymxs.runtime.Boolean  
    XRAY: pymxs.runtime.Boolean  
    IGNOREEXTENTS: pymxs.runtime.Boolean  
    SHOWFROZENINGRAY: pymxs.runtime.Boolean  
    SHOWVERTEXCOLORS: pymxs.runtime.Boolean  
    VERTEXCOLORSSHADED: pymxs.runtime.Boolean  
    VISIBILITY: pymxs.runtime.Float  
    IMAGEMOTIONBLURMULTIPLIER: pymxs.runtime.Float  
    MOTIONBLURON: pymxs.runtime.Boolean  
    MOTIONBLUR: pymxs.runtime.Enum  # none, Object, image - rt.Name("")
    DISPLAY: pymxs.runtime.Enum  # viewport, boundingbox, wireframe, shaded - rt.Name("")
    @property
    def INODEGIPROPERTIES() -> pymxs.runtime.Interface: ...
    @property
    def LAYERASREFTARG() -> pymxs.runtime.MaxObject: ...
    def Addnode(Node: pymxs.runtime.Node) -> None: ...
    def Addnodes(Nodes: pymxs.runtime.NodeArray) -> None: ...
    def Select(OnOff: pymxs.runtime.Boolean) -> None: ...
    def Setname(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def Nodes(LayerNodes: pymxs.runtime.NodeArray) -> pymxs.runtime.Boolean:
        """
        layerNodes is Out parameter
        """
        ...
    def GetParent() -> pymxs.runtime.Interface: ...
    def SetParent(Parent: pymxs.runtime.Interface) -> pymxs.runtime.Boolean: ...
    def GetChild(Index: pymxs.runtime.Index) -> pymxs.runtime.Interface: ...
    def GetNumChildren() -> pymxs.runtime.Integer: ...
    def CanDelete() -> pymxs.runtime.Boolean: ...
    def GetNumNodes() -> pymxs.runtime.Integer: ...
    def HasSceneXRefNodesInHierarchy() -> pymxs.runtime.Boolean: ...
    ...
class LayerDisplayProperties:
    DEGRADE: pymxs.runtime.Boolean  
    ...
class IADTCategory:
    NAME: pymxs.runtime.String  
    @property
    def NUMSTYLES() -> pymxs.runtime.Integer: ...
    @property
    def NUMINSTANCES() -> pymxs.runtime.Integer: ...
    def GetStyles(Styles: pymxs.runtime.InterfaceArray) -> pymxs.runtime.Integer:
        """
        styles is In and Out parameter
        """
        ...
    ...
class PointCloud:
    def WaitForLoading() -> None: ...
    def ActiveViewportPointCount() -> pymxs.runtime.Integer: ...
    def GetTotalPointCount() -> pymxs.runtime.Integer64: ...
    ...
class IContainerObject:
    PROXYTYPE: pymxs.runtime.Enum  # none, alternate - rt.Name("")
    def GetContentNodes(NestedContainerNodes: pymxs.runtime.Boolean, ContentNodes: pymxs.runtime.NodeArray) -> None:
        """
        contentNodes is Out parameter
        """
        ...
    def AddNodeToContent(Node: pymxs.runtime.Node) -> pymxs.runtime.Boolean: ...
    def AddNodesToContent(Nodes: pymxs.runtime.NodeArray) -> pymxs.runtime.Boolean:
        """
        Nodes is In and Out parameter
        """
        ...
    def RemoveNodeFromContent(Node: pymxs.runtime.Node, Detach: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def IsNodeInContent(Node: pymxs.runtime.Node, NestedContainerNodes: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def SaveContainer(NewFileName: pymxs.runtime.Boolean, SaveAsVersion: pymxs.runtime.Integer = 0) -> pymxs.runtime.Boolean: ...
    def UpdateContainer() -> pymxs.runtime.Boolean: ...
    def UnloadContainer() -> pymxs.runtime.Boolean: ...
    def LoadContainer() -> pymxs.runtime.Boolean: ...
    def ReloadContainer() -> pymxs.runtime.Boolean: ...
    def MakeUnique() -> pymxs.runtime.Boolean: ...
    def MergeSource() -> pymxs.runtime.Boolean: ...
    def IsUnique() -> pymxs.runtime.Boolean: ...
    def IsOpen() -> pymxs.runtime.Boolean: ...
    def SetOpen(Open: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def CanEditInPlace() -> pymxs.runtime.Boolean: ...
    def SetAccessType(AccessType: pymxs.runtime.Enum) -> None:
        """
        accessType pymxs.runtime.Enums: {#noAccess|#onlyEditInPlace|#onlyAddNewObjects|#anythingUnlocked}
        """
        ...
    def GetAccessType() -> pymxs.runtime.Enum:
        """
        GetAccessType pymxs.runtime.Enums: {#noAccess|#onlyEditInPlace|#onlyAddNewObjects|#anythingUnlocked
        """
        ...
    def InheritedAccessType() -> pymxs.runtime.Enum:
        """
        InheritedAccessType pymxs.runtime.Enums: {#noAccess|#onlyEditInPlace|#onlyAddNewObjects|#anythingUnlocked
        """
        ...
    def SetLockedContents(LockedType: pymxs.runtime.Enum, Clear: pymxs.runtime.Boolean) -> None:
        """
        lockedType pymxs.runtime.Enums: {#lockAllMaterials|#lockAllModifiers|#lockAllAnimation|#lockAllObjects}
        """
        ...
    def IsLockedContents(LockedType: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        lockedType pymxs.runtime.Enums: {#lockAllMaterials|#lockAllModifiers|#lockAllAnimation|#lockAllObjects}
        """
        ...
    def ClearLockedContents() -> None: ...
    def GetStatusString() -> pymxs.runtime.String: ...
    def SetEditInPlace(EditInPlace: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def IsInPlaceEditing() -> pymxs.runtime.Boolean: ...
    ...
class MaxscriptParticleContainer:
    USETIME: pymxs.runtime.Boolean  
    USEAGE: pymxs.runtime.Boolean  
    USELIFESPAN: pymxs.runtime.Boolean  
    USEEVENTTIME: pymxs.runtime.Boolean  
    USEPOSITION: pymxs.runtime.Boolean  
    USESPEED: pymxs.runtime.Boolean  
    USEACCELERATION: pymxs.runtime.Boolean  
    USEORIENTATION: pymxs.runtime.Boolean  
    USESPIN: pymxs.runtime.Boolean  
    USESCALE: pymxs.runtime.Boolean  
    USETM: pymxs.runtime.Boolean  
    USESELECTED: pymxs.runtime.Boolean  
    USESHAPE: pymxs.runtime.Boolean  
    USEMTLINDEX: pymxs.runtime.Boolean  
    USEMAPPING: pymxs.runtime.Boolean  
    USEINTEGER: pymxs.runtime.Boolean  
    USEFLOAT: pymxs.runtime.Boolean  
    USEVECTOR: pymxs.runtime.Boolean  
    USEMATRIX: pymxs.runtime.Boolean  
    PARTICLEINDEX: pymxs.runtime.Index  # Range: 1 to 100000000
    PARTICLEID: pymxs.runtime.Index  # Range: 1 to 100000000
    @property
    def PARTICLENEW() -> pymxs.runtime.Boolean: ...
    PARTICLETIME: pymxs.runtime.Time  
    PARTICLEAGE: pymxs.runtime.Time  # Range: 0f to 9000000f
    PARTICLELIFESPAN: pymxs.runtime.Time  # Range: 0f to 9000000f
    PARTICLEEVENTTIME: pymxs.runtime.Time  # Range: 0f to 9000000f
    PARTICLEPOSITION: pymxs.runtime.Point3  
    PARTICLESPEED: pymxs.runtime.Point3  
    PARTICLEACCELERATION: pymxs.runtime.Point3  
    PARTICLEORIENTATION: pymxs.runtime.Point3  
    PARTICLESPIN: pymxs.runtime.AngleAxis  
    PARTICLESCALE: pymxs.runtime.Float  
    PARTICLESCALEXYZ: pymxs.runtime.Point3  
    PARTICLETM: pymxs.runtime.Matrix3  
    PARTICLESELECTED: pymxs.runtime.Boolean  
    PARTICLESHAPE: pymxs.runtime.Mesh  
    PARTICLEINTEGER: pymxs.runtime.Integer  
    PARTICLEFLOAT: pymxs.runtime.Float  
    PARTICLEVECTOR: pymxs.runtime.Point3  
    PARTICLEMATRIX: pymxs.runtime.Matrix3  
    PARTICLETESTSTATUS: pymxs.runtime.Boolean  
    PARTICLETESTTIME: pymxs.runtime.Time  # Range: 0f to 9000000f
    def GetParticleContainer() -> pymxs.runtime.IObject: ...
    def GetParticleSystem() -> pymxs.runtime.Object: ...
    def GetParticleSystemNode() -> pymxs.runtime.Node: ...
    def GetInitActions() -> pymxs.runtime.ObjectArray: ...
    def GetInitActionNodes() -> pymxs.runtime.NodeArray: ...
    def GetTimeStart() -> pymxs.runtime.Time: ...
    def GetTimeEnd() -> pymxs.runtime.Time: ...
    def SetTimeEnd(Time: pymxs.runtime.Time) -> None: ...
    def SetTimeEndPrecise(Time: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    def GetActionNode() -> pymxs.runtime.Node: ...
    def GetIntegrator() -> pymxs.runtime.Interface: ...
    def RandSign() -> pymxs.runtime.Integer: ...
    def Rand() -> pymxs.runtime.Float: ...
    def Rand(MaxNumber: pymxs.runtime.Integer) -> pymxs.runtime.Integer: ...
    def RandSpherePoint() -> pymxs.runtime.Point3: ...
    def RandDivergeVector(VectorToDiverge: pymxs.runtime.Point3, MaxAngle: pymxs.runtime.Angle) -> pymxs.runtime.Point3: ...
    def NumParticles() -> pymxs.runtime.Integer: ...
    def AddParticle() -> pymxs.runtime.Boolean: ...
    def AddParticles(Amount: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def DeleteParticle(Index: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def DeleteParticles(StartIndex: pymxs.runtime.Index, Amount: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetParticleID(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Index: ...
    def HasParticleID(ParticleID: pymxs.runtime.Index, ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        particleIndex is In and Out parameter
        """
        ...
    def IsParticleNew(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def IsParticleNewByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetParticleTime(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def GetParticleTimeByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetParticleTime(ParticleIndex: pymxs.runtime.Index, Time: pymxs.runtime.Time) -> None: ...
    def SetParticleTimePrecise(ParticleIndex: pymxs.runtime.Index, Time: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    def SetParticleTimeByID(ParticleID: pymxs.runtime.Index, Time: pymxs.runtime.Time) -> None: ...
    def SetParticleTimePreciseByID(ParticleID: pymxs.runtime.Index, Time: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    def GetParticleAge(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def GetParticleAgeByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetParticleAge(ParticleIndex: pymxs.runtime.Index, Age: pymxs.runtime.Time) -> None: ...
    def SetParticleAgeByID(ParticleID: pymxs.runtime.Index, Age: pymxs.runtime.Time) -> None: ...
    def GetParticleLifespan(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def GetParticleLifespanByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetParticleLifespan(ParticleIndex: pymxs.runtime.Index, Lifespan: pymxs.runtime.Time) -> None: ...
    def SetParticleLifespanByID(ParticleID: pymxs.runtime.Index, Lifespan: pymxs.runtime.Time) -> None: ...
    def GetParticleEventTime(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def GetParticleEventTimeByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Time: ...
    def SetParticleEventTime(ParticleIndex: pymxs.runtime.Index, EventTime: pymxs.runtime.Time) -> None: ...
    def SetParticleEventTimeByID(ParticleID: pymxs.runtime.Index, EventTime: pymxs.runtime.Time) -> None: ...
    def GetParticlePosition(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticlePositionByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticlePosition(ParticleIndex: pymxs.runtime.Index, Position: pymxs.runtime.Point3) -> None: ...
    def SetParticlePositionByID(ParticleID: pymxs.runtime.Index, Position: pymxs.runtime.Point3) -> None: ...
    def GetParticleSpeed(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleSpeedByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleSpeed(ParticleIndex: pymxs.runtime.Index, Speed: pymxs.runtime.Point3) -> None: ...
    def SetParticleSpeedByID(ParticleID: pymxs.runtime.Index, Speed: pymxs.runtime.Point3) -> None: ...
    def GetParticleAcceleration(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleAccelerationByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleAcceleration(ParticleIndex: pymxs.runtime.Index, Acceleration: pymxs.runtime.Point3) -> None: ...
    def SetParticleAccelerationByID(ParticleID: pymxs.runtime.Index, Acceleration: pymxs.runtime.Point3) -> None: ...
    def GetParticleOrientation(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleOrientationByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleOrientation(ParticleIndex: pymxs.runtime.Index, Orientation: pymxs.runtime.Point3) -> None: ...
    def SetParticleOrientationByID(ParticleID: pymxs.runtime.Index, Orientation: pymxs.runtime.Point3) -> None: ...
    def GetParticleSpin(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.AngleAxis: ...
    def GetParticleSpinByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.AngleAxis: ...
    def SetParticleSpin(ParticleIndex: pymxs.runtime.Index, Spin: pymxs.runtime.AngleAxis) -> None: ...
    def SetParticleSpinByID(ParticleID: pymxs.runtime.Index, Spin: pymxs.runtime.AngleAxis) -> None: ...
    def GetParticleScale(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def GetParticleScaleByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetParticleScale(ParticleIndex: pymxs.runtime.Index, Scale: pymxs.runtime.Float) -> None: ...
    def SetParticleScaleByID(ParticleID: pymxs.runtime.Index, Scale: pymxs.runtime.Float) -> None: ...
    def GetParticleScaleXYZ(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleScaleXYZByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleScaleXYZ(ParticleIndex: pymxs.runtime.Index, Scale: pymxs.runtime.Point3) -> None: ...
    def SetParticleScaleXYZByID(ParticleID: pymxs.runtime.Index, Scale: pymxs.runtime.Point3) -> None: ...
    def GetParticleTM(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def GetParticleTMByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def SetParticleTM(ParticleIndex: pymxs.runtime.Index, TransformationMatrix: pymxs.runtime.Matrix3) -> None: ...
    def SetParticleTMByID(ParticleID: pymxs.runtime.Index, TransformationMatrix: pymxs.runtime.Matrix3) -> None: ...
    def GetParticleSelected(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetParticleSelectedByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetParticleSelected(ParticleIndex: pymxs.runtime.Index, Selected: pymxs.runtime.Boolean) -> None: ...
    def SetParticleSelectedByID(ParticleID: pymxs.runtime.Index, Selected: pymxs.runtime.Boolean) -> None: ...
    def GetParticleShape(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Mesh: ...
    def GetParticleShapeByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Mesh: ...
    def SetParticleShape(ParticleIndex: pymxs.runtime.Index, Shape: pymxs.runtime.Mesh) -> None: ...
    def SetParticleShapeByID(ParticleID: pymxs.runtime.Index, Shape: pymxs.runtime.Mesh) -> None: ...
    def SetShapeForAllParticles(Shape: pymxs.runtime.Mesh) -> None: ...
    def SetParticleMtlIndex(ParticleIndex: pymxs.runtime.Index, MaterialIndex: pymxs.runtime.Index) -> None: ...
    def SetParticleMtlIndexByID(ParticleID: pymxs.runtime.Index, MaterialIndex: pymxs.runtime.Index) -> None: ...
    def SetMtlIndexForAllParticles(MaterialIndex: pymxs.runtime.Index) -> None: ...
    def SetParticleMapping(ParticleIndex: pymxs.runtime.Index, MapChannel: pymxs.runtime.Integer, MappingValue: pymxs.runtime.Point3) -> None: ...
    def SetParticleMappingByID(ParticleID: pymxs.runtime.Index, MapChannel: pymxs.runtime.Integer, MappingValue: pymxs.runtime.Point3) -> None: ...
    def SetMappingForAllParticles(MapChannel: pymxs.runtime.Integer, MappingValue: pymxs.runtime.Point3) -> None: ...
    def GetParticleInteger(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def GetParticleIntegerByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def SetParticleInteger(ParticleIndex: pymxs.runtime.Index, IntegerValue: pymxs.runtime.Integer) -> None: ...
    def SetParticleIntegerByID(ParticleID: pymxs.runtime.Index, IntegerValue: pymxs.runtime.Integer) -> None: ...
    def GetParticleFloat(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def GetParticleFloatByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetParticleFloat(ParticleIndex: pymxs.runtime.Index, FloatValue: pymxs.runtime.Float) -> None: ...
    def SetParticleFloatByID(ParticleID: pymxs.runtime.Index, FloatValue: pymxs.runtime.Float) -> None: ...
    def GetParticleVector(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def GetParticleVectorByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Point3: ...
    def SetParticleVector(ParticleIndex: pymxs.runtime.Index, VectorValue: pymxs.runtime.Point3) -> None: ...
    def SetParticleVectorByID(ParticleID: pymxs.runtime.Index, VectorValue: pymxs.runtime.Point3) -> None: ...
    def GetParticleMatrix(ParticleIndex: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def GetParticleMatrixByID(ParticleID: pymxs.runtime.Index) -> pymxs.runtime.Matrix3: ...
    def SetParticleMatrix(ParticleIndex: pymxs.runtime.Index, MatrixValue: pymxs.runtime.Matrix3) -> None: ...
    def SetParticleMatrixByID(ParticleID: pymxs.runtime.Index, MatrixValue: pymxs.runtime.Matrix3) -> None: ...
    def SetParticleTestStatus(ParticleIndex: pymxs.runtime.Index, Satisfy: pymxs.runtime.Boolean) -> None: ...
    def SetParticleTestStatusByID(ParticleID: pymxs.runtime.Index, Satisfy: pymxs.runtime.Boolean) -> None: ...
    def SetGlobalTestStatus(Satisfy: pymxs.runtime.Boolean) -> None: ...
    def SetParticleTestTime(ParticleIndex: pymxs.runtime.Index, Time: pymxs.runtime.Time) -> None: ...
    def SetParticleTestTimePrecise(ParticleIndex: pymxs.runtime.Index, Time: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    def SetParticleTestTimeByID(ParticleID: pymxs.runtime.Index, Time: pymxs.runtime.Time) -> None: ...
    def SetParticleTestTimePreciseByID(ParticleID: pymxs.runtime.Index, Time: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    def SetGlobalTestTime(Time: pymxs.runtime.Time) -> None: ...
    def SetGlobalTestTimePrecise(Time: pymxs.runtime.Time, Fraction: pymxs.runtime.Float) -> None: ...
    ...
class Props:
    MAPPING: pymxs.runtime.Boolean  
    SHADOWS: pymxs.runtime.Boolean  
    AUTOREFLECT: pymxs.runtime.Boolean  
    FORCEWIREFRAME: pymxs.runtime.Boolean  
    ANTIALIASING: pymxs.runtime.Boolean  
    FILTERMAPS: pymxs.runtime.Boolean  
    ObjectMOTIONBLUR: pymxs.runtime.Boolean  
    IMAGEMOTIONBLUR: pymxs.runtime.Boolean  
    IMAGEBLURENV: pymxs.runtime.Boolean  
    IMAGEBLURTRANS: pymxs.runtime.Boolean  
    CONSERVEMEMORY: pymxs.runtime.Boolean  
    ENABLEPIXELSAMPLER: pymxs.runtime.Boolean  
    ENABLESSE: pymxs.runtime.Boolean  
    WIRETHICKNESS: pymxs.runtime.Float  
    ObjectBLURDURATION: pymxs.runtime.Float  
    IMAGEBLURDURATION: pymxs.runtime.Float  
    ANTIALIASFILTERSIZE: pymxs.runtime.Float  
    ObjectBLURSAMPLES: pymxs.runtime.Integer  
    ObjectBLURSUBDIVISIONS: pymxs.runtime.Integer  
    AUTOREFLECTLEVELS: pymxs.runtime.Integer  
    ColorCLAMPTYPE: pymxs.runtime.Integer  
    ANTIALIASFILTER: pymxs.runtime.MaxObject  # Validator function
    GLOBALSAMPLERENABLED: pymxs.runtime.Boolean  
    GLOBALSAMPLERCLASSBYNAME: pymxs.runtime.String  
    GLOBALSAMPLERSAMPLEMAPS: pymxs.runtime.Boolean  
    GLOBALSAMPLERQUALITY: pymxs.runtime.Float  
    GLOBALSAMPLERADAPTIVE: pymxs.runtime.Boolean  
    GLOBALSAMPLERADAPTIVETHRESH: pymxs.runtime.Float  
    ...
class IRefTargContainer:
    HOLDASWEAKREFERENCES: pymxs.runtime.Boolean  
    def GetNumItems() -> pymxs.runtime.Integer: ...
    def GetItem(Index: pymxs.runtime.Index) -> pymxs.runtime.MaxObject: ...
    def AppendItem(Item: pymxs.runtime.MaxObject) -> pymxs.runtime.Index: ...
    def SetItem(Index: pymxs.runtime.Index, Item: pymxs.runtime.MaxObject) -> None: ...
    def InsertItem(Index: pymxs.runtime.Index, Item: pymxs.runtime.MaxObject) -> pymxs.runtime.Index: ...
    def RemoveItem(Index: pymxs.runtime.Index) -> None: ...
    def FindFirstItem(Item: pymxs.runtime.MaxObject) -> pymxs.runtime.Index: ...
    def GetChangedRefTargetIndex() -> pymxs.runtime.Index: ...
    def GetChangedRefTarget() -> pymxs.runtime.MaxObject: ...
    ...
class IRefTargContainerStaticInterface:
    def CreateInstance(HoldAsWeakReferences: pymxs.runtime.Boolean = False) -> pymxs.runtime.MaxObject: ...
    ...
class ILayerWeightsFPInterface:
    @property
    def PARENTWEIGHTCONTROLLER() -> pymxs.runtime.Control: ...
    def GetCombinedWeight(Index: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    ...
class IQuicksilverRenderer:
    RENDERINGMODE: pymxs.runtime.Enum  # pymxs.runtime.Time, Iterations - rt.Name("")
    RENDERINGTIME: pymxs.runtime.Integer  # Range: 1 to 3540
    RENDERINGITERATIONS: pymxs.runtime.Integer  # Range: 1 to 4096
    AMBIENTOCCLUSIONENABLED: pymxs.runtime.Boolean  
    AMBIENTOCCLUSIONRADIUS: pymxs.runtime.Float  # Range: 0.0 to 200.0
    AMBIENTOCCLUSIONINTENSITY: pymxs.runtime.Float  # Range: 0.0 to 2.0
    DEPTHOFFIELDENABLED: pymxs.runtime.Boolean  
    DEPTHOFFIELDMODE: pymxs.runtime.Enum  # Camera, Override - rt.Name("")
    FSTOP: pymxs.runtime.Float  
    FOCALPLANE: pymxs.runtime.Float  
    INDIRECTILLUMINATIONENABLED: pymxs.runtime.Boolean  
    INDIRECTILLUMINATIONLODENABLED: pymxs.runtime.Boolean  
    INDIRECTILLUMINATIONSHADOWENABLED: pymxs.runtime.Boolean  
    INDIRECTILLUMINATIONMULTIPLIER: pymxs.runtime.Float  # Range: 0.0 to 3.0
    INDIRECTILLUMINATIONSAMPLEAREA: pymxs.runtime.Float  # Range: 1.0 to 3.40282e+38
    INDIRECTILLUMINATIONRSMSIZE: pymxs.runtime.Integer  # Range: 32 to 2048
    INDIRECTILLUMINATIONSHADOWSIZE: pymxs.runtime.Integer  # Range: 32 to 2048
    INDIRECTILLUMINATIONSHADOWRANGE: pymxs.runtime.Integer  # Range: 1 to 32
    USEDEFAULTLIGHTS: pymxs.runtime.Boolean  
    USESHADOWS: pymxs.runtime.Boolean  
    SOFTSHADOWMULTIPLIER: pymxs.runtime.Float  
    REFLECTIONSENABLED: pymxs.runtime.Boolean  
    REFLECTIONSMATERIALIDENABLED: pymxs.runtime.Boolean  
    REFLECTIONSOBJECTIDENABLED: pymxs.runtime.Boolean  
    REFLECTIONSUSENODESLIST: pymxs.runtime.Boolean  
    REFLECTIONSMATERIALID: pymxs.runtime.Integer  # Range: 0 to 65535
    REFLECTIONSOBJECTID: pymxs.runtime.Integer  # Range: 0 to 65535
    TRANSPARENCYENABLED: pymxs.runtime.Boolean  
    USESHADERCACHEFILESYSTEM: pymxs.runtime.Boolean  
    VISUALSTYLE: pymxs.runtime.Enum  # Realistic, Shaded, ConsistentColors, HiddenLine, Wireframe, Clay, Ink, ColorInk, Acrylic, Tech, Graphite, ColorPencil, Pastel - rt.Name("")
    EDGEDFACES: pymxs.runtime.Boolean  
    TEXTUREENABLED: pymxs.runtime.Boolean  
    HIGHLIGHTS: pymxs.runtime.Boolean  
    BOKEHSHAPE: pymxs.runtime.Filename  
    SHADOWINTENSITY: pymxs.runtime.Float  # Range: 0.0 to 1.0
    AUTOSYNCHRONIZEWITHACTIVEVIEWPORT: pymxs.runtime.Boolean  
    BLOOMENABLED: pymxs.runtime.Boolean  
    BLOOMTINTCOLOR: pymxs.runtime.Point3  
    BLOOMTINTCONTRIBUTION: pymxs.runtime.Float  
    BLOOMTHRESHOLD: pymxs.runtime.Float  
    BLOOMTHRESHOLDSMOOTHING: pymxs.runtime.Float  
    BLOOMSTRENGTH: pymxs.runtime.Float  
    BLOOMRADIUS: pymxs.runtime.Integer  
    BLOOMQUALITY: pymxs.runtime.Enum  # Gaussian_3x3, Gaussian_5x5, Gaussian_7x7, Gaussian_9x9 - rt.Name("")
    BLOOMDIRTMAPENABLED: pymxs.runtime.Boolean  
    BLOOMDIRTMAPIMAGE: pymxs.runtime.Filename  
    BLOOMDIRTCONTRIBUTION: pymxs.runtime.Float  
    BLOOMAPPLYTOBACKGROUND: pymxs.runtime.Boolean  
    BLOOMSHOWBLOOMPASS: pymxs.runtime.Boolean  
    BLOOMSHOWFILTERPASS: pymxs.runtime.Boolean  
    BLOOMSHOWRADIUSPASSNUMBER: pymxs.runtime.Integer  
    def CommitParameters() -> None: ...
    def UpdateUI() -> None: ...
    def ForceSaveShaderCacheFile() -> None: ...
    def RunUnitTests() -> None: ...
    def SetNPRBool(Name: pymxs.runtime.String, Value: pymxs.runtime.Boolean) -> None: ...
    def SetNPRInt(Name: pymxs.runtime.String, Value: pymxs.runtime.Integer) -> None: ...
    def SetNPRFloat(Name: pymxs.runtime.String, Value: pymxs.runtime.Float) -> None: ...
    def SetNPRFloat(Name: pymxs.runtime.String, Value: pymxs.runtime.Point4) -> None: ...
    def SetNPRString(Name: pymxs.runtime.String, Value: pymxs.runtime.String) -> None: ...
    def ShowNPRParameters() -> None: ...
    def GetNPRParameterInfo() -> pymxs.runtime.String: ...
    def GetNPRParameterCount() -> pymxs.runtime.Integer: ...
    def GetNPRParameterName(Index: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def GetNPRParameterType(Index: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        GetNPRParameterType pymxs.runtime.Enums: {#Unknown|#Bool|#Int|#Float|#Float4|#String
        """
        ...
    def GetNPRBool(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetNPRInt(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetNPRFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def GetNPRFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Point4: ...
    def GetNPRString(Name: pymxs.runtime.String) -> pymxs.runtime.String: ...
    def GetNPRMinInt(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetNPRMinFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def GetNPRMinFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Point4: ...
    def GetNPRMaxInt(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetNPRMaxFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Float: ...
    def GetNPRMaxFloat(Name: pymxs.runtime.String) -> pymxs.runtime.Point4: ...
    def SetReflectionsNodesIncludeList(In: pymxs.runtime.NodeArray) -> None:
        """
        in_nodes_array_by_reference_set_as_include_list is In and Out parameter
        """
        ...
    def SetReflectionsNodesExcludeList(In: pymxs.runtime.NodeArray) -> None:
        """
        in_nodes_array_by_reference_set_as_exclude_list is In and Out parameter
        """
        ...
    def GetReflectionsNodesList(Out: pymxs.runtime.NodeArray) -> pymxs.runtime.Boolean:
        """
        out_nodes_array_by_reference is In and Out parameter
        """
        ...
    def SynchronizeWithActiveViewport() -> None: ...
    ...
class INodeTransformMonitor:
    Node: pymxs.runtime.Node  
    FORWARDTRANSFORMCHANGEMSGS: pymxs.runtime.Boolean  
    FORWARDFLAGNODESMSGS: pymxs.runtime.Boolean  
    FORWARDENUMDEPENDENTS: pymxs.runtime.Boolean  
    ...
class IMtlRender_Compability_Renderer:
    ...
class Jobs:
    @property
    def LASTJOBS() -> pymxs.runtime.String: ...
    @property
    def USERLOGGEDIN() -> pymxs.runtime.Boolean: ...
    @property
    def CHECKPRICEPENDING() -> pymxs.runtime.Boolean: ...
    @property
    def CHECKPRICERECEIVED() -> pymxs.runtime.Boolean: ...
    @property
    def CREDITSNEEDED() -> pymxs.runtime.Integer: ...
    @property
    def CREDITSAVAILABLE() -> pymxs.runtime.Integer: ...
    @property
    def WAITINGTIME() -> pymxs.runtime.Integer: ...
    def QueryJobInfo(JobID: pymxs.runtime.String) -> pymxs.runtime.String: ...
    ...
class INodeMonitor:
    Node: pymxs.runtime.Node  
    ...
class IRefTargMonitor:
    REFTARG: pymxs.runtime.MaxObject  
    PERSIST: pymxs.runtime.Boolean  
    ...
class TextObject2:
    def GetRTFString(Rtfstring: pymxs.runtime.String) -> None:
        """
        rtfstring is Out parameter
        """
        ...
    def SetRTFString(String: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetPlaintextString(Textstring: pymxs.runtime.String) -> None:
        """
        textstring is Out parameter
        """
        ...
    def SetPlaintextString(String: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def ResetString() -> None: ...
    def SetFont(FontName: pymxs.runtime.String, CharSet: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetBold(Sw: pymxs.runtime.Boolean) -> None: ...
    def SetItalic(Sw: pymxs.runtime.Boolean) -> None: ...
    def SetUnderline(Sw: pymxs.runtime.Boolean) -> None: ...
    def SetStrikethrough(Sw: pymxs.runtime.Boolean) -> None: ...
    def SetSubscript(Sw: pymxs.runtime.Boolean) -> None: ...
    def SetSuperscript(Sw: pymxs.runtime.Boolean) -> None: ...
    def SetAllCaps(Sw: pymxs.runtime.Boolean) -> None: ...
    def SetSmallCaps(Sw: pymxs.runtime.Boolean) -> None: ...
    def ResetStyle() -> None: ...
    def AppendString(String: pymxs.runtime.String) -> None: ...
    def AppendChar(Character: pymxs.runtime.Integer) -> None: ...
    def SetCharBaseline(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.WorldUnits) -> pymxs.runtime.Boolean: ...
    def SetCharKerning(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.WorldUnits) -> pymxs.runtime.Boolean: ...
    def SetCharXScale(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def SetCharYScale(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.Float) -> pymxs.runtime.Boolean: ...
    def GetNumChars() -> pymxs.runtime.Integer: ...
    def GetCharacter(Index: pymxs.runtime.Index, Character: pymxs.runtime.Integer, FontName: pymxs.runtime.String, CharSet: pymxs.runtime.Integer, Style: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        character is Out parameter
        fontName is Out parameter
        charSet is Out parameter
        style is Out parameter
        """
        ...
    def SetCharacter(Index: pymxs.runtime.Index, Character: pymxs.runtime.Integer, FontName: pymxs.runtime.String, CharSet: pymxs.runtime.Integer, Style: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def GetSeparationType() -> pymxs.runtime.Index: ...
    def SetSeparationType(Type: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetSeparationUpAxis(Axis: pymxs.runtime.Index, Flip: pymxs.runtime.Boolean) -> None:
        """
        axis is In and Out parameter
        flip is In and Out parameter
        """
        ...
    def SetSeparationUpAxis(Axis: pymxs.runtime.Index, Flip: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetCharBaseline(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.WorldUnits, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        Value is Out parameter
        valid is In and Out parameter
        """
        ...
    def GetCharKerning(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.WorldUnits, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        Value is Out parameter
        valid is In and Out parameter
        """
        ...
    def GetCharXScale(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.Float, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        Value is Out parameter
        valid is In and Out parameter
        """
        ...
    def GetCharYScale(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Value: pymxs.runtime.Float, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        Value is Out parameter
        valid is In and Out parameter
        """
        ...
    def GetCharGlyphMesh(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Mesh: pymxs.runtime.Mesh, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        Mesh is In and Out parameter
        valid is In and Out parameter
        """
        ...
    def GetCharExtrasMesh(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Mesh: pymxs.runtime.Mesh, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        Mesh is In and Out parameter
        valid is In and Out parameter
        """
        ...
    def GetCharTotalMesh(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Mesh: pymxs.runtime.Mesh, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        Mesh is In and Out parameter
        valid is In and Out parameter
        """
        ...
    def GetCursorPos() -> pymxs.runtime.Index: ...
    def SetCursorPos(Pos: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetValueAsText(Pos: pymxs.runtime.Index, Name: pymxs.runtime.String, Type: pymxs.runtime.Enum, Format: pymxs.runtime.Enum, Whole: pymxs.runtime.Integer, Decimal: pymxs.runtime.Integer, Uniform: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#Script|#Expression|#Number}
        format pymxs.runtime.Enums: {#Whole|#Real|#Percent|#DisplayUnits|#Time}
        """
        ...
    def GetFinalString(Time: pymxs.runtime.Time, Textstring: pymxs.runtime.String) -> None:
        """
        textstring is Out parameter
        """
        ...
    def GetMacroIndex(Name: pymxs.runtime.String) -> pymxs.runtime.Index: ...
    def GetMacroFormat(Name: pymxs.runtime.String) -> pymxs.runtime.Enum:
        """
        GetMacroFormat pymxs.runtime.Enums: {#Whole|#Real|#Percent|#DisplayUnits|#Time
        """
        ...
    def GetMacroNumWhole(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetMacroNumDecimal(Name: pymxs.runtime.String) -> pymxs.runtime.Integer: ...
    def GetMacroUniformWidth(Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def SetMacroFormat(Name: pymxs.runtime.String, Format: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        format pymxs.runtime.Enums: {#Whole|#Real|#Percent|#DisplayUnits|#Time}
        """
        ...
    def SetMacroNumWhole(Name: pymxs.runtime.String, Whole: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetMacroNumDecimal(Name: pymxs.runtime.String, Decimal: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def SetMacroUniformWidth(Name: pymxs.runtime.String, Uniform: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    ...
class Layers:
    def Count() -> pymxs.runtime.Integer: ...
    def Add() -> None: ...
    def Delete(Index: pymxs.runtime.Index) -> None: ...
    def Duplicate(Index: pymxs.runtime.Index) -> None: ...
    def Move(From: pymxs.runtime.Index, To: pymxs.runtime.Index, Before: pymxs.runtime.Boolean = False) -> None: ...
    ...
class BlobMeshOps:
    def AddBlob(Node: pymxs.runtime.Node) -> None: ...
    def RemoveBlob(Node: pymxs.runtime.Node) -> None: ...
    def AddPFBlob(Node: pymxs.runtime.Node) -> None: ...
    def RemovePFBlob(Node: pymxs.runtime.Node) -> None: ...
    def Pick() -> None: ...
    def Add() -> None: ...
    def AddPF() -> None: ...
    ...
class Cache:
    def Update() -> pymxs.runtime.Boolean: ...
    def Clear() -> pymxs.runtime.Boolean: ...
    ...
class CacheDisk:
    def GetDefaultCachePath() -> pymxs.runtime.Filename: ...
    def SetDefaultCachePath(FileName: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    ...
class MultiTiles:
    PATTERNFORMAT: pymxs.runtime.Enum  # ZBrush, Mudbox, UDIM, Custom - rt.Name("")
    VIEWPORTQUALITY: pymxs.runtime.Enum  # Low, Middle, High - rt.Name("")
    def SetPatternedImageFile(File: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    def SetImageFile(Tile: pymxs.runtime.Index, File: pymxs.runtime.Filename) -> pymxs.runtime.Boolean: ...
    def GetTileUOffset(Tile: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def SetTileUOffset(Tile: pymxs.runtime.Index, U: pymxs.runtime.Integer) -> None: ...
    def GetTileVOffset(Tile: pymxs.runtime.Index) -> pymxs.runtime.Integer: ...
    def SetTileVOffset(Tile: pymxs.runtime.Index, V: pymxs.runtime.Integer) -> None: ...
    def GetTileTexmap(Tile: pymxs.runtime.Index) -> pymxs.runtime.Texturemap: ...
    def SetTileTexmap(Tile: pymxs.runtime.Index, Texmap: pymxs.runtime.Texturemap) -> None: ...
    def TileCount() -> pymxs.runtime.Integer: ...
    def AddTile() -> None: ...
    def DeleteTile(Tile: pymxs.runtime.Index) -> None: ...
    ...
class WaveformCtrl:
    @property
    def NBWAVES() -> pymxs.runtime.Integer: ...
    def Append() -> pymxs.runtime.Boolean: ...
    def Insert(Wave: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def Delete(Wave: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def GetName(Wave: pymxs.runtime.Index) -> pymxs.runtime.String: ...
    def SetName(Wave: pymxs.runtime.Index, Name: pymxs.runtime.String) -> None: ...
    def GetPeriod(Wave: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetPeriod(Wave: pymxs.runtime.Index, Period: pymxs.runtime.Float) -> None: ...
    def GetDutyCycle(Wave: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetDutyCycle(Wave: pymxs.runtime.Index, Duty: pymxs.runtime.Float) -> None: ...
    def GetAmplitude(Wave: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetAmplitude(Wave: pymxs.runtime.Index, Amplitude: pymxs.runtime.Float) -> None: ...
    def GetPhase(Wave: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetPhase(Wave: pymxs.runtime.Index, Phase: pymxs.runtime.Float) -> None: ...
    def GetBiasType(Wave: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        GetBiasType pymxs.runtime.Enums: {#centered|#positive|#negative|#manual
        """
        ...
    def SetBiasType(Wave: pymxs.runtime.Index, Bias: pymxs.runtime.Enum) -> None:
        """
        bias type pymxs.runtime.Enums: {#centered|#positive|#negative|#manual}
        """
        ...
    def GetBias(Wave: pymxs.runtime.Index) -> pymxs.runtime.Float: ...
    def SetBias(Wave: pymxs.runtime.Index, Bias: pymxs.runtime.Float) -> None: ...
    def GetType(Wave: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        GetType pymxs.runtime.Enums: {#square|#sine|#sawtooth|#triangle|#halfsine
        """
        ...
    def SetType(Wave: pymxs.runtime.Index, Effect: pymxs.runtime.Enum) -> None:
        """
        effect type pymxs.runtime.Enums: {#square|#sine|#sawtooth|#triangle|#halfsine}
        """
        ...
    def GetEffect(Wave: pymxs.runtime.Index) -> pymxs.runtime.Enum:
        """
        GetEffect pymxs.runtime.Enums: {#add|#multiply|#clamp_above|#clamp_below
        """
        ...
    def SetEffect(Wave: pymxs.runtime.Index, Effect: pymxs.runtime.Enum) -> None:
        """
        effect type pymxs.runtime.Enums: {#add|#multiply|#clamp_above|#clamp_below}
        """
        ...
    def IsEnabled(Wave: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def Enable(Wave: pymxs.runtime.Index, Enabled: pymxs.runtime.Boolean) -> None: ...
    def GetInverted(Wave: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetInverted(Wave: pymxs.runtime.Index, Inverted: pymxs.runtime.Boolean) -> None: ...
    def GetFlipped(Wave: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def SetFlipped(Wave: pymxs.runtime.Index, Flipped: pymxs.runtime.Boolean) -> None: ...
    ...
class IXRefAtmospheric:
    def GetSourceAtmospheric(ResolveNestedXRef: pymxs.runtime.Boolean) -> pymxs.runtime.MaxObject: ...
    ...
class Decay:
    def Reset() -> None: ...
    def Record() -> None: ...
    ...
class IIndirectRefTargContainerStaticInterface:
    def CreateInstance() -> pymxs.runtime.MaxObject: ...
    ...
class InstanceDuplMapInterface:
    def FindDuplicateMap(MapsFound: pymxs.runtime.TexturemapArray) -> None:
        """
        mapsFound is Out parameter
        """
        ...
    def FindCopyMap(DuplMap: pymxs.runtime.Texturemap, MapsFound: pymxs.runtime.TexturemapArray) -> None:
        """
        mapsFound is Out parameter
        """
        ...
    def FixMap(Maps: pymxs.runtime.TexturemapArray, Prompt: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    def FixMapAll(Prompt: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    ...
class InstanceDuplMapActions:
    def InstanceDuplMapAll() -> pymxs.runtime.Boolean: ...
    ...
class BlendedBoxMap:
    def Render() -> None: ...
    def GetBaseFilename(Fname: pymxs.runtime.String) -> None:
        """
        fname is Out parameter
        """
        ...
    def SetBaseFilename(Fname: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    ...
class DataChannelModifier:
    def NumberOperators() -> pymxs.runtime.Integer: ...
    def OperatorName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> None:
        """
        name is Out parameter
        """
        ...
    def OperatorInfo(Index: pymxs.runtime.Index, Info: pymxs.runtime.String) -> None:
        """
        info is Out parameter
        """
        ...
    def OperatorTooltip(Index: pymxs.runtime.Index, ToolTip: pymxs.runtime.String) -> None:
        """
        toolTip is Out parameter
        """
        ...
    def OperatorID(Index: pymxs.runtime.Index, IdA: pymxs.runtime.Integer64, Idb: pymxs.runtime.Integer64) -> None:
        """
        idA is Out parameter
        idb is Out parameter
        """
        ...
    def AddOperator(IdA: pymxs.runtime.Integer64, Idb: pymxs.runtime.Integer64, WhereAt: pymxs.runtime.Integer) -> None: ...
    def StackCount() -> pymxs.runtime.Integer: ...
    def StackOperatorName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> None:
        """
        name is Out parameter
        """
        ...
    def SelectStackOperator(Index: pymxs.runtime.Index) -> None: ...
    def DeleteStackOperator(Index: pymxs.runtime.Index) -> None: ...
    def ReorderStackOperator(IndexList: pymxs.runtime.IndexArray) -> None: ...
    def SavePreset(Name: pymxs.runtime.String, ToolTip: pymxs.runtime.String) -> None: ...
    def LoadPreset(Name: pymxs.runtime.String) -> None: ...
    def DeletePreset(Name: pymxs.runtime.String) -> None: ...
    def PresetCount() -> pymxs.runtime.Integer: ...
    def PresetName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> None:
        """
        name is Out parameter
        """
        ...
    def PerfTrackingStart() -> None: ...
    def PerfTrackingEnd() -> None: ...
    def PerfTrackingReport() -> None: ...
    ...
class BooleanObject2:
    def GetNumOperands() -> pymxs.runtime.Integer: ...
    def GetOperandName(Index: pymxs.runtime.Index, Nameout: pymxs.runtime.String) -> pymxs.runtime.Boolean:
        """
        nameout is Out parameter
        """
        ...
    def SetOperandName(Index: pymxs.runtime.Index, Name: pymxs.runtime.String) -> pymxs.runtime.Boolean: ...
    def GetOperandType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#system|#generated}
        type is Out parameter
        """
        ...
    def GetNumChildren(Index: pymxs.runtime.Index, Count: pymxs.runtime.Integer) -> pymxs.runtime.Boolean:
        """
        count is Out parameter
        """
        ...
    def GetOperationType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#union|#intersection|#subtraction|#merge|#attach|#insert}
        type is Out parameter
        """
        ...
    def SetOperationType(Index: pymxs.runtime.Index, Type: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        type pymxs.runtime.Enums: {#union|#intersection|#subtraction|#merge|#attach|#insert}
        """
        ...
    def GetOperationOption(Index: pymxs.runtime.Index, Option: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        option pymxs.runtime.Enums: {#none|#imprint|#cookie}
        option is Out parameter
        """
        ...
    def SetOperationOption(Index: pymxs.runtime.Index, Option: pymxs.runtime.Enum) -> pymxs.runtime.Boolean:
        """
        option pymxs.runtime.Enums: {#none|#imprint|#cookie}
        """
        ...
    def GetSolo(OperandIndex: pymxs.runtime.Index, Solo: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        solo is Out parameter
        """
        ...
    def SetSolo(OperandIndex: pymxs.runtime.Index, Solo: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def GetSoloOperandIndex(OperandIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean:
        """
        operandIndex is Out parameter
        """
        ...
    def GetDisable(OperandIndex: pymxs.runtime.Index, Disable: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        disable is Out parameter
        """
        ...
    def SetDisable(OperandIndex: pymxs.runtime.Index, Disable: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def HasSubdivs(OperandIndex: pymxs.runtime.Index, Time: pymxs.runtime.Time, Sub: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean:
        """
        sub is Out parameter
        """
        ...
    def GetSubdivs(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Subdivs: pymxs.runtime.Integer, Valid: pymxs.runtime.Interval) -> pymxs.runtime.Boolean:
        """
        subdivs is Out parameter
        valid is In and Out parameter
        """
        ...
    def SetSubdivs(Index: pymxs.runtime.Index, Time: pymxs.runtime.Time, Subdivs: pymxs.runtime.Integer) -> pymxs.runtime.Boolean: ...
    def RemoveOperand(OperandIndex: pymxs.runtime.Index) -> pymxs.runtime.Boolean: ...
    def AppendOperand(BoolNode: pymxs.runtime.Node, OperandNode: pymxs.runtime.Node, Hold: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    def InsertOperand(BoolNode: pymxs.runtime.Node, OperandNode: pymxs.runtime.Node, Where: pymxs.runtime.Index, Hold: pymxs.runtime.Boolean) -> pymxs.runtime.Boolean: ...
    ...
class HsdsOps:
    def Subdivide() -> None: ...
    def DeletePolygon() -> None: ...
    def Hide() -> None: ...
    def ShowAll() -> None: ...
    def CreateNamedSelection(Name: pymxs.runtime.String) -> None: ...
    def ActivateNamedSelection(Name: pymxs.runtime.String) -> None: ...
    def AddDetail(Length: pymxs.runtime.Float, Angle: pymxs.runtime.Float) -> None: ...
    def RemoveDetail(Length: pymxs.runtime.Float, Angle: pymxs.runtime.Float) -> None: ...
    def SetDetailPrecision(P: pymxs.runtime.Float) -> None: ...
    ...
class BirthGrid:
    def CalculateMeshVolumeLimits() -> pymxs.runtime.Boolean: ...
    ...
class BirthGroup:
    def UpdateParticlesFromObjects() -> pymxs.runtime.Boolean: ...
    ...
class FixAmbientColors:
    def FixAll(Prompt: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    def FixSelected(Prompt: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    def FindAll(MtlsFound: pymxs.runtime.MaterialArray) -> None:
        """
        mtlsFound is Out parameter
        """
        ...
    def FindSelected(MtlsFound: pymxs.runtime.MaterialArray) -> None:
        """
        mtlsFound is Out parameter
        """
        ...
    def Find(Objects: pymxs.runtime.NodeArray, MtlsFound: pymxs.runtime.MaterialArray) -> None:
        """
        mtlsFound is Out parameter
        """
        ...
    def FindMaterials(Mtls: pymxs.runtime.MaterialArray, MtlsFound: pymxs.runtime.MaterialArray) -> None:
        """
        mtlsFound is Out parameter
        """
        ...
    def Fix(Mtls: pymxs.runtime.MaterialArray, Prompt: pymxs.runtime.Boolean = True) -> pymxs.runtime.Boolean: ...
    ...
class FixAmbientActions:
    def FixAmbientAll() -> pymxs.runtime.Boolean: ...
    def FixAmbientSelected() -> pymxs.runtime.Boolean: ...
    ...
class AlembicContainer:
    def PerformanceMode(On: pymxs.runtime.Boolean) -> None: ...
    def ShowInspector() -> None: ...
    ...
